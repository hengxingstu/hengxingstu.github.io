<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>佛教教义</title>
      <link href="/2025/02/01/religion/%E4%BD%9B%E6%95%99/"/>
      <url>/2025/02/01/religion/%E4%BD%9B%E6%95%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Ceetx">佛教的基本教义</h1>参考的资料：<p><a href="https://www.bilibili.com/video/BV1zXNVekEFM/?spm_id_from=333.337.search-card.all.click&vd_source=e3c70cb168037e0c9a88f9145a1aaa21">【科普】用一节课的时间，带你领悟2500年前的智慧|从零入门佛学概要_哔哩哔哩_bilibili</a></p><h2 id="V6asK">人生是苦海</h2>> duhkha 梵文 罗马化后的写法  意为 苦><p>汉语中的苦是感官上的痛苦、疼痛的感官。而在梵文中则表示一种<strong>人身心感受到的普遍的感受，</strong>有时也被翻译为烦恼、不完满。</p><blockquote><p>buddha 佛陀 觉悟的人</p></blockquote><p>所以最初的教义中，佛也是人，并不是神</p><p>苦 是普遍的，无论是开心还是伤心，都会带来duhkha的感受。所以觉悟者将其细分为两种：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35698483/1739714404448-10dd04a3-4fb0-4b2f-9ac1-8fa4a89bb054.png"></p><h3 id="mIo0U">苦苦</h3>苦苦很好理解，就是能够直接认知到的苦。<p>比如身体受伤，感受到的疼痛。这是身体上的。再比如恋人分手，感到伤心难过。这是精神上的。</p><p>特点是<font style="background-color:#FBDE28;">即刻</font>能感受到，没有迟滞。</p><h3 id="VTxkP">坏苦</h3>> 快乐的事情也会带来 duhkha（苦）><p>快乐怎么会带来痛苦呢？</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35698483/1739715005032-7cbce48c-6e8e-489c-a8d7-257bfb81b569.png"></p><p>在梵语中，Viparinama是变化的意思，也就是说坏苦是由于事物变化带来的某种感受。</p><p>根据觉悟者说，变化是万物不变的规律。所以，有生必有灭，有聚必有散，快乐有出现的时候，也就必有消失的时候。<strong>快乐消失的时候，就会带来苦的感受。</strong></p><p>举个栗子，当你和家人度过假期的时候，刚一开始，你非常开心，每天都跟家里人聊的很愉快。但假期快结束时，你就会觉得不对劲了，做什么都会想着只剩一两天，你们就要分开了，又要去上班上学了。</p><p>这就是坏苦。一种当快乐消失时带来的感受。</p><p> 不过，肯定有人反驳说：我心态好，跟家人在一起，不论何时我都很开心，因为我很珍惜和他们在一起的每一分钟。根据觉悟者的观点，“那是因为你还在<font style="background-color:#FBDE28;">延迟</font>中，时间沉淀还不够，只要时间足够久，你一定会感受到 【坏苦】。”</p><p>我们可以看看古代诗人的诗句</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35698483/1739717035306-f17cfed6-c569-4d89-a95b-6e3aaebe4894.png"></p><p>人生若只如初见，人生如果能像第一次相见那样该多好啊。物是人非，朋友、恋人、家人都离开了，【坏苦】就来了。如果让觉悟者赏析这些诗句，他会告诉我们：</p><blockquote><p>人生有起便有落，有聚便有散。没有恒常不变的事物。这些不同时代的诗人，都表达了对世事无常的惆怅和感叹。</p></blockquote><p><strong>由无常所带来的感受</strong>，这是坏苦的第二层含义。包含了第一层</p><blockquote><p>这里我们也可以反应过来了，坏字表示的不是好坏的意思，而是坏死的坏，事物走向衰败的坏。</p></blockquote><h3 id="KiZ6P">行苦</h3>其实这里提到的是佛教中的三苦的概念，第三苦就是行苦，行苦其实也是形容无常所带来的感受。区别就在于，坏苦关注的是表象，行苦则更注重本质，讨论事物为何变化。<p><img src="https://cdn.nlark.com/yuque/0/2025/png/35698483/1739718500487-7020552a-da6f-4e73-bbe3-f832c8b4797e.png"></p><h3 id="GZrFI">总结</h3>佛说，人一定会体验到一种普遍的感受，称为 苦。苦分为三种，一种是苦苦，我们即刻能够感受到的身心的痛苦。剩下是坏苦和行苦，不同于苦苦的单调苍白，坏苦是由于无常带来的一种感受，伴随着时间的沉淀。<p>这也就是为什么年轻人不是佛的受众，因为他们还没有足够的阅历。人经历了更多的岁月沧桑后，随着社会经验的增长，越容易被佛的哲理打动。</p><h2 id="kSVf4">渴与爱</h2>人生是苦海。这种看法是不是有点悲观啊？<p>确实，很悲观。不过，真相有时是残酷的，乔达摩·悉达多在菩提树下领悟到的生活真相就是如此残酷。可佛陀并不是要我们沉沦，而是为了教导人们以豁达的心态去面对。所以为了向人们解释，佛陀又提出了新的概念。</p><p>那我们接着探索：为什么我们会产生这种苦呢？</p><p>觉悟者说，是由于tanha使我们产生了苦。</p><blockquote><p>tanha</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/35698483/1739721254662-431fc80d-aec5-42b6-90b7-8fb54fba1dec.png"></p></blockquote><p>tanha在英文中用两个词语来解释：</p><ul><li>thirst 口渴，渴望 指的是想要做某件事，指的是某个欲望，比如我想要得到一部新的手机。</li><li>craving 渴望，特别想得到 这里与thirst不同的地方在于，这个词指的是你对某个欲望的执着，我们来看下面的例子</li></ul><p>你特别喜欢某个女生，可是她并没有多好看，也没有多聪明。你每每想到她，就会不自觉的想要见到她，可能她还时常对你冷暴力，数落你的不好。但你就是无可就要的想要和这个人在一起。虐你千百遍，你待她如初恋。无论如何都 **放不下 **她</p><p>这哪里是正常人能做出来的事情？所以这种感情也是 <strong>不理智的</strong> 。我们将其称为 爱。</p><p>tanha又如何使我们产生苦的呢？首先苦是有两种的，苦苦和坏苦。</p><p>我们来看苦苦怎么产生：</p><blockquote><p>我是个在大城市打工的青年，我想要住大house，想买一辆保时捷911，还想要有个漂亮的老婆，但是我得不到，怎么努力都得不到。所以我很痛苦。</p></blockquote><p>苦苦是在我有这个欲望的时候，就产生了吗？显然不是，因为每个人都会有这种欲望，但是有的人就不会痛苦。</p><p>所以我们来分析一下这个过程，我，作为一个主体，产生了想要大house的欲望。是这个欲望攻击我，使我痛苦的吗？也不是，一个愿望，怎么攻击你的精神呢？再说，有的人甚至能以此为动力。接下来，我对这个欲望开始执着，日思夜想，得不到它我浑身难受。我对这个欲望施加了主观的执着，这个时候，苦苦就产生了。</p><p>我，将我的身心置于了一种【一直不可得】的状态，是我折磨着我自己。</p><p>再来看看坏苦是怎么产生的：</p><blockquote><p>我谈了8年的男女朋友，跟我分手了。虽然分手，但是我还是忘不掉ta，每天我都会将我们之前做过的事情想一遍，复现某些场景，做饭也做两人份的。哎，人生若只如初见，该多好啊？当初我们刚在一起的时候那么甜蜜，每天黏在一起，海誓山盟，说以后谁也不许说分手。</p></blockquote><h2 id="BDl9B">四圣谛</h2>苦、集、灭、道。]]></content>
      
      
      
        <tags>
            
            <tag> 自我成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么做读书笔记</title>
      <link href="/2025/02/01/selfDev/%E6%80%8E%E4%B9%88%E5%81%9A%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/01/selfDev/%E6%80%8E%E4%B9%88%E5%81%9A%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="VlVVe">三重阅读法</h2>简单来说就是三个流程：通读 -> 重读 -> 标记<p>第一遍，我们把觉得有感触的部分标记一下，在你读完整本书后，重新阅读一遍这个段落。</p><p>第二遍，如果仍然觉得这部分很好，就再次标记。</p><p>第三遍，把这个段落中重要的句子标记起来，针对这些句子做笔记</p><p>方法来自这篇文章</p><p><a href="https://sspai.com/post/46117">如何将读书过程「体验化」——《如何有效阅读一本书：超实用读书笔记法》读书笔记 - 少数派</a></p><p>看看这个</p><p><a href="https://steemit.com/blog/@xierdear/3tmwdh">超实用读书笔记法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 自我成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建自己的知识体系</title>
      <link href="/2025/02/01/selfDev/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
      <url>/2025/02/01/selfDev/%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>:::success<br>还在装修中。进度：70%</p><p>需要继续完善的内容：</p><ul><li><input disabled="" type="checkbox"> 怎么洞悉新事物的关键点？</li><li><input disabled="" type="checkbox"> 如何记笔记？</li><li><input disabled="" type="checkbox"> 知识如何记忆更高效？</li></ul><p>:::</p><p>学习分为四个阶段：输入、内化、沉淀、输出。</p><p>输入的时候需要碎片化，因为信息本身是碎片的，时间也是碎片的。</p><p>但是，需要体系化的沉淀。</p><p>如何实现呢？</p><p>综合起来，就是三个步骤，定目标，搭体系，填内容</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35698483/1721227253942-1ea41883-d056-4f37-96e3-d1b8825bffca.jpeg" alt="画板"></p><h2 id="hyeWX">确定工作目标</h2>> 定目标的价值本身，不在于目标是对是错，而在于有了目标后，就有了明确的边界和方向。><p>一定要明确自己想要达成什么目的，想要完成什么事？竞争到某个机会？</p><h2 id="kuL0Q">搭建知识体系</h2><h3 id="FG87e">能力树</h3>建立知识体系要先有目标，再有框架。这两件事合起来就是构建**能力树**<blockquote><p>能力树就是我们做的每一件事情，都会收到四种不同层次因素的影响。这四种层次都是存在于我们人身上的，分别是<strong>技能、知识、能力和素质</strong></p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35698483/1721227810860-6fc8ffb8-d01f-486a-8e41-7e4a8fa3aa0c.jpeg" alt="画板"></p><h3 id="pCK8d">把能力树变成知识体系目录</h3>根据你的目标，按照四个层次，构建能力树。将它变成一个知识体系目录<ul><li>能力：就是元认知能力。学习、沟通、表达、领导等能力</li><li>素质：<ul><li>先天：颜值、智力、性格</li><li>后天：意愿、态度、习惯</li></ul></li></ul><p>比如，一个开发人员要具备的能力树：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35698483/1721229076304-6a182747-437a-4b2e-9c46-99a8d8ca9e74.jpeg" alt="画板"></p><p>现在我们将其转化为知识体系目录，注意，这里仅仅只是目录：</p><p>知识体系中的知识，可以有两个非常明显的分类。</p><ul><li>可迁移部分：不论做什么都能用到</li><li>专业部分：<ul><li>专业技能 编程语言、框架</li><li>行业知识 项目管理、行业特性、业务流程</li><li>领域知识 最前沿的技术、新的概念</li></ul></li></ul><p>:::danger<br>行业与领域的区别</p><p>行业：行业是指其按生产同类产品或具有相同工艺过程或提供同类劳动服务划分的企业或组织群体的集合，如食品行业、服装行业、机械行业等。</p><p>领域：指意识形态或社会活动的范围，如思想领域、学术领域、生活领域、科学领域。</p><p>:::</p><h3 id="yNSg3">沉淀技能、知识、能力和素质</h3>刚刚我们已经有了目录，现在要做的就是往里面填充内容<h2 id="z9qdi">运用体系沉淀</h2>利用碎片化的学习，把知识内化为技能。这里，靠的是**应用和重复**]]></content>
      
      
      
        <tags>
            
            <tag> 自我成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/12/26/code/Java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/26/code/Java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式类型"><a href="#Java设计模式类型" class="headerlink" title="Java设计模式类型"></a>Java设计模式类型</h1><p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型 模式和行为型模式 3 种。</p><ul><li>创建型模式： 用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使 用分离”。提供了单例、原型、工厂方法、抽象工厂、建造者 5 种创建型模式。</li><li>结构型模式： 用于描述如何将类或对象按某种布局组成更大的结构，提供了代理、 适配器、桥接、装饰、外观、享元、组合 7 种结构型模式。</li><li>行为型模式： 用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独 完成的任务，以及怎样分配职责。提供了模板方法、策略、命令、职责链、状态、 观察者、中介者、迭代器、访问者、备忘录、解释器 11 种行为型模式。</li></ul><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p>某个类只能生成一个实例，该类提供了一个全局 访问点供外部获取该实例，其拓展是有限多例模式。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>单例类：包含一个实例且能自行创建这个实例的类。<br>访问类：使用单例的类。其结构如图所示：</p><p><img src="https://s2.loli.net/2023/03/13/gtXmlB4p9PdCGe8.jpg" alt="单例模式"></p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>该模式的特点是类加载时没有生成单例，只有当第一次调用<code>getlnstance</code>方法时才去创建这个单例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//静态化实例对象，但不创建</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//锁定构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被创建了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//开放获取实例方法，线程安全</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">LazySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p><strong>是否 Lazy 初始化：</strong>否</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>易</p><p><strong>描述：</strong>这种方式比较常用，但容易产生垃圾对象。</p><ul><li>优点：没有加锁，执行效率会提高。</li><li>缺点：类加载时就初始化，浪费内存。</li></ul><p>它基于<code>classloader</code>机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用<code>getInstance</code>方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 <code>lazy loading</code>的效果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token punctuation">&#123;</span><span class="token comment">//提前创建好</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//锁定构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被创建了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//kai'f</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HungrySingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工厂模式（Factory-Pattern）"><a href="#工厂模式（Factory-Pattern）" class="headerlink" title="工厂模式（Factory Pattern）"></a>工厂模式（Factory Pattern）</h2><p>工厂模式的定义：定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到工厂类当中。</p><p>这满足创建型模式中所要求的“创建与使用相分离”的特点。<br>按实际业务场景划分，工厂模式有 2 种不同的实现方式，分别是简单工厂模式、 抽象工厂模式。</p><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>我们把创建的对象称为“产品”，把创建产品的对象为“工厂”。如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”。在简单工厂模式中创建实例的方法通常为静态（static）方法，因此简单工厂模式（Simple Factory Pattern） 又叫作静态工厂方法模式（Static Factory Method Pattern）。</p><p><img src="https://s2.loli.net/2023/03/13/hTot7iGbgEkYvBH.jpg" alt="AB6B814A-0B09-4863-93D6-1E22D6B07FF8"></p><p>简单工厂模式的主要角色如下：</p><ul><li>简单工厂（SimpleFactory）： 是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类的创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li><li>抽象产品（Product）： 是简单工厂创建的所有对象的父类，负责描述所有实例共有的公共接口。</li><li>具体产品（ConcreteProduct）： 是简单工厂模式的创建目标。</li></ul><p>实现：</p><ol><li><p>抽象产品，是工厂所有商品的父类</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>子类商品</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是B啊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是C啊！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>工厂类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">A</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> shapeType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shapeType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">A</span> b <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是B啊！</span>    <span class="token class-name">A</span> c <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是C啊！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><p><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p><strong>如何解决：</strong>在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong>在一个工厂里聚合多个同类产品。</p><p><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服吧，比如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些也都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的，要不然，没法进入共产主义了，但有利于说明抽象工厂模式），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一系列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OOP 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。</p><p><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><p><strong>使用场景：</strong> </p><ol><li>QQ 换皮肤，一整套一起换。</li><li>生成不同操作系统的程序。</li></ol><p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p><p>实现：</p><p>我们将创建 <em>Shape</em> 和 <em>Color</em> 接口和实现这些接口的实体类。下一步是创建抽象工厂类 <code>AbstractFactory</code>。接着定义工厂类<code>ShapeFactory</code> 和 <code>ColorFactory</code>，这两个工厂类都是扩展了 <code>AbstractFactory</code>。然后创建一个工厂创造器&#x2F;生成器类 <code>FactoryProducer</code>。</p><p><code>AbstractFactoryPatternDemo</code> 类使用 <code>FactoryProducer</code>来获取 <code>AbstractFactory</code> 对象。它将向 <code>AbstractFactory</code>传递形状信息 <code>Shape（CIRCLE / RECTANGLE / SQUARE）</code>，以便获取它所需对象的类型。同时它还向 <code>AbstractFactory</code> 传递颜色信息 <code>Color（RED / GREEN / BLUE）</code>，以便获取它所需对象的类型。</p><p><img src="https://s2.loli.net/2023/03/13/dJMcXGr789VShKI.jpg" alt="抽象工厂"></p><ol><li><p>为形状、颜色分别创建一个接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建实现接口的实体类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是圆形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是三角"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blue</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是蓝色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Red</span> <span class="token keyword">implements</span> <span class="token class-name">Color</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是红色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为 Color 和 Shape 对象创建抽象类来获取工厂。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shape<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Color</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建扩展了<code>AbstractFactory</code>的工厂类，基于给定的信息生成实体类的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Color</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColorFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Shape</span> <span class="token function">getShape</span><span class="token punctuation">(</span><span class="token class-name">String</span> shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Color</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一个工厂创造器&#x2F;生成器类，通过传递形状或颜色信息来获取工厂。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AbstractFactory</span> colorFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Color</span> blue <span class="token operator">=</span> colorFactory<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blue<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">AbstractFactory</span> shapeFactory <span class="token operator">=</span> <span class="token class-name">FactoryProducer</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">"shape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Shape</span> rectangle <span class="token operator">=</span> shapeFactory<span class="token punctuation">.</span><span class="token function">getShape</span><span class="token punctuation">(</span><span class="token string">"rectangle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rectangle<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><p><strong>何时使用：</strong>想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong>增加中间层。</p><p><strong>关键代码：</strong>实现与被代理类组合。</p><p><strong>应用实例：</strong> </p><ol><li>猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。</li><li>买火车票不一定在火车站买，也可以去代售点。</li><li>一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。</li><li>spring aop。</li></ol><p><strong>优点：</strong></p><ul><li>职责清晰</li><li>高扩展性</li><li>智能化。</li></ul><p><strong>缺点：</strong> </p><ol><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ol><p><strong>使用场景：</strong>按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。 4、保护（Protect or Access）代理。 5、Cache代理。 6、防火墙（Firewall）代理。 7、同步化（Synchronization）代理。 8、智能引用（Smart Reference）代理。</p><p><strong>注意事项：</strong> </p><ul><li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</li><li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ul><p>实现：</p><p>我们将创建一个 <em>Image</em> 接口和实现了 <em>Image</em> 接口的实体类。<em>ProxyImage</em> 是一个代理类，减少 <em>RealImage</em> 对象加载的内存占用。</p><p><em>ProxyPatternDemo</em> 类使用 <em>ProxyImage</em> 来获取要加载的 <em>Image</em> 对象，并按照需求进行显示。</p><p><img src="https://s2.loli.net/2023/03/13/OZowPsAQyYIk8Gc.png" alt="image-20230313164532449"></p><ol><li><p>创建一个接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Image</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建实现接口的实体类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealImage</span> <span class="token keyword">implements</span> <span class="token class-name">Image</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> filename<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RealImage</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filename <span class="token operator">=</span> filename<span class="token punctuation">;</span>        <span class="token function">loadFromDisk</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Displaying:"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadFromDisk</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"loading:"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当被请求时，使用 <em>ProxyImage</em> 来获取 <em>RealImage</em> 类的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyImage</span> <span class="token keyword">implements</span> <span class="token class-name">Image</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">RealImage</span> realImage<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> filename<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyImage</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filename<span class="token operator">=</span>filename<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>realImage <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            realImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealImage</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        realImage<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用时直接使用代理对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Image</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyImage</span><span class="token punctuation">(</span><span class="token string">"test_10mb.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------一旦有了代理之后，就无需再次加载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#输出</span>loading:test_10mb.jpgDisplaying:test_10mb.jpg--------一旦有了代理之后，就无需再次加载Displaying:test_10mb.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式&#x2F;模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>何时使用：</strong>有一些通用的方法。</p><p><strong>如何解决：</strong>将这些通用算法抽象出来。</p><p><strong>关键代码：</strong>在抽象类实现，其他步骤在子类实现。</p><p><strong>应用实例：</strong> 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p><p><strong>优点：</strong> 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p><p><strong>缺点：</strong>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p><strong>使用场景：</strong> 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p><p><strong>注意事项：</strong>为防止恶意操作，一般模板方法都加上 final 关键词。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象类的应用：模板方法的设计模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">BankTemplateMethod</span> btm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要取钱就用取钱类</span>btm<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BankTemplateMethod</span> btm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManageMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要理财就用理财类</span>btm2<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token comment">// 具体方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取号排队"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 办理具体的业务 //钩子方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反馈评分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要取款！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ManageMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要理财！我这里有2000万美元!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>乱码问题总结</title>
      <link href="/2023/10/22/code/%E5%B8%B8%E8%A7%81%E6%A3%98%E6%89%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/22/code/%E5%B8%B8%E8%A7%81%E6%A3%98%E6%89%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="乱码问题总结"><a href="#乱码问题总结" class="headerlink" title="乱码问题总结"></a>乱码问题总结</h1><h4 id="服务器返回JSON乱码问题"><a href="#服务器返回JSON乱码问题" class="headerlink" title="服务器返回JSON乱码问题"></a>服务器返回JSON乱码问题</h4><p>解决乱码问题，首先通过过滤器解决</p><p>在<code>web.xml</code>中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2023/02/18/Kucg4U95lZXszwH.png" alt="key-value形式" style="zoom:50%;" /><h2 id="页面字符解析乱码"><a href="#页面字符解析乱码" class="headerlink" title="页面字符解析乱码"></a>页面字符解析乱码</h2><p>浏览器访问网页时，解析出<code>????????????????</code></p><p>在<code>@GetMapping</code>中添加produces参数，这里的作用只是页面显示时需要告诉浏览器如何解析，并不包含参数本身的字符编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/unauthorized"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">unauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"你没有访问这个页面的权限！请联系你的管理员来获取权限。"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git移除敏感信息</title>
      <link href="/2023/10/14/code/%E5%B8%B8%E8%A7%81%E6%A3%98%E6%89%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/gitRemovePass/"/>
      <url>/2023/10/14/code/%E5%B8%B8%E8%A7%81%E6%A3%98%E6%89%8B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/gitRemovePass/</url>
      
        <content type="html"><![CDATA[<p>git如果不小心上传了用户名密码怎么办？</p><p>最简单的办法当然是直接删除仓库，但是如果我们这个仓库很重要呢，这时候就可以用到bfg repo这个工具，官网：<a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo</a></p><p>先去官网上把文件下载下来，放在文件夹中</p><p>在同一个文件夹中把你的仓库clone下来，注意要用<code>--mirror</code>命令，这个命令会把仓库完整复制下来，但是并不是对源文件的一一复现，你可以理解为复制的是git元数据</p><p><code>git clone --mirror [gitAddress].git</code></p><p>然后执行命令，对源文件进行覆盖</p><p>我要覆盖的是我误填的密码，所以把密码填在文件中，如果有多个要覆盖的密码，一行写一个。</p><p>&#x3D;&#x3D;关于其他的命令可以直接看官网的介绍，更详细，但是只有英文版，可以翻译，用gpt可以更准一点。&#x3D;&#x3D;</p><p><code>java -jar .\bfg-1.14.0.jar --replace-text .\password.txt SpringCloudLearning.git</code></p><p>替换完之后，进入修改好的仓库，注意此时会生成一个新的report文件夹，不要进入那个文件夹，</p><p>进入后分别执行这两条命令</p><p><code>git reflog expire --expire=now --all</code></p><p><code>git gc --prune=now --aggressive</code></p><p>执行后直接<code>git push</code>即可，然后就可以看到git记录中的密码都被覆盖修改了</p><p><img src="https://s2.loli.net/2023/10/14/i6jYnZe1rJcAHhb.png" alt="image-20231014185820749"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/07/29/code/Java/spring/SpringSecurity%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/29/code/Java/spring/SpringSecurity%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><p>一个重量级的安全管理框架：</p><ul><li>配置繁琐</li><li>概念繁琐</li></ul><p>优势：</p><ul><li>安全</li></ul><p>在 SSM 里，因为配置繁琐，所以 Spring Security 使用较少。但是，Spring Boot 中为 Spring Security 做了自动化配置，所在 Boot 中，security 使用非常多。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>导入依赖即可开启工程</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写一个controller，springsecurity会自动帮我们屏蔽掉所有未授权的访问，必须先登陆。</p><p>你可以在配置文件中手动配置一个临时密码</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">security</span><span class="token punctuation">:</span>    <span class="token key atrule">user</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> hengxing      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动项目即可，访问任何界面都会被拦截</p><img src="https://s2.loli.net/2023/03/04/IWOjc9tDCZmbroi.png" alt="用户登录界面" style="zoom:50%;" /><h3 id="数据库中查询用户数据"><a href="#数据库中查询用户数据" class="headerlink" title="数据库中查询用户数据"></a>数据库中查询用户数据</h3><p>定义用户对象，需要实现 UserDetails 接口，对于 Spring Security 框架而言，所有的用户对象都是一个 UserDetails 的实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>security02<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token comment">/** * 定义用户对象，需要实现 UserDetails 接口，对于 Spring Security 框架而言，所有的用户对象都是一个 UserDetails 的实例 * * 如实实现接口中的方法就可以了 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 这个方法用来返回当前用户的角色/权限信息     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取用户密码     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取用户名     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 账户是否没有过期     *     * 正常来说，数据库中应该也有一个描述账户是否过期的字段     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 账户是否没有被锁定     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 密码是否没有过期     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 账户是否可用     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> enabled<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="caution"><a href="#caution" class="headerlink" title="caution"></a>caution</h3><p>注意：idea自动生成<code>getEnabled()</code>方法是多余的，把它删掉，如果你保留它，spring在反射时会认为有两个get方法（与<code>isEnabled()</code>方法冲突），并报错。</p></blockquote><p><code>Invalid bound statement (not found): xxx.UserMapper.loadUserByUsername</code></p><p>这种情况是没有检测到mapper实现类</p><ul><li><p>检查mapper抽象类</p></li><li><p>检查mapper实现类内的名称和<code>namespace</code></p></li><li><p>检查静态资源打包配置，务必将mapper包中的xml文件打包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s2.loli.net/2023/03/05/FGvbtyN5xLaCfuD.png" alt="image-20230305151912205"></p><p><img src="https://s2.loli.net/2023/03/05/HAS6xh2OIKfXs3e.png" alt="image-20230305151847487"></p><h2 id="RememberMe"><a href="#RememberMe" class="headerlink" title="RememberMe"></a>RememberMe</h2><p>开启 RememberMe 之后，登录成功后，服务端会响应一个 rm 字符串回来：<code>emhhbmdzYW46MTY1OTQwMzM3NzE0ODowNjczYzdlYWFlNjE5MWU1YzY1MDYyOWRhMWUwZWQ5Zg</code> ，这是一个 base64 编码之后的字符串，解码之后，分为三部分：</p><ul><li>用户名</li><li>时间戳</li><li>加密的字符串（根据用户名+用户密码+时间戳+key加密生成的字符串，不可解密）</li></ul><p>以后每次请求的时候，都会自动携带上这个 Cookie，服务端收到 Cookie 之后，会解析出来用户名和时间戳，通过时间戳就能判断出 Cookie 是否已经过期，没有过期的话，根据用户名查询出用户密码，然后根据和用户名、用户密码、时间戳、key 进行加密，将加密后的字符串跟 Cookie 中的第三部分进行比较。</p><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><p>在服务端，Spring Security 维护了一个会话注册表，所有登录上来的用户，都会注册到这个会注册表中，所谓的会话注册表，本质上是一个 Map 集合，Map 的 key 是当前用户对象，Map 的 value 是一个集合，这个集合中保存着这个用户的所有会话。<code>Map&lt;User,List&lt;Session&gt;&gt;</code>。</p><p>当用户注销登录的时候，用户的 session 会被自动销毁，但是 Map 中的 List 集合中的 session 并不会自动移除。所以，应当在用户注销登录的时候，将 List 集合中，和用户对应的会话移除掉。</p><h2 id="获取登录用户信息"><a href="#获取登录用户信息" class="headerlink" title="获取登录用户信息"></a>获取登录用户信息</h2><p>首先，服务端一定是将用户信息存到 HttpSession。</p><ol><li>首先前端发起一个登录请求，这个请求会经过 Spring Security 一系列的过滤器，SecurityContextPersistenceFilter 过滤器中，主要用来处理当前用户信息。当用户登录成功之后，会自动将用户信息存入到 SecurityContextHolder 中，SecurityContextHolder 的底层，就是 ThreadLocal。</li><li>在登录请求处理完毕后，响应数据给前端的时候，也会经过 SecurityContextPersistenceFilter 过滤器，此时，系统会自动将刚刚登录成功的用户信息从 SecurityContextHolder 中取出来存入到 HttpSession 中。</li><li>下一次请求来的时候，还是会经过 SecurityContextPersistenceFilter 过滤器，此时系统会自动从 HttpSession 中读取出当前登录成功的用户信息，并将之存入到 SecurityContextHolder 。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>视频监控系统的组成</title>
      <link href="/2023/07/15/dailyLife/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/"/>
      <url>/2023/07/15/dailyLife/%E8%A7%86%E9%A2%91%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="视频监控系统的组成"><a href="#视频监控系统的组成" class="headerlink" title="视频监控系统的组成"></a>视频监控系统的组成</h1><p>五个部分</p><ul><li><p>音视频采集系统</p><ul><li>2.1 2.2 成像及编解码技术</li></ul></li><li><p>传输系统</p></li><li><p>控制系统</p></li><li><p>存储系统</p><ul><li>阵列、NAS</li></ul></li><li><p>显示系统</p></li></ul><h1 id="视频监控基础"><a href="#视频监控基础" class="headerlink" title="视频监控基础"></a>视频监控基础</h1><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><ol><li>掌握成像基础知识</li><li>了解视频监控系统中的编解码、传输、存储、管理常见的协议及技术</li><li>了解视频监控系统中智能技术的应用</li></ol><h2 id="第一节-成像技术基础"><a href="#第一节-成像技术基础" class="headerlink" title="第一节 成像技术基础"></a>第一节 成像技术基础</h2><h3 id="镜头选择"><a href="#镜头选择" class="headerlink" title="镜头选择"></a>镜头选择</h3><p>摄像头就是一个摄像机，摄像机重要的是镜头，如何选择？</p><ol><li>先看摄像机和镜头匹配</li></ol><table><thead><tr><th align="center">类型\匹配</th><th align="center">CS摄像机</th><th align="center">C型摄像机</th><th align="center">至传感器距离</th></tr></thead><tbody><tr><td align="center">CS镜头</td><td align="center">√</td><td align="center">×</td><td align="center">12.55mm</td></tr><tr><td align="center">C镜头</td><td align="center">√<br />需加CS-C接口适配器</td><td align="center">√</td><td align="center">17.5mm</td></tr></tbody></table><p>镜头</p><p><img src="https://s2.loli.net/2023/03/06/oxhRT7jPNeMD4Ws.png" alt="image-20230306202654852"></p><ol start="2"><li>再看sensor（传感器）</li></ol><p>选择时的原则</p><p>&#x3D;&#x3D;镜头尺寸&gt;&#x3D;sensor尺寸&#x3D;&#x3D;</p><p>下图中圆型是镜头，方形是sensor</p><img src="https://s2.loli.net/2023/03/06/FzYrP6domMbSEtU.png" alt="image-20230306203153335" style="zoom:50%;" /><ol start="3"><li>焦距</li></ol><img src="https://s2.loli.net/2023/03/06/YPiTjwSlvQ1ngVL.png" alt="image-20230306204019958" style="zoom:50%;" /><blockquote><p>焦距越小，视野越广，是广角镜头；焦距越大，视野越小，是远摄镜头</p></blockquote><p>镜头选择公式：</p><blockquote><p>F &#x3D; W D &#x2F; M</p><p>F：镜头焦距</p><p>W：CCD靶面宽度</p><p>D：被摄物与镜头的距离</p><p>M：需要拍摄的宽度</p><p>附上CCD靶面规格尺寸</p><p><img src="https://s2.loli.net/2023/03/06/RCXzKwOptuUnNx9.png" alt="image-20230306205203793"></p></blockquote><ol start="4"><li><p>夜视能力</p><p>日间镜头在夜间会出现失焦，需要重新调焦</p><p>采用特别设计的光学镜片令纵向色差减到最低，让24小时监控工作带来&#x3D;&#x3D;不需要二次调焦&#x3D;&#x3D;的方便</p><p>请采用夜间镜头</p></li><li><p>景深</p><p>就是摄像机能够清晰成像的范围</p><p>请保证&#x3D;&#x3D;监视区域在景深范围内&#x3D;&#x3D;</p><p>一般来说，焦距越小景深值越大，反之景深越小。</p><img src="https://s2.loli.net/2023/03/06/FM3mjGQrUOY64Po.png" alt="image-20230306205748538" style="zoom:67%;" /></li><li><p>照度</p><p>指物体被照亮的程度，光照强度。单位勒克斯（Lux，lx）</p><blockquote><h3 id="caution"><a href="#caution" class="headerlink" title="caution"></a>caution</h3><p>注意与流明区分，流明是亮度，指反射到人眼所能看到的亮度。</p></blockquote></li><li><p>对比度</p><p>对比度是一幅图像中明暗区域最亮和最暗的层级差异，差异越大对比度越大。</p><blockquote><p>提高对比度可以看到更多细节。但不是越高越好，过高可能反而会丢失细节。</p><p>并没有客观的确定最佳对比度的方法，只能通过&#x3D;&#x3D;人眼来分别&#x3D;&#x3D;</p></blockquote></li><li><p>饱和度</p><p>色彩的鲜艳程度，有颜色的部分对比灰色的部分</p><p>黑白照片饱和度最低，越鲜艳越高。只能通过&#x3D;&#x3D;人眼来分别&#x3D;&#x3D;</p></li><li><p>锐度</p><p>图像边缘的对比度。高锐度图像由于图像边缘对比度高，棱角分明，看起更清晰。但过高锐度会导致失真。只能通过&#x3D;&#x3D;人眼来分别&#x3D;&#x3D;</p></li><li><p>白平衡</p><p>白色的平衡。</p><p>摄像机针对不同色温，通过内部色彩电路使拍摄出的影像抵消偏色。更接近人眼视觉习惯。差的白平衡会导致&#x3D;&#x3D;色彩偏红、偏蓝&#x3D;&#x3D;</p></li><li><p>快门、光圈</p><p>快门-&gt;摄像机感光时间。快门越长，感光时间越长。</p><p>光圈-&gt;控制镜头进入机身内部感光面的光量。光圈大小我们用F值表示。F值越大，光圈越大，进光量越多</p></li><li><p>背光补偿</p><p>也称逆光补偿。以中间区域的亮度为基础，把画面分成几个部分，每个部分分别曝光。可以有效解决逆光环境拍摄主体，主体黑暗（看不清）的缺陷。</p><p>假如人物不在中心区域，依然会存在缺陷。为了解决这个问题，出现了宽动态。</p></li><li><p>宽动态</p><p>对明暗部分分别曝光</p></li><li><p>扫描、场、帧</p><p><img src="https://s2.loli.net/2023/03/06/8WgAhrDFsnl2byo.png" alt="image-20230306213602492"></p></li></ol><p>逐行扫描，一帧一场</p><p>隔行扫描中，一帧两场，合并基数场和偶数场。</p><ol start="15"><li><p>图像分辨率</p><p>画面的解析度，即图像由多少像素组成</p><p>分辨率越大越清晰。</p><ul><li><p>视频制式</p><ul><li>PAL</li><li>NTSC</li></ul><blockquote><h3 id="caution-1"><a href="#caution-1" class="headerlink" title="caution"></a>caution</h3><p>摄像机的制式必须与编解码器的制式相同。</p><p>如果制式不同，会出现图像颠倒，图像被分割等现象。</p></blockquote></li></ul></li><li><p>码率 </p><p>单位时间内，数据传输的数据位数，一般用kbps。</p><p>有两种码率模式</p><ul><li><p>CBR 恒定比率</p><p>比率在单位时间内（通常1s）不发生变化，&#x3D;&#x3D;适合流式传输&#x3D;&#x3D;</p><blockquote><p>宇视科技的CBR误差大概在1.85-2.16mbps内波动</p></blockquote></li><li><p>VBR 可变比率</p><p>图像复杂时，提高视频的比率以提高图像质量。&#x3D;&#x3D;适合本地存储&#x3D;&#x3D;</p></li></ul></li></ol><h2 id="第二节-视频编解码技术"><a href="#第二节-视频编解码技术" class="headerlink" title="第二节 视频编解码技术"></a>第二节 视频编解码技术</h2><p>主要是两个组织发布的技术：国际电信联盟ITU、ISO国际标准化组织<img src="/../AppData/Roaming/Typora/typora-user-images/image-20230306221758308.png" alt="image-20230306221758308"></p><h3 id="视频、图像编解码"><a href="#视频、图像编解码" class="headerlink" title="视频、图像编解码"></a>视频、图像编解码</h3><h4 id="H-264"><a href="#H-264" class="headerlink" title="H.264"></a>H.264</h4><p>联合视频组（JVT）开发，特点：</p><ul><li>低码率</li><li>高质量–DVD质量</li><li>容错能力强–解决丢包</li><li>网络适应性强–提供网络抽象层</li></ul><h4 id="MPEG"><a href="#MPEG" class="headerlink" title="MPEG"></a>MPEG</h4><p>针对低带宽设计，使得低码率传输成为可能。</p><h4 id="JPEG"><a href="#JPEG" class="headerlink" title="JPEG"></a>JPEG</h4><p>第一个国际图像压缩标准。有损压缩，图像不至于失真的同时，体积小。</p><h3 id="音频编解码"><a href="#音频编解码" class="headerlink" title="音频编解码"></a>音频编解码</h3><img src="https://s2.loli.net/2023/03/06/8zmqDS342bnrAeG.png" alt="image-20230306224312530" style="zoom:50%;" /><p>一般在视频监控中使用G.711和AAC，质量好。</p><h2 id="第三节-存储技术"><a href="#第三节-存储技术" class="headerlink" title="第三节 存储技术"></a>第三节 存储技术</h2><h3 id="IP-SAN存储架构"><a href="#IP-SAN存储架构" class="headerlink" title="IP SAN存储架构"></a>IP SAN存储架构</h3><p>IP SAN（IP Storage Area Network，存储局域网）</p><ul><li>将存储系统、服务器和客户端都通过网络相互连接</li><li>以网络为中心</li><li>基于以太网搭建存储架构</li></ul><p>优点：</p><ul><li>设备整合</li><li>性能优越</li><li>数据集中，易管理</li><li>高扩展性和高可用性</li><li>适用于存储量大的块级应用</li></ul><h3 id="NAS存储架构"><a href="#NAS存储架构" class="headerlink" title="NAS存储架构"></a>NAS存储架构</h3><p>NAS（Network Attached Storage，网络附属存储）</p><p>优点：</p><ul><li>不占用应用服务器资源</li><li>广泛支持操作系统及应用</li><li>扩展较容易</li><li>即插即用，安装简单方便</li></ul><p>缺点：</p><ul><li>相比SAN架构，存取速度慢</li><li>不适合存储量大的块级应用</li><li>数据备份及恢复占用网络带宽</li></ul><p>主要区别：</p><ol><li>NAS与公司内部业务系统共用一套网络，占用带宽</li><li>提供文件访问的支持，必须使用文件系统，相较于IP SAN块级存储在性能上较差</li><li>稳定性差。NAS的稳定性依赖文件系统的稳定。</li></ol><h3 id="iSCSI技术"><a href="#iSCSI技术" class="headerlink" title="iSCSI技术"></a>iSCSI技术</h3><p><code>iSCSl</code>:Internet小型计算机系统接口（<code>Internet Small Computer System Interface）</code><br>iSCSl是一种基于TCP&#x2F;IP的协议，用来建立和管理P存储设备、主机和客户机等之间的互相连接，并创建存储区域网络（SAN）</p><p>技术优势：</p><ul><li>硬件成本低</li><li>操作简单，维护方便</li><li>扩充性强</li><li>带宽和性能不断提升</li></ul><h3 id="SAS接口"><a href="#SAS接口" class="headerlink" title="SAS接口"></a>SAS接口</h3><p>SAS是新一代的SCSI技术，和现在流行的SerialATA（SATA）硬盘相同，都是采用串行技术以获得更高的传输速度，并通过缩短连结线改善内部空间</p><p>SAS是并行SCSI接口之后开发出的全新接口，改善存储系统的效能、可用性和扩充性，提供与串行ATA（SerialATA，缩写为SATA）硬盘的兼容性。</p><p>技术优势</p><ul><li>降低了磁盘阵列的成本</li><li>串行接口让传输性能提高</li><li>更好的扩展性与兼容性</li><li>安装简单</li></ul><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>RAID（RedundantArray of Independent Disks，独立冗余磁盘阵列）：将多个独立的物理硬盘按照不同的方式组合起来，形成一个虚拟的硬盘</p><p>组成RAID阵列的不同方式称为RAID级别，不同的RAID级别：</p><ul><li>不同的存储性能</li><li>不同的数据可靠性</li><li>不同的存储成本</li></ul><table><thead><tr><th align="center">阵列</th><th>特点</th></tr></thead><tbody><tr><td align="center">RAID 0</td><td>数据条带化，无校验</td></tr><tr><td align="center">RAID 1</td><td>数据镜像，无校验</td></tr><tr><td align="center">RAID 5</td><td>数据条带化，校验信息分布式存放</td></tr><tr><td align="center">RAID 6</td><td>数据条带化，校验信息分布式存放，允许损坏2块硬盘</td></tr><tr><td align="center">RAID 10</td><td>RAIDO和RAID1的结合，同时提供数据条带化和镜像</td></tr><tr><td align="center">RAID 50</td><td>先做RAID5，后做RAID0，能有效提高RAID5的性能</td></tr></tbody></table><ol><li><p>RAID 0</p><img src="https://s2.loli.net/2023/03/07/drm3l4X6zKPLQJV.png" alt="image-20230307100700878" style="zoom:67%;" /><p>数据以条带形式均匀分布，&#x3D;&#x3D;数据不安全&#x3D;&#x3D;一旦磁盘损坏，全部阵列都不可读取。</p><p>但&#x3D;&#x3D;读写速度快&#x3D;&#x3D;</p></li><li><p>RAID 1 镜像</p><p>同时读写到主硬盘和镜像</p><img src="https://s2.loli.net/2023/03/07/Wnj8LQUIkdYlGsB.png" alt="image-20230307101623425" style="zoom:67%;" /><p>读性能可以并发，写性能无优势。&#x3D;&#x3D;成本高&#x3D;&#x3D;，只有一半的有效空间存储</p></li><li><p>RAID 5 奇偶校验</p><img src="https://s2.loli.net/2023/03/07/h35b2yZGnRitaA1.png" alt="image-20230307110800373" style="zoom: 50%;" /><p>读性能好，可以并发。&#x3D;&#x3D;写性能差&#x3D;&#x3D;，需要进行奇偶校验运算。</p><p>&#x3D;&#x3D;N+1级数据保护&#x3D;&#x3D;，或可通过添加热备盘的方式升级为&#x3D;&#x3D;N+2&#x3D;&#x3D;，热备盘有两种：</p><ol><li>专用热备盘 Dedicated Spare -&gt; 只为某一个阵列服务。</li><li>全局热备盘 Global Spare -&gt; 同时为多个阵列服务</li></ol><blockquote><h5 id="N-1是允许一个磁盘出现问题，N-2是两个。提升的原理是什么？"><a href="#N-1是允许一个磁盘出现问题，N-2是两个。提升的原理是什么？" class="headerlink" title="N+1是允许一个磁盘出现问题，N+2是两个。提升的原理是什么？"></a>N+1是允许一个磁盘出现问题，N+2是两个。提升的原理是什么？</h5><ul><li>当RAID 5 阵列出现某个磁盘损坏，我们必须立即对数据进行回复，如果在恢复前，又有一个磁盘损坏，数据就丢失了。</li><li>当拥有全局热备的RAID 5 阵列出现某个磁盘损坏，热备盘会首先顶替坏掉的磁盘，根据奇偶校验，做一次数据恢复。恢复完成后，就是一个完整的RAID 5 阵列，此时允许再损坏一个磁盘。</li></ul></blockquote></li><li><p>RAID 6 </p><p>带有两个独立分布式校验方案</p><p>在RAID 5基础上加一位校验方案</p><ul><li>最少需要4块硬盘（两块做校验）</li><li>允许&#x3D;&#x3D;同时&#x3D;&#x3D;坏两块</li><li>&#x3D;&#x3D;写性能更差&#x3D;&#x3D;</li></ul></li><li><p>RAID 10</p><p>RAID 1 + RAID 0</p><p>利用RAID 1做读写的同时，用RAID 0做镜像备份。</p><img src="https://s2.loli.net/2023/03/07/tYlp1FUfCaIcXdk.png" alt="image-20230307130815041" style="zoom:67%;" /></li><li><p>RAID 50</p><p>由两组RAID 5组成（每组最少3个），两组组成RAID 0。&#x3D;&#x3D;最少需要6块硬盘&#x3D;&#x3D;</p><img src="https://s2.loli.net/2023/03/07/ecUo5vFStnBJX3M.png" alt="image-20230307131111101" style="zoom: 50%;" /></li></ol><h4 id="JBOD"><a href="#JBOD" class="headerlink" title="JBOD"></a>JBOD</h4><p>Just a Bunch Of Disks，磁盘簇。又称Span</p><p>在逻辑上把几个物理磁盘一个接一个串联到一起，从而提供一个大的逻辑磁盘。JBOD上的数据简单的从第一个磁盘开始存储，当第一个碳盘的存储空间用完后，再依次从后面的磁盘开始存储数据。</p><table><thead><tr><th></th><th align="center">可靠性</th><th align="center">控制器</th><th align="center">智能功能</th><th align="center">成本</th></tr></thead><tbody><tr><td>JBOD</td><td align="center">较低</td><td align="center">无</td><td align="center">无</td><td align="center">低</td></tr><tr><td>RAID</td><td align="center">较高</td><td align="center">有</td><td align="center">有</td><td align="center">高</td></tr></tbody></table><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><ol><li><p>组成RAID 5至少要几块硬盘？</p><p>3块。两块存储，一块奇偶校验。</p></li><li><p>12块2T磁盘组成RAID 5阵列，可用磁盘几块？</p><p>11块可用。正常RAID 5 是N+1的数据保护，一个用来做奇偶校验。</p></li><li><p>5块2T硬盘组成RAID6阵列，可用磁盘几块？</p><p>3块。两块做奇偶校验。</p></li></ol><h3 id="流媒体存储所需存储容量计算"><a href="#流媒体存储所需存储容量计算" class="headerlink" title="流媒体存储所需存储容量计算"></a>流媒体存储所需存储容量计算</h3><p>全网视频所需存储容量为各单路视频所需存储容量之和</p><ol><li>单路所需容量计算公式</li></ol><p>​容量（GB）&#x3D; 码率（Mbps）* 3600 * 存储计划时长（小时）* CBR系数 &#x2F; (8*1024)</p><p>​CBR系数为 1.08</p><p>​8*1024: 8是转换bit到MB，1024是换算MB到GB</p><ul><li><p>例子；</p></li><li><p>一路视频的码率为2Mbps，该视频每天存储时间为8:00-12:00，13:30-18:30，录像保留期为15天，求所需存储容量？</p><p>录像保留期内录像总时长：<code>9*15=135</code>小时</p><p>存储容量：<code>2*3600*135*1.08/(8*1024)=128.15</code>GB</p></li></ul><ol start="2"><li><p>存储设备有效容量计算公式</p><p>存储容量(GB) &#x3D; 有效磁盘数 * 单磁盘有效容量(GB)</p><ul><li><p>有效磁盘数</p><table><thead><tr><th>等级</th><th>有效磁盘</th></tr></thead><tbody><tr><td>JBOD</td><td>物理磁盘数（不计热备盘）</td></tr><tr><td>RAID 0</td><td>物理磁盘数（不计热备盘）</td></tr><tr><td>RAID 1</td><td>物理磁盘数 * 0.5（不计热备盘）</td></tr><tr><td>RAID 5</td><td>物理磁盘数 - 1（不计热备盘）</td></tr></tbody></table></li><li><p>单磁盘有效容量</p><table><thead><tr><th>磁盘类型</th><th>有效容量（GB）</th></tr></thead><tbody><tr><td>1TB SATA</td><td>931.5</td></tr><tr><td>2TB SATA</td><td>1863</td></tr><tr><td>3TB SATA</td><td>2794.5</td></tr></tbody></table></li></ul></li></ol><h2 id="第四节-常见协议"><a href="#第四节-常见协议" class="headerlink" title="第四节 常见协议"></a>第四节 常见协议</h2><h3 id="管理控制协议-SIP"><a href="#管理控制协议-SIP" class="headerlink" title="管理控制协议 SIP"></a>管理控制协议 SIP</h3><p>SIP（Session lnitiation Protocol，会话初始协议）是应用层的会话控制协议，用于创建、修改和释放一个或多个参与者参加的会话</p><p>SIP协议采用基于文本格式的客户&#x2F;服务器模式</p><p>SIP的基本功能包含</p><ul><li>用户定位</li><li>用户能力协商</li><li>用户可用性确定</li><li>会话建立</li><li>会话管理</li></ul><blockquote><h3 id="caution-2"><a href="#caution-2" class="headerlink" title="caution"></a>caution</h3><p>SDP是会话描述协议，用于为SIP、RTSP、HTTP等协议描述会话信息</p></blockquote><p>SIP消息</p><ul><li>分为Request消息和Response消息</li><li>Request消息通过Request-Line中method区分</li><li>Response消息通过Status-Line中的Status Code区分</li></ul><p>常用的SIP请求消息</p><ul><li>INVITE：表示主叫用户发起会话请求，邀请其他用户加入一个会话。<br>也可以用在呼叫建立后用于更新会话</li><li>ACK：客户端向服务器端证实它已经收到了对INVITE请求的最终响应</li><li>BYE：表示终止一个已经建立的呼叫</li><li>CANCEL：表示在收到对请求的最终响应之前取消该请求，对于已完成的请求则无影响</li><li>REGISTER：表示客户端向SIP服务器端注册列在To字段中的地址信息</li><li>OPTIONS：表示查询被叫的相关信息和功能</li></ul><p>常用SIP响应消息：</p><ul><li>100试呼叫（Trying）</li><li>180振铃（Ringing）</li><li>200成功响应（OK）</li><li>400错误请求（Bad Request）</li><li>401未授权（Unauthorized）</li><li>403禁止（Forbidden）</li><li>404用户不存在（NotFound）</li><li>408请求超时（Request Timeout）</li></ul><h3 id="管理控制协议-SNMP"><a href="#管理控制协议-SNMP" class="headerlink" title="管理控制协议 SNMP"></a>管理控制协议 SNMP</h3><p>SNMP（Simple Network Management Protocol，简单网络管理协议）是对网络进行管理的一个框架，它提供一组基本的操作来监视和维护网络</p><p>SNMP可以实现自动化管理并可以屏蔽不同设备的物理差异，实现对不同厂商产品的自动化管理.<br>SNMP包含SNMPV1、SNMPV2c和SNMPV3三个版本</p><ul><li>SNMP网络元素分为NMS和Agent两种<ul><li>NMS（Network Management Station，网络管理站）</li><li>Agent是驻留在设备上的一个进程，负责接收、处理来自NMS的请求报文</li><li><img src="/../AppData/Roaming/Typora/typora-user-images/image-20230307142501372.png" alt="image-20230307142501372"></li><li>MIB（Management Information Base，管理信息库）指代理进程包含的、能够被管理进程进行查询和设置的所有信息的集合</li><li>MIB是以树状结构进行存储的，像这样<img src="/../AppData/Roaming/Typora/typora-user-images/image-20230307142816319.png" alt="image-20230307142816319"></li></ul></li></ul><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><h4 id="TS-amp-PS"><a href="#TS-amp-PS" class="headerlink" title="TS&amp;PS"></a>TS&amp;PS</h4><p>TS流（Transport Stream）：传输流，将具有共同时间基准或独立时间基准的一个或多个PES组合（复合）而成的单一数据流（用于数据传输）。</p><p>PS流（Program Stream）：节目流，将具有共同时间基准的一个或多个PES组合（复合）而成）单一数据流（用于播放或编辑系</p><p>TS流和PS流的区别：&#x3D;&#x3D;TS流的包结构是长度是固定的；PS流的包结构是可变长度的。&#x3D;&#x3D;这导致了TS流的抵抗传输误码的能力强于PS流（在信道环境较为恶劣，传输误码较高时，一般采用TS码流；而在信道环境较好，传输误码较低时，一般采用PS码流。）</p><h4 id="RTP"><a href="#RTP" class="headerlink" title="RTP"></a>RTP</h4><p>RTP（Real-time Transport Protocol）：实时传输协议，详细说明了在互联网上传递音频和视频的标准数据包格式，是一个传输层的、基于UDP的协议</p><h3 id="存储回放协议"><a href="#存储回放协议" class="headerlink" title="存储回放协议"></a>存储回放协议</h3><h4 id="iSCSI"><a href="#iSCSI" class="headerlink" title="iSCSI"></a>iSCSI</h4><p>之前介绍了，这里不再赘述</p><p>这是iSCSI协议栈</p><img src="https://s2.loli.net/2023/03/07/JeN2ushZ8qjQ4vg.png" alt="image-20230307144202358" style="zoom:50%;" /><h4 id="RTSP协议"><a href="#RTSP协议" class="headerlink" title="RTSP协议"></a>RTSP协议</h4><p>RISP（Real Time Streaming Protocol）实时流传输协议，是ICP&#x2F;IP协议体系中的一个应用层协议。该协议定义了一对多应用程序如何有效地通过IP网络传送多媒体数据。RTSP在体系结构上位于RTP和RTCP之上，它使用TCP或UDP完成数据传输。</p><img src="https://s2.loli.net/2023/03/07/zt2VXTUW5JHeRsa.png" alt="image-20230307144604588" style="zoom:50%;" /><p>客户端和数据管理服务器之间交互的RTSP命令包括Setup、Play、Options、Teardown、Pause。</p><img src="https://s2.loli.net/2023/03/07/2RFe8naODiQ4zZc.png" alt="image-20230307145250025" style="zoom:50%;" /><h3 id="互联协议"><a href="#互联协议" class="headerlink" title="互联协议"></a>互联协议</h3><h4 id="ONVIF"><a href="#ONVIF" class="headerlink" title="ONVIF"></a>ONVIF</h4><p>ONVIF（Open Network Video lnterface Forum），开放型网络视频接口论坛，述了网络视频的模型、接口、数据类型以及数据交互的模式，目标是实现一个网络视频框架协议，使不同厂商所生产的网络视频产品（包括摄录前端、录像设备等）完全互通。</p><h4 id="国标"><a href="#国标" class="headerlink" title="国标"></a>国标</h4><p>GB&#x2F;T28181《安全防范视频监控联网系统信息传输、交换、控制技术要求》规定了安全防范视频监控联网系统中信息传输、交换、控制的互联结构，通信协议结构，传输、交换、控制的基本要求和安全性要求，以及控制、传输流程和协议接口等技术要求。<br>GB&#x2F;T 28181标准对于<strong>视频监控平台互联</strong>、视频监控平台与设备互联提供了统一的信令接口、视音频编解码接口，所有系统之间通过统一公开的标准信令互访，简化了不同厂商之间的互联对接工作。</p><h2 id="第五节-技术应用"><a href="#第五节-技术应用" class="headerlink" title="第五节 技术应用"></a>第五节 技术应用</h2><ul><li>前端智能 -&gt; 智能摄像头，自主完成操作，后端只接收数据</li><li>后端智能 -&gt; 摄像头只负责视频采集，后端自行处理</li></ul><p>常用方式仍然是前后端互补。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频监控 </tag>
            
            <tag> 硬盘阵列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/2023/03/14/code/Java/Redis%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/03/14/code/Java/Redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/03/14/P5NL3TegEmd1Vxu.png" alt="1646268-20190807151151330-1121103170"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro学习笔记</title>
      <link href="/2023/02/22/code/Java/Shiro%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/22/code/Java/Shiro%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><h2 id="搭建基础环境"><a href="#搭建基础环境" class="headerlink" title="搭建基础环境"></a>搭建基础环境</h2><p>所需环境为</p><ul><li>spring</li><li>springMVC</li><li>Shiro</li></ul><p>步骤闪回</p><ol><li><p>创建工程，引入spring-webmvc依赖</p></li><li><p>创建web工程的WEB-INF&#x2F;web.xml</p></li><li><p>配置<code>applicationContext.xml</code>，这是spring的配置，使用默认过滤器，排除controller</p></li><li><p>配置<code>spring-servlet.xml</code>，这是springMVC的配置，不使用默认过滤器，在此加载controller。</p><p><code>&lt;mvc:annotation-driven/&gt;</code>配置映射器适配器</p></li><li><p>配置<code>web.xml</code>加载刚刚的配置，将其生效</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--加载spring配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载servlet--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加controller测试</p></li><li><p>添加Shiro依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- shiro依赖 --></span><span class="token comment">&lt;!-- 截止2023年2月22日，最新版本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- shiro和spring连接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，环境搭建完成</p></li></ol><h2 id="开始配置项目功能"><a href="#开始配置项目功能" class="headerlink" title="开始配置项目功能"></a>开始配置项目功能</h2><p>   创建用户实体类</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   控制器</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/doLogin"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前用户</span>        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行登录操作，自动调用认证类Realm</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/login"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   自定义认证类</p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这个 Realm 相当于是我们自定义认证类 * 当用户调用了 subject.login 方法之后，最终的调用逻辑就会来到当前类中 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthenticatingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化时直接添加用户信息进去</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"cloud"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user1<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1313"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cloud"</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 当用户执行登录操作的时候，最终就会调用到这个方法     *     * @param authenticationToken 这个参数中就包含了用户登录时输入的用户名密码     * @return AuthenticationInfo 认证后的信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordToken</span> usernamePasswordToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>        <span class="token comment">//获取用户登录时候输入的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> usernamePasswordToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据用户名去数据查询用户，假设这个就是取数据查询</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//说明用户名写错了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">(</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//1. 用户登录的用户名</span>        <span class="token comment">//2. 用户的密码，但是注意，这个密码是从数据库查询出来的用户密码</span>        <span class="token comment">//这里返回之后，系统会自动根据这里返回的信息，再结合用户登录时输入的Token（用户名密码信息）去判断密码是否正确</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   写好前端jsp页面</p>   <pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;登录页面&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div&gt;        &lt;p&gt;登录&lt;&#x2F;p&gt;        &lt;form action&#x3D;&quot;&#x2F;doLogin&quot; method&#x3D;&quot;post&quot;&gt;            &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;cloud&quot;&gt;            &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; value&#x3D;&quot;1313&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;        &lt;&#x2F;form&gt;    &lt;&#x2F;div&gt;    &lt;div style&#x3D;&quot;color: orangered&quot;&gt;$&#123;error&#125;&lt;&#x2F;div&gt;&lt;%--这里输出错误信息--%&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   spring配置。注意，在 Spring 中，写 Shiro 的配置</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    注意，在 Spring 中，写 Shiro 的配置    --></span>    <span class="token comment">&lt;!--1. 配置 Realm 也可以在Realm类上直接用注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.realm.MyRealm<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--2. 配置 SecurityManager--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--3.配置过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--            /login=anon 表示 /login 这个路径可以匿名访问            注意这里的顺序        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>                /login=anon                /doLogin=anon                /**=authc            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   servlet配置</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    这是springMVC的配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   配置文件写完了，将其加载到web工程中去</p>   <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载spring配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContest.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加载servlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        注意，ShiroFilterFactoryBean 的名字必须和这里过滤器的名字保持一致        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--这是一个代理的过滤器，并不是专门为 shiro 设计的过滤器        这个过滤器本身并没有具体的执行逻辑，它的逻辑是将请求拦截下来之后，交给一个和它同名的 Bean 去处理        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目配置完成，可以在进入页面后登录，如果用户名密码正确，就跳转欢迎页面，反之则进行提示用户名密码错误。</p><img src="https://s2.loli.net/2023/02/23/DHdbpiEUum7LjGX.png" alt="登录界面" style="zoom:50%;" /><p>错误页面</p><p><img src="https://s2.loli.net/2023/02/23/PqisIgyY9GZ4CQR.png" alt="用户名错误" style="zoom:50%;" /><img src="https://s2.loli.net/2023/02/23/VytZPwhYdGgSzCn.png" alt="密码错误" style="zoom:50%;" /></p><p>另外，未成功登录时，访问任何页面，都会强制跳转到登录页面要求登录。</p><p>不过现在这个项目还有两个小问题：</p><ol><li><p>项目启动时，进入登录页面会自动在url中携带sessionid</p><img src="https://s2.loli.net/2023/02/23/Rth1TdWLbQAaPui.png" alt="禁用session地址栏存放" style="zoom:50%;" /><p>解决办法是：</p><p>在配置<code>SecurityManager</code>时配置<code>sessionManager</code>属性，关闭 url 地址中的 sessionid 重写功能</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--2. 配置 SecurityManager--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--不开启 url 地址中的 sessionid 重写功能，也就是 sessionid 只能放在 Cookie 中--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdUrlRewritingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转登录页面时，总是跳转<code>http://localhost:8080/login.jsp</code></p><p>在过滤器中添加loginUrl属性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--当用户访问了一个没有权限的接口的时候，展示这个地址给用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="引入mybatis"><a href="#引入mybatis" class="headerlink" title="引入mybatis"></a>引入mybatis</h2><p>导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring和数据库交互 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- shiro依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- shiro和spring连接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        mybatis配置相关--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置文件加载规则，这里是为了将mapper的配置文件扫描到--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置数据库文件，附上数据库脚本</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///shirodemo?serverTimezone=Asia/Shanghai</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>数据库脚本</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*SQLyog Ultimate v12.08 (64 bit)MySQL - 8.0.26 : Database - shirodemo**********************************************************************/</span><span class="token comment">/*!40101 SET NAMES utf8 */</span><span class="token punctuation">;</span><span class="token comment">/*!40101 SET SQL_MODE=''*/</span><span class="token punctuation">;</span><span class="token comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span><span class="token punctuation">;</span><span class="token comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span><span class="token punctuation">;</span><span class="token comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span><span class="token punctuation">;</span><span class="token comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token comment">/*!32312 IF NOT EXISTS*/</span><span class="token identifier"><span class="token punctuation">`</span>shirodemo<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> <span class="token comment">/*!80016 DEFAULT ENCRYPTION='N' */</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token identifier"><span class="token punctuation">`</span>shirodemo<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `permission` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">6</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `permission` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'user:add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'user:delete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'user:update'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'user:select'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `role` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `role` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `role_permission` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>role_permission<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>role_permission<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>rid<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">4</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `role_permission` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>role_permission<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>rid<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `roles_permissions` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>roles_permissions<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>roles_permissions<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `roles_permissions` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>roles_permissions<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>permission<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'book:*'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'author:create'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `user` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_unicode_ci <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>enabled<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'1 学生 2 老师 3 管理员'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_unicode_ci<span class="token punctuation">;</span><span class="token comment">/*Data for the table `user` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>enabled<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'系统管理员'</span><span class="token punctuation">,</span><span class="token string">'271dad09d1a71f27b7aeaa27306d5e24'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token string">'0c1b64535abaa1e871009019c6bcde0e'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `user222` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>user222<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user222<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>favorites<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">17</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin<span class="token punctuation">;</span><span class="token comment">/*Data for the table `user222` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user222<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>favorites<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>grade<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'李五'</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'足球;篮球;'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'本科'</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'271dad09d1a71f27b7aeaa27306d5e24'</span><span class="token punctuation">,</span><span class="token string">'足球;篮球;'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'大专'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token string">'0c1b64535abaa1e871009019c6bcde0e'</span><span class="token punctuation">,</span><span class="token string">'足球;乒乓球;'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'本科'</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'王五1'</span><span class="token punctuation">,</span><span class="token string">'北京1'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'王五2'</span><span class="token punctuation">,</span><span class="token string">'北京2'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'足球;篮球;'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'足球22;篮球22;'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'足球22;篮球22;'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `user_role` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>user_role<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>uid<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>rid<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `user_role` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user_role<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>uid<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>rid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `user_roles` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>user_roles<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user_roles<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `user_roles` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user_roles<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>role_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Table structure for table `users` */</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>password_salt<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">/*Data for the table `users` */</span><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>password_salt<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'fengqi'</span><span class="token punctuation">,</span><span class="token string">'9611db65cbed76a157f48e36dd9c6748'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span><span class="token punctuation">;</span><span class="token comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span><span class="token punctuation">;</span><span class="token comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span><span class="token punctuation">;</span><span class="token comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置spring，添加如下配置。其实就是连接数据库和连接池而已</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            classpath*:/com/hengxing/demo/mapper/*.xml        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实体类补充，对应数据库的属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enabled<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> role<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserMapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> <span class="token function">getUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现类<code>UserMapper.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByUsername<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.model.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user where username = #&#123;username&#125;;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之前的认证已经不满足我们的需求了，重新定义认证类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DbRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthenticatingRealm</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UsernamePasswordToken</span> usernamePasswordToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span> token<span class="token punctuation">;</span>        <span class="token comment">//获取用户登录时候输入的用户名</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> usernamePasswordToken<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据用户名去数据查询用户，假设这个就是取数据查询</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//说明用户名写错了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">(</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果账户被禁用了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span><span class="token function">getEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LockedAccountException</span><span class="token punctuation">(</span><span class="token string">"账户被禁用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//1. 用户登录的用户名</span>        <span class="token comment">//2. 用户的密码，但是注意，这个密码是从数据库查询出来的用户密码</span>        <span class="token comment">//这里返回之后，系统会自动根据这里返回的信息，再结合用户登录时输入的用户名密码信息去判断密码是否正确</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>记得修改<code>applicationContest.xml</code>中的认证类属性，换成我们刚定义好的。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realm<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--不开启 url 地址中的 sessionid 重写功能，也就是 sessionid 只能放在 Cookie 中--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdUrlRewritingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>OK，大功告成。测试一下吧</p><h2 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h2><p>在过滤规则中添加<code>/logout=logout</code>，后面的 logout 是注销登录过滤器的简称。添加之后，shiro会将这条请求交给注销登录过滤器，注销登录过滤器直接注销登录。</p><p>当然，你也可以自己写个controller来处理，不过记得调整过滤器中的过滤权限为认证<code>/logout=authc</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h2><p>先通过加密算法得到hash值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleHash</span> md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"md5.toString() = "</span> <span class="token operator">+</span> md5<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//md5.toString() = 202cb962ac59075b964b07152d234b70</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其存储在数据库中。</p><p>现在，如果不对项目进行更改，shiro会自动将我们的密码明文不做任何处理，直接与数据库中的密码进行比对。想要成功登录，必须使用加密后的密文来登录才行。</p><p>如何让shiro自动对我们输入的密码进行加密，再比对呢？</p><p>我们来一探究竟，在程序<code>subject.login(token);</code>执行登录操作的地方打上断点，定位到对比密码的片段，在<code>AuthenticatingRealm</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Asserts that the submitted &#123;@code AuthenticationToken&#125;'s credentials match the stored account * &#123;@code AuthenticationInfo&#125;'s credentials, and if not, throws an &#123;@link AuthenticationException&#125;. * * @param token the submitted authentication token * @param info  the AuthenticationInfo corresponding to the given &#123;@code token&#125; * @throws AuthenticationException if the token's credentials do not match the stored account credentials. */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">assertCredentialsMatch</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">,</span> <span class="token class-name">AuthenticationInfo</span> info<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CredentialsMatcher</span> cm <span class="token operator">=</span> <span class="token function">getCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取密码比对器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cm<span class="token punctuation">.</span><span class="token function">doCredentialsMatch</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//not successful - throw an exception to indicate this:</span>            <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"Submitted credentials for token ["</span> <span class="token operator">+</span> token <span class="token operator">+</span> <span class="token string">"] did not match the expected credentials."</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IncorrectCredentialsException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//我们来看getCredentialsMatcher，只是返回了当前的比对器</span><span class="token keyword">public</span> <span class="token class-name">CredentialsMatcher</span> <span class="token function">getCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> credentialsMatcher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到<code>assertCredentialsMatch</code>中后，获取密码对比器，默认获得的是<code>SimpleCredentialMatcher</code>，这个对比器的对比就是明文对比，所以需要更改获取到的对比器</p><img src="https://s2.loli.net/2023/02/23/MxFOZ73uiPkQXR6.png" alt="密码比对器继承树" style="zoom:50%;" /><p>也就是说，如果我们重写这个类中的<code>getCredentialsMatcher()</code>方法，将比对器返回为我们需要的，就可以正确比对了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">CredentialsMatcher</span> <span class="token function">getCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次尝试后，直接输入明文即可，系统会在后台加密对比。</p><h2 id="密码加盐"><a href="#密码加盐" class="headerlink" title="密码加盐"></a>密码加盐</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleHash</span> md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"Aerith"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"md5.toString() = "</span> <span class="token operator">+</span> md5<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SimpleHash</span> tifa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"tifa"</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tifa.toString() = "</span> <span class="token operator">+</span> tifa<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//md5.toString() = bba0b8c3872d5af7f0c2682c02fe04f4</span>    <span class="token comment">//tifa.toString() = f63e23185a86f4450453e73870dbc8c1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对密码进行加密，加盐并设置迭代次数（进行多少次hash运算），将新的值存进数据库。</p><p>如果想要程序正确执行加密操作</p><p>修改<code>DbRealm.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//其他位置不变，只改变最后的。设置加盐</span>        <span class="token comment">//return new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(), getName());</span>        <span class="token class-name">ByteSource</span> salt <span class="token operator">=</span> <span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>salt<span class="token punctuation">,</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CredentialsMatcher</span> <span class="token function">getCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashedCredentialsMatcher</span> md5_matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        md5_matcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置迭代次数</span>        <span class="token keyword">return</span> md5_matcher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多Realm配置"><a href="#多Realm配置" class="headerlink" title="多Realm配置"></a>多Realm配置</h2><p>如果希望多种验证策略并存，可以使用该策略。</p><p>这个是配置多Realm的认证器，在<code>applicationContext.xml</code>中添加</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.authc.pam.ModularRealmAuthenticator<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticator<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>realms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dbRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticationStrategy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>authenticationStrategy</code>确认认证策略</p><ul><li><p><code>AtLeastoneSuccessfulstrategy</code>：至少有一个Realm认证成功，就算成功</p></li><li><p><code>ALLSuccessfulstrategy</code>：所有Realm 都要认证成功才算成功</p></li><li><p><code>FirstSuccessfulStrategy</code>：至少有一个Realm 认证成功，就算成功</p><blockquote><p>这个Bean中，有一个属性名为<code>stopAfterFirstSuccess</code>，表示是否在第一个bean 认证成功后，就不再执行后面的Realm了</p><p>这个属性默认为false，即第一个ReamL认证成功后，后面的Realm还是会认证的，此时<code>Firstsuccessfulstrategy</code>和<code>AtLeastonesuccessfulstrategy</code>其实没有差别。</p><p>如果将<code>stopAfterFirstSuccess</code>属性设置为true，那么对于<code>Firstsuccessfulstrategy</code>而言，第一个Realm 认证成功后，后面的Realm就不再执行了。</p></blockquote></li></ul><p>另外，将单realm的设置变为刚刚配置好的认证器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--1. 配置 Realm 也可以在Realm类上直接用注解--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.realm.MyRealm<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myRealm<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--2. 配置 SecurityManager--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;property name="realm" ref="dbRealm"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticator<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--替换为认证器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--不开启 url 地址中的 sessionid 重写功能，也就是 sessionid 只能放在 Cookie 中--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionIdUrlRewritingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动。</p><p>此时，两个realm中的用户都能够登录。</p><h2 id="RememberMe功能"><a href="#RememberMe功能" class="headerlink" title="RememberMe功能"></a>RememberMe功能</h2><blockquote><p><code>remeber-me</code>即<code>记住我</code>功能，是我们在登录web系统时的常见勾选项。当我们登录一个web系统时除了输入常规的用户名、密码后还可以勾选记住我选项（假设该系统提供了该选项），此时假设用户名、密码输入正确那么系统将会在客户浏览器cookie中记录用户登录相关认证相关信息。实现的效果就是当我们下次再次访问该网站某些页面时无需再次登录。</p><img src="https://s2.loli.net/2023/02/24/PkHvnb7MCQATxtw.png" alt="记住我功能" style="zoom:33%;" /><p>————————————————<br>版权声明：本文为CSDN博主「罗汉爷」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/IndexMan/article/details/118726437">https://blog.csdn.net/IndexMan/article/details/118726437</a></p></blockquote><p>我们在很多网站都见过这样的功能，一般在关闭浏览器后重写打开时，可以无需登录访问网站。不过，在遇到涉及数据修改时仍然要求再次登录认证，比如淘宝网在关闭浏览器后重新登陆，可以继续浏览商品，但如果需要购买，就必须再次登录。</p><p>Shiro中为我们提供这个功能。</p><p>为了展示，我们定义一个index页面，这个页面的权限设置为<code>rememberMe</code>（即登录后重启浏览器还可以访问）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"This is index page.You can access this page through Remember Me!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>        /login=anon        /doLogin=anon        /logout=authc        /index=user        /**=authc    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改登录页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/doLogin<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Aerith<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rememberMe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>记住我    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/doLogin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">,</span><span class="token class-name">String</span> rememberMe<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取当前用户</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rememberMe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在这里判断，如果rememberMe为on，就开启功能</span>            token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/login"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成，登录成功后，关闭浏览器再次访问<code>http://localhost:8080/index</code>无需登录，但要访问<code>http://localhost:8080/hello</code>则需重新登录。</p><h3 id="RememberMe登录流程"><a href="#RememberMe登录流程" class="headerlink" title="RememberMe登录流程"></a>RememberMe登录流程</h3><ol><li>登录的时候，传入用户名密码，登录成功之后，先对当前登录的用户进行序列化，序列化之后，得到一个 byte 数组，然后对这个 byte 数组进行加密（用的是 AES 对称加密，将来可以解密的），加密之后得到一个 byte 数组，但是这个 byte 数组无法直接展示出来，需要再进行一次 Base64 转码，就可以转为可读的字符串了，然后将这个字符串写入到 Cookie 中，并返回给浏览器。</li><li>以后每次请求的时候，系统都会自动携带上这个 Cookie，系统收到这个 Cookie 之后，首先从请求头中提取出 RememberMe 字符串，提取出来之后首先进行 Base64 解码，解码之后，再调用 AES 服务进行解密，揭秘之后得到一个 byte 数组，再将这个 byte 数组反序列化，得到登录的用户对象。</li></ol><h2 id="角色与权限"><a href="#角色与权限" class="headerlink" title="角色与权限"></a>角色与权限</h2><ul><li>权限：具体的一个数据操作，例如针对 user 表，可以有 user:select、user:delete、user:update、user:add 等权限。权限重点是强调对数据的操作，权限本身不涉及到任何业务相关的技术点。</li><li>角色：角色往往是根据你的项目的业务来定义的一组权限的集合，例如有一个角色是产品研发部经理，这个角色本质上是一个权限的集合。</li><li>正常来说，当用户访问某一个接口或者某一个方法的时候，首先根据当前用户的 id，查询到当前用户的角色，再根据当前用户的角色，查询到当前用户的权限，再去判断当前用户是否具备所需要的权限。</li><li>Shiro 中，既可以使用角色去做判断，也可以使用权限去做判断。</li></ul><h3 id="验证权限的实例"><a href="#验证权限的实例" class="headerlink" title="验证权限的实例"></a>验证权限的实例</h3><p>定义四个动作，增删改查。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/selectUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"selectUser"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"updateUser"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"addUser"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"deleteUser"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义每个动作的权限，这里<code>/selectUser=authc,perms[user:select]</code>的意思是说&#x2F;selectUser页面需要authc和perms过滤器检查，perms是系统提供的权限过滤器。用户需要拥有</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            /selectUser=authc,perms[user:select]            /updateUser=authc,perms[user:update]            /addUser=authc,perms[user:add]            /deleteUser=authc,perms[user:delete]            /login=anon            /doLogin=anon            /logout=authc            /index=user            /**=authc        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改数据库，为相应的用户添加权限。</p><p>需要添加五张表：</p><ol><li>用户表</li><li>角色表</li><li>权限表</li><li>用户-角色表</li><li>角色-权限表</li></ol><p>修改DbRealm的继承类，AuthorizingRealm，这个类是之前的AuthenticatingRealm的子类，见名知意，增加了授权方法</p><p><code>public class DbRealm extends AuthorizingRealm </code></p><p>重写其中的获取授权信息方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 当需要确定用户具备哪些权限时，系统会自动调用当前方法来获取当前登录用户所具有的权限 * @param principals 当前用户 * @return 权限信息 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principals<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SimpleAuthorizationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> permissions <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getPermissionsByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    info<span class="token punctuation">.</span><span class="token function">addStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，如果你的权限信息配置好了，那项目配置就成功了。现在，管理员可以访问所有操作，但是用户只能访问他们有权限访问的页面。</p><p>这是未授权页面的响应：</p><img src="https://s2.loli.net/2023/02/24/7UlftjNJYgvEWo8.png" alt="未授权页面" style="zoom: 33%;" /><p>我可以自定义这个页面，在过滤器中添加信息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 未授权页面，后方是链接 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unauthorizedUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/unauthorized<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/unauthorized"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">unauthorized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"你没有访问这个页面的权限！请联系你的管理员来获取权限。"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当访问未授权页面时返回你指定的内容</p><h1 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h1><h3 id="第一个记录：粗心导致包名错误"><a href="#第一个记录：粗心导致包名错误" class="headerlink" title="第一个记录：粗心导致包名错误"></a>第一个记录：粗心导致包名错误</h3><p>报错<code>One or more listeners failed to start. Full details will be found in the appropriate container log file</code></p><p>这时候看不到详细的报错信息，所以我们添加一个logging文件来查看详细报错</p><p>【或者直接点右边的日志，即可查看】<img src="https://s2.loli.net/2023/02/23/Nr6QRv7OhKemtjs.png" alt="image-20230223152645911" style="zoom: 50%;" /></p><p>在classpath：下新建一个logging.properties文件【classpath就是你项目的&#x2F;目录下】</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">handlers</span> <span class="token punctuation">=</span> <span class="token value attr-value">org.apache.juli.FileHandler, java.util.logging.ConsoleHandler    </span><span class="token comment">############################################################</span><span class="token comment"># Handler specific properties.</span><span class="token comment"># Describes specific configuration info for Handlers.</span><span class="token comment">############################################################</span><span class="token key attr-name">org.apache.juli.FileHandler.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">FINE    </span><span class="token key attr-name">org.apache.juli.FileHandler.directory</span> <span class="token punctuation">=</span> <span class="token value attr-value">../logs    </span><span class="token key attr-name">org.apache.juli.FileHandler.prefix</span> <span class="token punctuation">=</span> <span class="token value attr-value">error-debug.    </span><span class="token key attr-name">java.util.logging.ConsoleHandler.level</span> <span class="token punctuation">=</span> <span class="token value attr-value">FINE    </span><span class="token key attr-name">java.util.logging.ConsoleHandler.formatter</span> <span class="token punctuation">=</span> <span class="token value attr-value">java.util.logging.SimpleFormatter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启之后的报错为：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log"><span class="token date number">Feb 22</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token time number">11:39:58</span> PM org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContext filterStart<span class="token level error important">SEVERE</span><span class="token operator">:</span> Exception starting filter <span class="token punctuation">[</span>shiroFilter<span class="token punctuation">]</span><span class="token property">org.springframework.beans.factory.BeanCreationException:</span> Error creating bean with name <span class="token string">'shiroFilter'</span><span class="token operator">:</span> FactoryBean threw exception on object creation<span class="token operator">;</span><span class="token property">nested exception is org.springframework.beans.factory.BeanInitializationException:</span>The security manager does not implement the WebSecurityManager interface<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>The security manager does not implement the WebSecurityManager interface.</code>通过这一句定位信息，安全管理器没有实现<code>WebSecurityManager</code>接口</p><p>故查看<code>WebSecurityManager </code>发现写错了类名</p><p>应该为<code>DefaultWebSecurityManager</code>而不是<code>DefaultSecurityManager</code></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h2 id="过滤器参数"><a href="#过滤器参数" class="headerlink" title="过滤器参数"></a>过滤器参数</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置过滤器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>shiroFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>securityManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置登录地址，如果访问一个需要登录后才能访问的页面，就会自动跳转到 /login         这个 /login 有两层含义：         1. 他是登录页面         2. 他也是一个登录接口(当当前环境下，这是一个登录接口)         如果使用的是系统自动提供的登录过滤器，那么这里的配置，实际上就是指 LoginFilter 的拦截规则         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--当用户访问了一个没有权限的接口的时候，展示这个地址给用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>unauthorizedUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/unAuthorized<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置拦截规则--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filterChainDefinitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--            /login=anon 表示 /login 这个路径可以匿名访问            /logout=logout 后面的 logout 是注销登录过滤器的简称            /**=authc 表示其余的请求，都要认证之后才能访问            /index=user 表示 /index 可以通过 rememberme 的方式访问            注意这里的顺序            --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>            /logout=logout            /**=authc        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring参考文档</title>
      <link href="/2023/02/21/code/Java/spring/springMVC%E6%96%87%E6%A1%A3/"/>
      <url>/2023/02/21/code/Java/spring/springMVC%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="/Pictures/logo.jpg" alt="logo"></p><blockquote><p>Author：<a href="http://www.javaboy.org/">www.javaboy.org</a></p><p>Version：0.0.1</p></blockquote><p>[TOC]</p><h3 id="一、SpringMVC"><a href="#一、SpringMVC" class="headerlink" title="一、SpringMVC"></a>一、SpringMVC</h3><hr><h4 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h4><blockquote><p><strong>java开源框架，Spring Framework的一个独立模块。</strong></p><p><strong>MVC框架,在项目中开辟MVC层次架构</strong>    </p><p><strong>对控制器中的功能 包装 简化 扩展践行工厂模式，功能架构在工厂之上</strong></p></blockquote><h4 id="1-2-MVC架构"><a href="#1-2-MVC架构" class="headerlink" title="1.2 MVC架构"></a>1.2 MVC架构</h4><h5 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h5><table><thead><tr><th>名称</th><th>职责</th></tr></thead><tbody><tr><td>Model</td><td>模型：即业务模型，负责完成业务中的数据通信处理，对应项目中的 service和dao</td></tr><tr><td>View</td><td>视图：渲染数据，生成页面。对应项目中的Jsp</td></tr><tr><td>Controller</td><td>控制器：直接对接请求，控制MVC流程，调度模型，选择视图。对应项目中的Servlet</td></tr></tbody></table><h5 id="1-2-2-好处"><a href="#1-2-2-好处" class="headerlink" title="1.2.2 好处"></a>1.2.2 好处</h5><blockquote><ul><li><p>MVC是现下软件开发中的最流行的代码结构形态;</p></li><li><p>人们根据负责的不同逻辑，将项目中的代码分成 M V C 3个层次;</p></li><li><p>层次内部职责单一，层次之间耦合度低;</p></li><li><p>符合低耦合 高内聚的设计理念。也实际有利于项目的长期维护。</p></li></ul></blockquote><h3 id="二、开发流程"><a href="#二、开发流程" class="headerlink" title="二、开发流程"></a>二、开发流程</h3><hr><h4 id="2-1-导入依赖"><a href="#2-1-导入依赖" class="headerlink" title="2.1 导入依赖"></a>2.1 导入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-配置核心-前端-控制器"><a href="#2-2-配置核心-前端-控制器" class="headerlink" title="2.2 配置核心(前端)控制器"></a>2.2 配置核心(前端)控制器</h4><blockquote><p>作为一个MVC框架，首先要解决的是：如何能够收到请求！</p><p>所以MVC框架大都会设计一款前端控制器，选型在 Servlet 或 Filter两者之一,在框架最前沿率先工作，接收所有请求。</p><p>此控制器在接收到请求后，还会负责springMVC的核心的调度管理，所以既是前端又是核心。</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 局部参数：声明配置文件位置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Servlet启动时刻：可选 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-后端控制器"><a href="#2-3-后端控制器" class="headerlink" title="2.3 后端控制器"></a>2.3 后端控制器</h4><blockquote><p>等价于之前定义的Servlet</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span> <span class="token comment">//声明这是一个控制器</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>  <span class="token comment">//访问路径 ，等价于url-pattern</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>  <span class="token comment">//访问路径</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span> <span class="token comment">// 跳转:/index.jsp  </span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span> <span class="token comment">//访问路径</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello c9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"views/users"</span><span class="token punctuation">;</span><span class="token comment">//  跳转:/views/user.jsp</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-配置文件"><a href="#2-4-配置文件" class="headerlink" title="2.4 配置文件"></a>2.4 配置文件</h4><blockquote><p>默认名称：核心控制器名-servet.xml     默认位置：WEB-INF</p><p>随意名称：mvc.xml           随意位置：resources    但需要配置在核心控制器中</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsdhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 告知springmvc  哪些包中 存在 被注解的类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qf.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 注册注解开发驱动 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 视图解析器     作用：1.捕获后端控制器的返回值="index"          2.解析： 在返回值的前后 拼接 ==> "/index.jsp" --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 前缀 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 后缀 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-访问"><a href="#2-5-访问" class="headerlink" title="2.5 访问"></a>2.5 访问</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">http://localhost：8989/hello/test1http://localhost：8989/hello/test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接口方法的返回值：</p><ol><li>没有返回值</li><li>返回逻辑视图名</li><li>返回字符串</li><li>返回 JSON</li></ol><h3 id="三、接收请求参数"><a href="#三、接收请求参数" class="headerlink" title="三、接收请求参数"></a>三、接收请求参数</h3><hr><h4 id="3-1-基本类型参数"><a href="#3-1-基本类型参数" class="headerlink" title="3.1 基本类型参数"></a>3.1 基本类型参数</h4><blockquote><p>请求参数和方法的形参 同名即可</p></blockquote><blockquote><p>springMVC默认可以识别的日期字符串格式为： yyyy&#x2F;MM&#x2F;dd HH:mm:ss<br>通过@DateTimeFormat可以修改默认日志格式</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// id  name gender</span><span class="token comment">// http://localhost:8989/xxx/../test1?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam1</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                         <span class="token class-name">String</span> name<span class="token punctuation">,</span>                         <span class="token class-name">Boolean</span> gender<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token class-name">Date</span> birth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test param1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-实体收参【重点】"><a href="#3-2-实体收参【重点】" class="headerlink" title="3.2 实体收参【重点】"></a>3.2 实体收参【<code>重点</code>】</h4><blockquote><p>请求参数和实体的属性 同名即可</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Boolean</span> gender<span class="token punctuation">;</span><span class="token comment">//set/get ...</span><span class="token punctuation">&#125;</span><span class="token comment">//http://localhost:8989/.../test2?id=1&amp;name=zzz&amp;gender=false&amp;birth=2018-12-12 12:20:30</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam2</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test param2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user:"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-数组收参"><a href="#3-3-数组收参" class="headerlink" title="3.3 数组收参"></a>3.3 数组收参</h4><blockquote><p>简单类型的 数组</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    ......    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>足球     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>篮球     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>排球    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//http://localhost:8989/.../test3?hobby=football&amp;hobby=basketball</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam3</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hobby<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> h<span class="token operator">:</span>hobby<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>h<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-集合收参-【了解】"><a href="#3-4-集合收参-【了解】" class="headerlink" title="3.4 集合收参 【了解】"></a>3.4 集合收参 【了解】</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserList</span> <span class="token punctuation">&#123;</span><span class="token comment">//private User[] users;</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">;</span><span class="token comment">//set/get..</span><span class="token punctuation">&#125;</span><span class="token comment">// &lt;input type="text" name="users[0].id"/></span><span class="token comment">// post请求：http://...?users[0].id=1&amp;users[0].name=zhangsan&amp;users[0].birth=2018-12-12&amp;users[1].id=2&amp;....</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test4"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam4</span><span class="token punctuation">(</span><span class="token class-name">UserList</span> userList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token operator">:</span>userList<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-路径参数"><a href="#3-5-路径参数" class="headerlink" title="3.5 路径参数"></a>3.5 路径参数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// &#123;id&#125; 定义名为id的路径；【/hello/&#123;id&#125;】的匹配能力和【/hello/*】等价</span><span class="token comment">// http://localhost:8989/.../hello/10   &#123;id&#125;匹配到10</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token comment">// @PathVariable将&#123;id&#125;路径匹配到值赋给id参数</span><span class="token comment">// 路径名和参数名相同则@PathVariable("id")可简写为 @PathVariable</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// http://localhost:8989/.../hello/tom   &#123;username&#125;匹配到tom</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello/&#123;username&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam6</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将&#123;username&#125;路径匹配到的值赋给name参数</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-中文乱码"><a href="#3-6-中文乱码" class="headerlink" title="3.6 中文乱码"></a>3.6 中文乱码</h4><blockquote><p>首先，页面中字符集统一</p></blockquote><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">JSP : &lt;%@page  pageEncoding&#x3D;&quot;utf-8&quot; %&gt;HTML : &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>其次，tomcat中字符集设置，对get请求中，中文参数乱码有效</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Tomcat配置：URIEncoding=utf-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>最后，设置此filter，对post请求中，中文参数乱码有效</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 此过滤器会进行：request.setCharactorEncoding("utf-8"); --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、跳转"><a href="#四、跳转" class="headerlink" title="四、跳转"></a>四、跳转</h3><hr><h4 id="4-1-转发"><a href="#4-1-转发" class="headerlink" title="4.1 转发"></a>4.1 转发</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/forw"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ForwardController</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test forward1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转发跳转 /views/users.jsp</span>        <span class="token comment">// return "views/users";//和下一行等价</span>        <span class="token keyword">return</span> <span class="token string">"forward:/views/users.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForward2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test forward2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转发到  /forw/test1</span>        <span class="token comment">//return "forward:test1";//相对路径(转发到本类中的test1)</span>        <span class="token comment">//转发到  /forw/test1</span>        <span class="token keyword">return</span> <span class="token string">"forward:/forw/test1"</span><span class="token punctuation">;</span> <span class="token comment">//绝对路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-重定向"><a href="#4-2-重定向" class="headerlink" title="4.2 重定向"></a>4.2 重定向</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/redir"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">RedirectController</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test redirect1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向到 /redir/test1</span>        <span class="token comment">//return "redirect:test1"; //相对路径(转发到本类中的test1)</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/redir/test1"</span><span class="token punctuation">;</span><span class="token comment">//绝对路径</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test redirect2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//重定向到 /views/users.jsp</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/view/user.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-跳转细节"><a href="#4-3-跳转细节" class="headerlink" title="4.3 跳转细节"></a>4.3 跳转细节</h4><blockquote><ul><li><p>在增删改之后，为了防止请求重复提交，重定向跳转</p></li><li><p>在查询之后，可以做转发跳转</p></li></ul></blockquote><h3 id="五、传值"><a href="#五、传值" class="headerlink" title="五、传值"></a>五、传值</h3><p>从处理器往页面传值的四种方式：</p><ol><li>传统的 HttpServletRequest、HttpSession。</li><li>返回逻辑视图名，则可以通过 Model 参数传参。</li><li>返回 ModelAndView。</li><li>SessionAttribute（可以用在重定向的场景下）</li></ol><hr><blockquote><p>C得到数据后，跳转到V，并向V传递数据。进而V中可以渲染数据，让用户看到含有数据的页面</p><p>转发跳转：Request作用域</p><p>重定向跳转：Session作用域</p></blockquote><h4 id="5-1-Request和Session"><a href="#5-1-Request和Session" class="headerlink" title="5.1 Request和Session"></a>5.1 Request和Session</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//形参中 即可获得 request 和 session对象</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testData</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> req，<span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//return "test2";</span>    <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/test2.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-JSP中取值"><a href="#5-2-JSP中取值" class="headerlink" title="5.2 JSP中取值"></a>5.2 JSP中取值</h4><blockquote><p>建议：重点复习 EL  JSTL</p></blockquote><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&#x2F;&#x2F;jsp中用EL表达式 取值即可&lt;fmt:formatDate value&#x3D;&quot;$&#123;sessionScope.user.birth&#125;&quot; pattern&#x3D;&quot;yyyy-MM-dd&quot;&#x2F;&gt; &lt;br&#x2F;&gt;$&#123;sessionScope.user.birth&#125; &lt;br&gt;$&#123;requestScope.age&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-Model"><a href="#5-3-Model" class="headerlink" title="5.3 Model"></a>5.3 Model</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//model中的数据，会在V渲染之前，将数据复制一份给request</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testData</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//jsp中用EL表达式 取值即可</span>$<span class="token punctuation">&#123;</span>requestScope<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-4-ModelAndView"><a href="#5-4-ModelAndView" class="headerlink" title="5.4 ModelAndView"></a>5.4 ModelAndView</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//modelandview 可以集中管理 跳转和数据</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//返回值类型为ModelAndView</span>    <span class="token comment">//新建ModelAndView对象</span>    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置视图名，即如何跳转</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"forward:/index.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 增加数据</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//jsp中用EL表达式 取值即可</span>$<span class="token punctuation">&#123;</span>requestScope<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-5-SessionAttributes"><a href="#5-5-SessionAttributes" class="headerlink" title="5.5 @SessionAttributes"></a>5.5 @SessionAttributes</h4><blockquote><ul><li><p>@SessionAttributes({“gender”,”name”})  ：model中的 name和gender 会存入session中</p></li><li><p>SessionStatus 移除session</p></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// model中的 name和gender 会存入session中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">Model</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会存入session</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会存入session</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">SessionStatus</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 移除通过SessionAttributes存入的session</span>        status<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、静态资源"><a href="#六、静态资源" class="headerlink" title="六、静态资源"></a>六、静态资源</h3><hr><h4 id="6-1-静态资源问题"><a href="#6-1-静态资源问题" class="headerlink" title="6.1 静态资源问题"></a>6.1 静态资源问题</h4><blockquote><p>静态资源：html，js文件，css文件，图片文件</p></blockquote><blockquote><p>静态文件没有url-pattern,所以默认是访问不到的，之所以可以访问，是因为，tomcat中有一个全局的servlet：org.apache.catalina.servlets.DefaultServlet，它的url-pattern是 “&#x2F;“,是全局默认的Servlet.  所以每个项目中不能匹配的静态资源的请求，有这个Servlet来处理即可。</p></blockquote><blockquote><p>但，在SpringMVC中DispatcherServlet也采用了 “&#x2F;” 作为url-pattern, 则项目中不会再使用全局的Serlvet，则静态资源不能完成访问。</p></blockquote><h4 id="6-2-解决方案1"><a href="#6-2-解决方案1" class="headerlink" title="6.2 解决方案1"></a>6.2 解决方案1</h4><blockquote><p>DispathcerServlet采用其他的url-pattern</p><p>此时，所有访问handler的路径都要以 action结尾！！</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>mvc9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-解决方案2"><a href="#6-3-解决方案2" class="headerlink" title="6.3 解决方案2"></a>6.3 解决方案2</h4><blockquote><p>DispathcerServlet的url-pattern依然采用 “&#x2F;“,但追加配置</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--   额外的增加一个handler，且其requestMapping:  "/**" 可以匹配所有请求，但是优先级最低  所以如果其他所有的handler都匹配不上，请求会转向 "/**" ,恰好，这个handler就是处理静态资源的  处理方式：将请求转会到tomcat中名为default的Servlet  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-4-解决方案3"><a href="#6-4-解决方案3" class="headerlink" title="6.4 解决方案3"></a>6.4 解决方案3</h4><blockquote><ul><li>mapping是访问路径，location是静态资源存放的路径</li><li>将&#x2F;html&#x2F;** 中 &#x2F;**匹配到的内容，拼接到 &#x2F;hhh&#x2F;后<br>http:&#x2F;&#x2F;….&#x2F;html&#x2F;a.html  访问 &#x2F;hhh&#x2F;a.html</li></ul></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/html/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hhh/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="七、Json处理"><a href="#七、Json处理" class="headerlink" title="七、Json处理"></a>七、Json处理</h3><hr><p>主流处理方案三种：</p><ul><li>jackson（推荐）</li><li>gson</li><li>fastjson（了解）</li></ul><p>SpringMVC 中，默认提供了对 jackson 和 gson 的支持。</p><h4 id="7-1-导入依赖"><a href="#7-1-导入依赖" class="headerlink" title="7.1 导入依赖"></a>7.1 导入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Jackson springMVC默认的Json解决方案选择是 Jackson，所以只需要导入jackson的jar，即可使用。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-使用-ResponseBody"><a href="#7-2-使用-ResponseBody" class="headerlink" title="7.2 使用@ResponseBody"></a>7.2 使用@ResponseBody</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonController</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span> <span class="token comment">//将handler的返回值，转换成json(jackson),并将json响应给客户端。</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// @ResponseBody还可以用在handler的返回值上</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果返回值已经是字符串，则不需要转json，直接将字符串响应给客户端 </span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test3"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span> <span class="token comment">//produces 防止中文乱码</span>    <span class="token annotation punctuation">@ResponseBody</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"你好"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-使用-RestController"><a href="#7-3-使用-RestController" class="headerlink" title="7.3 使用@RestController"></a>7.3 使用@RestController</h4><blockquote><p>Controller类上加了@RestController注解，等价于在类中的每个方法上都加了@ResponseBody</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonController</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//@ResponseBody还可以用在handler的返回值上</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4-使用-RequestBody"><a href="#7-4-使用-RequestBody" class="headerlink" title="7.4 使用@RequestBody"></a>7.4 使用@RequestBody</h4><blockquote><h4 id="RequestBody-接收Json参数"><a href="#RequestBody-接收Json参数" class="headerlink" title="@RequestBody, 接收Json参数"></a><strong>@RequestBody</strong>, 接收Json参数</h4></blockquote><h5 id="7-4-1-定义Handler"><a href="#7-4-1-定义Handler" class="headerlink" title="7.4.1 定义Handler"></a>7.4.1 定义Handler</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> gender<span class="token punctuation">;</span>    <span class="token comment">//set get</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//@RequestBody将请求体中的json数据转换为java对象</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cap2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Post user :"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-4-2-Ajax发送json"><a href="#7-4-2-Ajax发送json" class="headerlink" title="7.4.2 Ajax发送json"></a>7.4.2 Ajax发送json</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/users?"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置请求头</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'&#123;"id":1,"name":"shine","gender":"true"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传递json串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//ajax</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"shine"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'$&#123;pageContext.request.contextPath&#125;/json2/test4'</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>    <span class="token literal-property property">contentType</span><span class="token operator">:</span><span class="token string">"application/json"</span><span class="token punctuation">,</span><span class="token comment">//声明请求参数类型为 json</span>    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 转换js对象成json</span>    <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ret</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-5-Jackson常用注解"><a href="#7-5-Jackson常用注解" class="headerlink" title="7.5 Jackson常用注解"></a>7.5 Jackson常用注解</h4><h5 id="7-5-1-日期格式化"><a href="#7-5-1-日期格式化" class="headerlink" title="7.5.1 日期格式化"></a>7.5.1 日期格式化</h5><blockquote><p>@JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”,timezone &#x3D; “GMT+8”)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    get<span class="token operator">/</span>set<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-5-2-属性名修改"><a href="#7-5-2-属性名修改" class="headerlink" title="7.5.2 属性名修改"></a>7.5.2 属性名修改</h5><blockquote><p>@JsonProperty(“new_name”)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"new_id"</span><span class="token punctuation">)</span> <span class="token comment">//不再使用原属性名，而是 "new_id"</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    get<span class="token operator">/</span>set<span class="token punctuation">&#125;</span>输出的json：<span class="token punctuation">&#123;</span>“new_id”<span class="token operator">:</span>xx<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"xx"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-5-3-属性忽略"><a href="#7-5-3-属性忽略" class="headerlink" title="7.5.3 属性忽略"></a>7.5.3 属性忽略</h5><blockquote><p>@JsonIgnore</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonIgnore</span> <span class="token comment">// 生成json时，忽略此属性</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    get<span class="token operator">/</span>set<span class="token punctuation">&#125;</span>输出json时<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span>xx<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-5-4-null和empty属性排除"><a href="#7-5-4-null和empty属性排除" class="headerlink" title="7.5.4 null和empty属性排除"></a>7.5.4 null和empty属性排除</h5><blockquote><p>Jackson 默认会输出null值的属性，如果不需要，可以排除。</p><p>@JsonInclude(JsonInclude.Include.NON_NULL) &#x2F;&#x2F;null值 属性不输出<br>@JsonInclude(value&#x3D; JsonInclude.Include.NON_EMPTY) &#x2F;&#x2F; empty属性不输出( 空串，长度为0的集合，null值)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span> <span class="token comment">// 若"name==null" 忽略此属性</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonInclude</span><span class="token punctuation">(</span>value<span class="token operator">=</span> <span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_EMPTY</span><span class="token punctuation">)</span>  <span class="token comment">// 若hobby长度为0或==null 忽略此属性</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hobby<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    get<span class="token operator">/</span>set<span class="token punctuation">&#125;</span>如果name<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span>且 hobby长度为<span class="token number">0</span>，则输出json时：<span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span>xx<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-5-5-自定义序列化"><a href="#7-5-5-自定义序列化" class="headerlink" title="7.5.5 自定义序列化"></a>7.5.5 自定义序列化</h5><blockquote><p>@JsonSerialize(using &#x3D; MySerializer.class) &#x2F;&#x2F; 使用MySerializer输出某属性</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">MySerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> salary <span class="token operator">=</span> <span class="token number">10000.126</span><span class="token punctuation">;</span><span class="token comment">//在输出此属性时，使用MySerializer输出</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    get<span class="token operator">/</span>set<span class="token punctuation">&#125;</span>则输出json时：<span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token operator">:</span>xx<span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"salary"</span><span class="token operator">:</span><span class="token number">10000.13</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// value即 Double salary的值</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Double</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将Double salary的值 四舍五入</span>        <span class="token class-name">String</span> number <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出 四舍五入后的值</span>        gen<span class="token punctuation">.</span><span class="token function">writeNumber</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-6-FastJson"><a href="#7-6-FastJson" class="headerlink" title="7.6 FastJson"></a>7.6 FastJson</h4><h5 id="7-6-1-导入依赖"><a href="#7-6-1-导入依赖" class="headerlink" title="7.6.1 导入依赖"></a>7.6.1 导入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- FastJson --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-6-2-安装FastJson"><a href="#7-6-2-安装FastJson" class="headerlink" title="7.6.2 安装FastJson"></a>7.6.2 安装FastJson</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 安装FastJson,转换器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 声明转换类型:json --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-6-3-使用"><a href="#7-6-3-使用" class="headerlink" title="7.6.3 使用"></a>7.6.3 使用</h5><blockquote><p>@ResponseBody  @RequestBody @RestController 使用方法不变</p></blockquote><h5 id="7-6-4-常用注解"><a href="#7-6-4-常用注解" class="headerlink" title="7.6.4 常用注解"></a>7.6.4 常用注解</h5><blockquote><ul><li>日期格式化：@JSONField(format&#x3D;”yyyy&#x2F;MM&#x2F;dd”)</li><li>属性名修改：@JSONField(name&#x3D;”birth”）</li><li>忽略属性：@JSONField(serialize &#x3D; false)</li><li>包含null值：@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteMapNullValue)  默认会忽略所有null值,有此注解会输出null<ul><li>@JSONField(serialzeFeatures &#x3D; SerializerFeature.WriteNullStringAsEmpty)  null的String输出为””</li></ul></li><li>自定义序列化：@JSONField(serializeUsing &#x3D; MySerializer2.class)</li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"NAME"</span><span class="token punctuation">,</span>serialzeFeatures <span class="token operator">=</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteNullStringAsEmpty</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialzeFeatures <span class="token operator">=</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue</span><span class="token punctuation">)</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format<span class="token operator">=</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serializeUsing <span class="token operator">=</span> <span class="token class-name">MySerializer2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> salary<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySerializer2</span> <span class="token keyword">implements</span> <span class="token class-name">ObjectSerializer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">JSONSerializer</span> serializer<span class="token punctuation">,</span> <span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">Object</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Type</span> fieldType<span class="token punctuation">,</span>                      <span class="token keyword">int</span> features<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Double</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span> <span class="token comment">// salary属性值</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">;</span><span class="token comment">// 在salary后拼接 “元”</span>        serializer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出拼接后的内容</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span>，<span class="token keyword">null</span>，<span class="token keyword">null</span>，<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，<span class="token number">100.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如上对象，转换json：</span><span class="token punctuation">&#123;</span><span class="token constant">NAME</span><span class="token operator">:</span><span class="token string">""</span>，city<span class="token operator">:</span><span class="token keyword">null</span>，<span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020/12/12"</span>，<span class="token string">"salary"</span><span class="token operator">:</span><span class="token string">"100.5元"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="八、异常解析器"><a href="#八、异常解析器" class="headerlink" title="八、异常解析器"></a>八、异常解析器</h3><hr><p>两种方式：</p><ul><li>实现 HandlerExceptionResolver</li><li>通过 @ExceptionHandler 注解定义</li><li>SimpleMappingExceptionResolver</li></ul><h4 id="8-1-现有方案，分散处理"><a href="#8-1-现有方案，分散处理" class="headerlink" title="8.1 现有方案，分散处理"></a>8.1 现有方案，分散处理</h4><blockquote><p>Controller中的每个Handler自己处理异常</p><p>此种处理方案，异常处理逻辑，分散在各个handler中，不利于集中管理</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception1</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/xx/error1"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception2</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/xx/error2"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-异常解析器，统一处理"><a href="#8-2-异常解析器，统一处理" class="headerlink" title="8.2 异常解析器，统一处理"></a>8.2 异常解析器，统一处理</h4><blockquote><p>Controller中的每个Handler不再自己处理异常，而是直接throws所有异常。</p><p>定义一个“异常解析器” 集中捕获处理 所有异常</p><p>此种方案，在集中管理异常方面，更有优势！</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">&#123;</span><span class="token comment">/** * 异常解析器：主体逻辑 * 执行时刻：当handler中抛出异常时，会执行：捕获异常，并可以跳到错误页面 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印异常栈</span><span class="token comment">//创建一个ModelAndView</span><span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//识别异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">Exception1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/xxx/error1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">Exception2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/xxx/error2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"redirect:/xxx/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 声明异常解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhi.exception.resolver.MyExResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="九、拦截器"><a href="#九、拦截器" class="headerlink" title="九、拦截器"></a>九、拦截器</h3><p>和过滤器的区别：</p><ul><li><strong>执行时机：拦截器晚于过滤器。</strong></li><li>拦截器是一种 AOP 风格的过滤器。</li></ul><hr><h4 id="9-1-作用"><a href="#9-1-作用" class="headerlink" title="9.1 作用"></a>9.1 作用</h4><blockquote><p>作用：抽取handler中的冗余功能</p></blockquote><h4 id="9-2-定义拦截器"><a href="#9-2-定义拦截器" class="headerlink" title="9.2 定义拦截器"></a>9.2 定义拦截器</h4><blockquote><p>执行顺序： preHandle–postHandle–afterCompletion</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInter1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">&#123;</span><span class="token comment">//主要逻辑：在handler之前执行：抽取handler中的冗余代码</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pre~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        response.sendRedirect("/springMVC_day2/index.jsp");//响应        return false;//中断请求        */</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//放行，后续的拦截器或handler就会执行</span><span class="token punctuation">&#125;</span><span class="token comment">//在handler之后执行:进一步的响应定制</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span><span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"post~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在页面渲染完毕之后，执行：资源回收</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-配置拦截路径"><a href="#9-3-配置拦截路径" class="headerlink" title="9.3 配置拦截路径"></a>9.3 配置拦截路径</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/inter/test1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/inter/test2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/inter/test*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- test开头 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/inter/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- /** 任意多级任意路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/inter/a/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--不拦截此路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.baizhi.interceptor.MyInter1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--拦截器类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、上传"><a href="#十、上传" class="headerlink" title="十、上传"></a>十、上传</h3><hr><h4 id="10-1-导入jar"><a href="#10-1-导入jar" class="headerlink" title="10.1 导入jar"></a>10.1 导入jar</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-表单"><a href="#10-2-表单" class="headerlink" title="10.2 表单"></a>10.2 表单</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath &#125;/upload/test1<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span>       <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  file: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>source<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-3-上传解析器"><a href="#10-3-上传解析器" class="headerlink" title="10.3 上传解析器"></a>10.3 上传解析器</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 上传解析器      id必须是：“multipartResolver” --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>       <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 最大可上传的文件大小  单位：byte  超出后会抛出MaxUploadSizeExceededException异常，可以异常解析器捕获 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1048576<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-4-Handler"><a href="#10-4-Handler" class="headerlink" title="10.4 Handler"></a>10.4 Handler</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">MultipartFile</span> source<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//文件的原始名称</span>    <span class="token class-name">String</span> filename <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定制全局唯一的命名</span>    <span class="token class-name">String</span> unique <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获得文件的后缀</span>    <span class="token class-name">String</span> ext <span class="token operator">=</span> <span class="token class-name">FilenameUtils</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc.txt   txt    hello.html  html</span>    <span class="token comment">//定制全局唯一的文件名</span>    <span class="token class-name">String</span> uniqueFileName <span class="token operator">=</span> unique<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>ext<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"唯一的文件名:"</span><span class="token operator">+</span>uniqueFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件的类型</span>    <span class="token class-name">String</span> type <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filename:"</span><span class="token operator">+</span>filename<span class="token operator">+</span><span class="token string">" type:"</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获得 upload_file的磁盘路径 ==> 在webapp目录下创建一个目录"upload_file",且此目录初始不要为空，否则编译时被忽略</span>    <span class="token class-name">String</span> real_path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload_file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"real_path:"</span><span class="token operator">+</span>real_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将上传的文件，存入磁盘路径中</span>    <span class="token comment">//source.transferTo(new File("d:/xxxx/xxxx/xx.jpg"))</span>    source<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>real_path<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>uniqueFileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十一、下载"><a href="#十一、下载" class="headerlink" title="十一、下载"></a>十一、下载</h3><hr><h4 id="11-1-超链"><a href="#11-1-超链" class="headerlink" title="11.1 超链"></a>11.1 超链</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/download/test1?name=Koala.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-2-Handler"><a href="#11-2-Handler" class="headerlink" title="11.2 Handler"></a>11.2 Handler</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获得要下载文件的绝对路径</span>    <span class="token class-name">String</span> path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload_file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件的完整路径</span>    <span class="token class-name">String</span> real_path <span class="token operator">=</span> path<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>    <span class="token comment">//设置响应头  告知浏览器，要以附件的形式保存内容   filename=浏览器显示的下载文件名</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//读取目标文件，写出给客户端</span>    <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>real_path<span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//上一步，已经是响应了,所以此handler直接是void</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十二、验证码"><a href="#十二、验证码" class="headerlink" title="十二、验证码"></a>十二、验证码</h3><hr><h4 id="12-1-作用"><a href="#12-1-作用" class="headerlink" title="12.1 作用"></a>12.1 作用</h4><blockquote><p>防止暴力攻击，前端安全保障</p></blockquote><h4 id="12-2-导入jar"><a href="#12-2-导入jar" class="headerlink" title="12.2 导入jar"></a>12.2 导入jar</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Kaptcha --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.penggle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>kaptcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-3-声明验证码组件"><a href="#12-3-声明验证码组件" class="headerlink" title="12.3 声明验证码组件"></a>12.3 声明验证码组件</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>cap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.google.code.kaptcha.servlet.KaptchaServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.border<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>no<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.textproducer.char.length<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.textproducer.char.string<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.background.clear.to<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>211,229,237<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- session.setAttribute("captcha","验证码") --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>kaptcha.session.key<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>cap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/captcha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-4-Page"><a href="#12-4-Page" class="headerlink" title="12.4 Page"></a>12.4 Page</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/captcha<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>85px</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#cap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//刷新验证码</span>            path <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"?"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十三、REST"><a href="#十三、REST" class="headerlink" title="十三、REST"></a>十三、REST</h3><hr><h4 id="13-1-开发风格"><a href="#13-1-开发风格" class="headerlink" title="13.1 开发风格"></a>13.1 开发风格</h4><blockquote><p>是一种开发风格，遵从此风格开发软件，符合REST风格，则RESTful。</p></blockquote><blockquote><p>两个核心要求：</p><ul><li>每个资源都有唯一的标识(URL)</li><li>不同的行为，使用对应的http-method</li></ul></blockquote><table><thead><tr><th>访问标识</th><th>资源</th></tr></thead><tbody><tr><td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td><td>所有用户</td></tr><tr><td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td><td>用户1</td></tr><tr><td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td><td>用户1的所有订单</td></tr></tbody></table><table><thead><tr><th>请求方式</th><th>标识</th><th>意图</th></tr></thead><tbody><tr><td>GET（查询）</td><td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td><td>查询所有用户</td></tr><tr><td>POST（添加）</td><td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td><td>在所有用户中增加一个</td></tr><tr><td>PUT（更新）</td><td><a href="http://localhost:8989/xxx/users">http://localhost:8989/xxx/users</a></td><td>在所有用户中修改一个</td></tr><tr><td>DELETE（删除）</td><td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td><td>删除用户1</td></tr><tr><td>GET</td><td><a href="http://localhost:8989/xxx/users/1">http://localhost:8989/xxx/users/1</a></td><td>查询用户1</td></tr><tr><td>GET</td><td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td><td>查询用户1的所有订单</td></tr><tr><td>POST</td><td><a href="http://localhost:8989/xxx/users/1/orders">http://localhost:8989/xxx/users/1/orders</a></td><td>在用户1的所有订单中增加一个</td></tr></tbody></table><h4 id="13-2-优点"><a href="#13-2-优点" class="headerlink" title="13.2 优点"></a>13.2 优点</h4><blockquote><ul><li>**输出json：</li></ul></blockquote><h4 id="13-3-使用"><a href="#13-3-使用" class="headerlink" title="13.3 使用"></a>13.3 使用</h4><h5 id="13-3-1-定义Rest风格的-Controller"><a href="#13-3-1-定义Rest风格的-Controller" class="headerlink" title="13.3.1 定义Rest风格的 Controller"></a>13.3.1 定义Rest风格的 Controller</h5><blockquote><p>@RequestMapping(value&#x3D;”&#x2F;users”,method &#x3D; RequestMethod.GET)</p><p>等价</p><p>@GetMapping(“&#x2F;users”)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Post user :"</span><span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&#123;status:1&#125;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/users"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Put user"</span> user<span class="token operator">:</span>"<span class="token operator">+</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&#123;status:1&#125;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/users/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">queryOneUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//@PathVariable 接收路径中的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Get user id:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&#123;status:1&#125;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/users/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteOneUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//@PathVariable 接收路径中的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete user id:"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"&#123;status:1&#125;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="13-3-2-Ajax请求"><a href="#13-3-2-Ajax请求" class="headerlink" title="13.3.2 Ajax请求"></a>13.3.2 Ajax请求</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">putUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 发送更新请求 （增加请求发送方式也是如此）</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//定义 put，delete,get,post方式 即可，不用定义_method</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"put"</span><span class="token punctuation">,</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/rest04/users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置请求头</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"content-type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span>；        <span class="token comment">// 设置请求参数</span>        <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span>，<span class="token constant">NAME</span><span class="token operator">:</span><span class="token string">"shine"</span><span class="token literal-property property">，city</span><span class="token operator">:</span><span class="token string">"bj"</span>，<span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020/12/12"</span>，<span class="token string">"salary"</span><span class="token operator">:</span><span class="token number">100.5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> ret <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                <span class="token comment">// 解析json，并输出</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">/*$.ajax(&#123;            url:'$&#123;pageContext.request.contextPath&#125;/rest04/users',            type:'put',            contentType:"application/json",//声明请求参数类型为 json            data:JSON.stringify(user),// 转换js对象成json            success:function(ret)&#123;                console.log(JSON.parse(ret));            &#125;        &#125;);*/</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">delUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 发送删除请求</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义 put，delete,get,post方式 即可，不用定义_method</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">,</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/rest04/users/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> ret <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十四、跨域请求"><a href="#十四、跨域请求" class="headerlink" title="十四、跨域请求"></a>十四、跨域请求</h3><hr><h4 id="14-1-域"><a href="#14-1-域" class="headerlink" title="14.1 域"></a>14.1 域</h4><blockquote><p>域：协议+IP（域名）+端口</p><ul><li><p><a href="http://localhost:8989/">http://localhost:8989</a></p></li><li><p><a href="http://localhost:8080/">http://localhost:8080</a></p></li><li><p><a href="http://www.baidu.com/">http://www.baidu.com:80</a></p></li></ul></blockquote><h4 id="14-2-Ajax跨域问题"><a href="#14-2-Ajax跨域问题" class="headerlink" title="14.2 Ajax跨域问题"></a>14.2 Ajax跨域问题</h4><blockquote><ul><li><p>Ajax发送请求时，不允许跨域，以防用户信息泄露。</p></li><li><p>当Ajax跨域请求时，响应会被浏览器拦截(同源策略)，并报错。即浏览器默认不允许ajax跨域得到响应内容。</p></li><li><p>互相信任的域之间如果需要ajax访问，(比如前后端分离项目中，前端项目和后端项目之间)，则需要额外的设置才可正常请求。</p></li></ul></blockquote><h4 id="14-3-解决方案"><a href="#14-3-解决方案" class="headerlink" title="14.3 解决方案"></a>14.3 解决方案</h4><blockquote><ul><li><p>允许其他域访问</p></li><li><p>在被访问方的Controller类上，添加注解</p></li></ul></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span> <span class="token comment">//允许此域发请求访问</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUserController</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><p>携带对方cookie，使得session可用</p></li><li><p>在访问方，ajax中添加属性：withCredentials: true</p></li></ul></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>     <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:8989/web/sys/login"</span><span class="token punctuation">,</span>     <span class="token operator">...</span><span class="token punctuation">,</span>     <span class="token literal-property property">xhrFields</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 跨域携带cookie</span>       <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或<span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 跨域携带cookie</span>xhr<span class="token punctuation">.</span>withCredentials<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十五、SpringMVC执行流程"><a href="#十五、SpringMVC执行流程" class="headerlink" title="十五、SpringMVC执行流程"></a>十五、SpringMVC执行流程</h3><hr><table><thead><tr><th align="center"></th></tr></thead><tbody><tr><td align="center"><img src="/Pictures/springMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="springMVC执行流程"></td></tr></tbody></table><h3 id="十六、Spring整合"><a href="#十六、Spring整合" class="headerlink" title="十六、Spring整合"></a>十六、Spring整合</h3><hr><h4 id="16-1-整合思路"><a href="#16-1-整合思路" class="headerlink" title="16.1 整合思路"></a>16.1 整合思路</h4><blockquote><p>此时项目中有两个工厂</p><ul><li>DispatcherServlet 启动的springMVC工厂&#x3D;&#x3D;负责生产C及springMVC自己的系统组件</li><li>ContextLoaderListener 启动的spring工厂&#x3D;&#x3D;负责生产其他所有组件</li><li>springMVC的工厂会被设置为spring工厂的子工厂，可以随意获取spring工厂中的组件</li><li>整合过程，就是累加：代码+依赖+配置。然后将service注入给controller即可</li></ul></blockquote><h4 id="16-2-整合技巧"><a href="#16-2-整合技巧" class="headerlink" title="16.2 整合技巧"></a>16.2 整合技巧</h4><p>Spring 是一个父容器，SpringMVC 是一个子容器，子容器中可以访问父容器的组件，父容器不可以访问子容器的组件。</p><p>例如，我们将 Service、Dao、Component 都注册到 Spring 容器中，将 Controller 注册到 SpringMVC 容器中，则在 Controller 中，可以注入 Service、Dao、Component ；但是 Service、Dao、Component 中无法注入 Controller。</p><blockquote><p>两个工厂不能有彼此侵入，即，生产的组件不能有重合。</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 告知SpringMVC  哪些包中 存在 被注解的类use-default-filters=true 凡是被 @Controller @Service  @Repository注解的类，都会被扫描use-default-filters=false 默认不扫描包内的任何类, 只扫描include-filter中指定的类只扫描被@Controller注解的类--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zhj<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 告知Spring     唯独不扫描@Controller注解的类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zhj<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端数据校验：<a href="http://springmvc.javaboy.org/2019/1112/validation">http://springmvc.javaboy.org/2019/1112/validation</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2023/02/16/code/Java/spring/SpringMVC%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/16/code/Java/spring/SpringMVC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/16/N8E1LGTUnYVdmPk.jpg" alt="世界最美海角"></p><h1 id="springMVC简单案例"><a href="#springMVC简单案例" class="headerlink" title="springMVC简单案例"></a>springMVC简单案例</h1><p>创建工程后，先添加依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定Java版本--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并添加<code>&lt;packaging&gt;war&lt;/packaging&gt;</code>，这是为了告诉idea这是一个web工程。</p><p>打开Project Structure，你会看到web文件夹</p><p><img src="https://s2.loli.net/2023/02/18/1yTwBqs9RYx6mOW.png" alt="image-20230218094516474"></p><p>点击右侧加号，添加web.xml配置文件，注意文件路径</p><p><img src="https://s2.loli.net/2023/02/18/4P1RSer9IzHwl3X.png" alt="web.xml配置文件"></p><p><img src="https://s2.loli.net/2023/02/18/7DZmGwdY3TPtgrp.png" alt="注意路径"></p><p>一定要放在Webapp文件夹下面</p><p>添加一点页面</p><p><img src="https://s2.loli.net/2023/02/18/QVbdmCXFykpPJ1o.png" alt="添加jsp页面"></p><p>创建Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在resource文件夹下创建<code>spring-servlet.xml</code>，这里主要是配置servlet的一些映射规则</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    包扫描，扫描到刚刚写好的 Controller--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    映射器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    适配器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>为了统一，我们一般在spring-mvc.xml文件配置视图解析器前缀路径的WEB前加”&#x2F;“,value&#x3D;”&#x2F;WEB-INF&#x2F;view&#x2F;“,这样随便写不写类映射注解；项目名的话看自己，为了简单，可以去掉项目名的路径配置。</p></blockquote><p>在web.xml中配置servlet本体</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注意这里的servlet-name是根据上面的名字来的，这里是指定servlet来做所有/的映射--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要把这个项目跑起来，还需要一个服务器，我们使用Tomcat。</p><p>在右上角添加配置</p><img src="https://s2.loli.net/2023/02/18/4AfV1Obrq8JLmiU.png" alt="image-20230218100849923" style="zoom: 33%;" /><img src="https://s2.loli.net/2023/02/18/fIeYxAJBTjhRsut.png" alt="image-20230218101057066" style="zoom: 50%;" /><p><img src="https://s2.loli.net/2023/02/18/evcouMRaWUyPZ2l.png" alt="image-20230218101127512"></p><p>修改路径</p><p><img src="https://s2.loli.net/2023/02/18/W1b6DrfsSInAvFT.png" alt="image-20230218101137953"></p><p>配置好后点OK，再运行服务器，在浏览器中输入以下网址：<code>http://localhost:8080/mvcTest/hello</code>访问成功</p><p><img src="https://s2.loli.net/2023/02/18/b18YLHqWgaNCBxc.png" alt="springMVC访问成功界面"></p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="https://s2.loli.net/2023/02/18/JxV6yr7zCpUI1Lm.png" alt="springMVC工作liu c"></p><h1 id="注解详解"><a href="#注解详解" class="headerlink" title="注解详解"></a>注解详解</h1><h2 id="RequestMapping详解"><a href="#RequestMapping详解" class="headerlink" title="@RequestMapping详解"></a>@RequestMapping详解</h2><p>注解加在方法上，访问路径就是<code>http://localhost:8080/mvc02/hello</code></p><p>现在，一个方法就是一个接口，通过<code>@RequestMapping</code>注解来指定访问方法的路径</p><p>这个注解也可以放在类上面，标注在类上时，value 相当于一个命名空间，即访问该 Controller 下的任意方法都需要带上这个命名空间。</p><p>默认情况下，这个注解支持多个请求方法，我们可以通过 method 属性去指定该接口支持哪些方法，但是注意，如果这个注解放在类上面，不能指定 method 属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定当前方法通过GET请求处理，这时候就只能通过GET发送请求了。如果是其他方式会报错：<code>Request method &#39;POST&#39; not supported</code></p><h3 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h3><p>一个链接，根据请求方式的不同，有不同的功能</p><p><a href="http://localhost:8080/mvc02/user/1">http://localhost:8080/mvc02/user/1</a></p><ul><li><p>GET：查询id为1的user</p></li><li><p>POST：添加id为1的user</p></li><li><p>PUT：修改id为1的user</p></li><li><p>DELETE：删除id为1的user</p></li></ul><p>我们可以指定method参数，但是这样还稍稍有点麻烦，spring为我们提供了简便的注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实他的实现方式就是内部封装了之前的写法而已</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>    method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">GetMapping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，四种请求方式都有其注解</p><ul><li><code>@PostMapping()</code></li><li><code>@PutMapping()</code></li><li><code>@DeleteMapping()</code></li></ul><h3 id="接口方法的返回值"><a href="#接口方法的返回值" class="headerlink" title="接口方法的返回值"></a>接口方法的返回值</h3><ol><li><p>返回 ModelAndView</p></li><li><p>返回字符串</p><ul><li><p>字符串代表服务端或者客户端跳转</p></li><li><p><code>redirect:</code>重定向</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:http://www.baidu.com"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，如果通过<code>response.sendRedirect</code>方法去写重定向，那么跳转路径中，需要包含项目名称</p><p>如果通过 SpringMVC 中的字符串进行重定向，那么不需要写项目路径。例如转到<code>http://localhost:8080/mvc02/home/hello</code>，直接写<code>return &quot;redirect:/home/hello&quot;;</code></p></blockquote></li><li><p><code>forward:</code></p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/home/hello2"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串代表逻辑视图名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">Modelhello</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这个表示是一个逻辑视图名，系统会去自动查找一个名为 index 的视图，并返回</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  servlet会自动去找index.jsp的文件，这里的前缀后缀是你之前在视图解析器中写的。</p></li><li><p>真的字符串</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello4"</span><span class="token punctuation">)</span><span class="token comment">//这个注解表示方法的返回值不用在进行页面渲染了，当前方法的返回值，直接写回到浏览器</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  直接在页面显示index字符</p><blockquote><h4 id="刨根问底"><a href="#刨根问底" class="headerlink" title="刨根问底"></a>刨根问底</h4><p>关于<code>@ResponseBody</code> 你可以查看资料：<a href="http://www.yuanjingyan.com/article/1643899137">@ResponseBody注解的使用说明</a></p></blockquote></li></ul></li><li><p>返回 void</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello5"</span><span class="token punctuation">)</span><span class="token comment">//方法没有返回值，也需要该注解，加了这个注解，方法就不会去找对应的视图了</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="接口的参数"><a href="#接口的参数" class="headerlink" title="接口的参数"></a>接口的参数</h3><ol><li><p>默认可以直接注入的参数：</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>Model&#x2F;ModelMap</li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello6"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello6</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 开箱即用，发送请求<code>http://localhost:8080/mvcTest/hello6?username=hengxing</code></p></li><li><p>自定义的参数</p></li></ol><p>请求参数的传递：</p><ol><li><p>地址栏参数：<a href="http://localhost:8080/mvc02/user?name=xxx">http://localhost:8080/mvc02/user?name=xxx</a></p><p><code>http://localhost:8080/mvcTest/book/getBook?name=简爱&amp;author=夏洛蒂勃朗特</code></p><p>获取时通过：<code>request.getParameter()</code></p></li><li><p>参数放在请求体中</p></li></ol><ul><li><p>可以是 key-value 的形式</p><p><img src="https://s2.loli.net/2023/02/18/Kucg4U95lZXszwH.png" alt="key-value形式"></p><p>也可以在java中直接用写好的实体类进行接收，&#x3D;&#x3D;参数名是根据getter、setter方法推断&#x3D;&#x3D;的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getBook2"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBook2</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book = "</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取时通过：<code>request.getParameter()</code></p></li><li><p>可以是 JSON 形式</p><p>获取时通过：<code>request.getInputStream()</code></p></li></ul><ol start="3"><li><p>参数可以放在地址栏，路径变量：<a href="http://localhost:8080/mvc02/user/1">http://localhost:8080/mvc02/user/1</a></p><p>默认情况下<code>&#123;&#125;</code>中的变量名要和参数中的变量名一致。如果不一致，则可以通过<code>@PathVariable</code>中的属性进行配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/findBook/&#123;id&#125;/&#123;name&#125;"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取时通过：<code>request.getPathI()</code></p></li></ol><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><p>解决乱码问题，首先通过过滤器解决</p><p>在<code>web.xml</code>中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在@PostMapping中添加produces参数，这里的作用只是页面显示时需要告诉浏览器如何解析，并不包含参数本身的字符编码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getBook"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"author = "</span> <span class="token operator">+</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数别名"><a href="#参数别名" class="headerlink" title="参数别名"></a>参数别名</h4><p>刚刚的情况中，发送请求时的参数名，必须和方法中的形参名称一致，否则就找不到参数。</p><p>但是我们可以通过<code>@RequestParam</code>为这个参数设置别名，你可以看到，这里使用bookname做书名的别名</p><p>不过用了这个注解之后，默认情况下，&#x3D;&#x3D;对应的参数必填，否则就会报错&#x3D;&#x3D;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/getBook"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"bookname"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"author = "</span> <span class="token operator">+</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/02/18/cntZPHabUFM3pSk.png" alt="设置别名后的请求"></p><p>可以通过<code>required = false</code>解决，它表示这个参数不是必填参数。或者设置一个默认值</p><h4 id="参数中的日期格式转换"><a href="#参数中的日期格式转换" class="headerlink" title="参数中的日期格式转换"></a>参数中的日期格式转换</h4><p>对于日期类型参数，如果是通过 key-value 形式传递的（区别于 JSON 格式的参数），那么需要自定义日期类型转换器。</p><p>介绍当前环境</p><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>视图层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"book"</span><span class="token punctuation">;</span><span class="token comment">//跳转到表单页面</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBook</span><span class="token punctuation">(</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过对象直接接收</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了getBook方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book = "</span> <span class="token operator">+</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jsp表单中</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;form action&#x3D;&quot;&#x2F;MVCDemoDaily&#x2F;book&#x2F;get&quot; method&#x3D;&quot;post&quot;&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;书名：&lt;&#x2F;td&gt;            &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;        &lt;tr&gt;            &lt;td&gt;作者：&lt;&#x2F;td&gt;            &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;author&quot;&gt;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;        &lt;tr&gt;            &lt;td&gt;日期：&lt;&#x2F;td&gt;            &lt;td&gt;&lt;input type&#x3D;&quot;date&quot; name&#x3D;&quot;date&quot;&gt;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;        &lt;tr&gt;            &lt;td&gt;&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;提交&quot;&gt;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;&#x2F;table&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们添加了一个日期字段，希望通过前端表单页面接收日期参数，但是spring在日期转换时会报错。这时候就需要我们定义一个转换器进行转换。</p><p>如何定义转换器并应用到springMVC呢？</p><blockquote><ol><li>编写转换器类，实现<code>org.springframework.core.convert.converter.Converter</code>接口</li><li>注册进spring容器<ol><li>DateConverter注册</li><li>conversionServiceFactoryBean注册，并把DateConverter放入其中</li><li>mvc:annotation-driven中，开启conversion-service并将FactoryBean放入其中</li></ol></li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionServiceFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.format.support.FormattingConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--将 serviceFactoryBean 配置给 annotation-driven，所有配置给 annotation-driven 的属性，最终其实都是配置给 HandlerMapping 或者 HandlerAdapter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JSON参数处理"><a href="#JSON参数处理" class="headerlink" title="JSON参数处理"></a>JSON参数处理</h1><h2 id="处理工具"><a href="#处理工具" class="headerlink" title="处理工具"></a>处理工具</h2><ol><li>jackson，官方，Spring Boot 中默认的。</li><li>gson，Google，安卓上使用较多。</li><li>fastjson，Alibaba。</li></ol><h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><blockquote><p>将对象转为 JSON 以及将 JSON 转为对象</p></blockquote><p>JSON 处理的核心工具。</p><p>SpringMVC 中使用 JSON 实际上是两个方面：</p><ul><li>返回值，返回 JSON</li><li>请求的参数是一个 JSON</li></ul><p>如果是返回值，接口定义的时候，直接返回的是对象，所以需要有一个工具，把我们返回的对象转为 JSON，这个工具就是 HttpMessageConverter。</p><p>如果是请求参数，那么 JSON 一般是放在请求体中，我们需要一个工具，将请求体中的 JSON 字符串转为一个对象。</p><p>HttpMessageConverter 本身是一个接口，是一个规范。具体怎么做，要看不同的 JSON 处理工具。</p><p>如果使用的是 jackson 或者 gson，那么默认情况下，SpringMVC 会自动帮我们配置对应的 HttpMessageConverter，但是如果你使用的是 fastjson，则需要你自己手动配置。</p><h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.14.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上的细节</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><code>@JsonProperty(&quot;name&quot;)</code></p><p>表示 username 这个属性将来生成的 json 的 key 为 name</p></li><li><p><code>@JsonIgnore</code></p><p>生成 JSON 或者将 JSON 字符串转为对象的时候，忽略该字段</p></li><li><p><code>@JsonFormat</code></p><p>注意，日期格式化的时候，需要指定时区</p><p>不过如果我的日期类使用频率很高，我希望它可以自动进行转换，可以在<code>spring-servlet.xml</code>文件中设置转换器。</p><p>注意别导错包了<code>MappingJackson2HttpMessageConverter</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>httpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.fasterxml.jackson.databind.ObjectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateFormat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.text.SimpleDateFormat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 将转换器设置到DispatcherServlet中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>conversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 修改annotation-driven，设置消息转换 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>httpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请求体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@RequestBody表示将请求体映射到User对象上</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserPost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>    <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"陕西省"</span><span class="token punctuation">,</span>    <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2023-02-19 17:51:39"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hengxing"</span><span class="token punctuation">,</span>    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"1214"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将此作为参数发送，控制台输出：</p><p><code>User&#123;id=22, username=&#39;hengxing&#39;, address=&#39;陕西省&#39;, password=&#39;null&#39;, birthday=Sun Feb 19 17:51:39 CST 2023&#125;</code></p><p>可以看到name参数传递成功，说明这些注解是双向生效的，password为空，说明已经被省略。</p><h3 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.code.gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>gson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是与jackson不同的是，gson不能通过注解对数据进行修饰，只能全局配置。</p><p>例如我们要配置日期格式的转码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 将转换器设置到DispatcherServlet中 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.GsonHttpMessageConverter<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.GsonFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateFormatPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>默认需要配置日期格式和编码，以及支持的json格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--fastjson配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>messageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fastJsonConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.fastjson.support.config.FastJsonConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dateFormat<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy-MM-dd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>charset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sun.nio.cs.UTF_8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>application/json;charset=utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会发现日期是时间戳格式，解决办法是在日期属性上添加注解，并且可以把<code>&lt;property name=&quot;dateFormat&quot; value=&quot;yyyy-MM-dd&quot;/&gt;</code>删掉</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>format <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h1><p>问题：由于我们在配置 DispatcherServlet 的时候，路径拦截规则是 &#x2F; 表示拦截所有的请求，当然也包括静态资源请求。但是，静态资源请求不归 DispatcherServlet 处理。</p><ol><li><p>不要使用 &#x2F; 拦截所有请求（不推荐）。</p><ol><li><p>首先拦截规则修改一下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所有的接口定义，都必须以 .action 结尾：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/book.action"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">getBookByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setPublishDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>提供一个默认的静态资源处理器。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--默认的处理器现在，所有的静态资源请求也会被拦截下来交给 DispatcherServlet 去处理，然而 DispatcherServlet 处理不了静态资源请求，当 DispatcherServlet 中的 Handler 处理不了这个请求的时候，那么就交给 DefaultHandler 去处理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置静态资源放行策略</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mapping 就是请求路径location 就是静态资源的位置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 其中使用到的路径匹配来自于一种风格</p><blockquote><h5 id="Ant-风格的路径匹配符"><a href="#Ant-风格的路径匹配符" class="headerlink" title="Ant 风格的路径匹配符"></a>Ant 风格的路径匹配符</h5><p><code>?</code>：代表单个字符<br><code>*</code>：代表一个具体的文件<br><code>**</code>：代表 N 层路径+一个文件</p></blockquote><p>最终的访问方式，就是将<code>**</code>所代表的字符，追加到 location 的后面</p><p>例如我访问<code>localhost:8080/html/01.html</code>，文件实际路径为<code>/WEB-INF/static/html/01.html</code>，就可以匹配到。但是如果你访问<code>localhost:8080/static/html/01.html</code>，实际拼接出的路径就变成了<code>/WEB-INF/static/static/html/01.html</code></p></li></ol><h1 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h1><ol><li><p>实现 HandlerExceptionResolver 接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义类实现 HandlerExceptionResolver 接口，这个专门用来处理处理器中的异常 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalException</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 当处理器在执行的时候，抛出异常，那么就会进入到这个方法     * @param request     * @param response     * @param handler 这个就是当前的处理器本身     * @param ex 异常     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过 @ControllerAdvice 来标记一个全局异常处理类，这种方式更灵活，可以返回视图也可以返回 JSON，可以服务端跳转，也可以客户端跳转。。。：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ControllerAdvice 表示当前类是一个增强版的 Controller * 所以，这个类中方法的定义，就跟 Controller 中方法的定义一模一样 */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyGlobalException2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这个异常处理方法的返回值，和接口中方法定义的规则一模一样     *     * @return     * @ExceptionHandler(ArithmeticException.class) 注解表示当发生 ArithmeticException 异常的时候，就进入到当前方法中     */</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">arithmeticException</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置异常和视图之间的对应关系即可：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--配置异常和视图的一一对应关系--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.NullPointerException<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>两种不同的方案：</p><ul><li>兼容老版本的 Tomcat（主要是指 Tomcat7 之前的版本），这种文件上传需要加一个依赖 common-fileupload。</li><li>从 Tomcat7 开始，默认也可以处理文件上传，这种不用加依赖。</li></ul><p>在 SpringMVC 中，也是两种文件上传方案：</p><ul><li>CommonsMultipartResolver</li><li>StandardServletMultipartResolver</li></ul><p>使用第二种方案做文件上传：</p><ol><li><p>配置文件上传的临时目录等信息：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>multipart-config</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--文件上传的临时目录，这个目录不会自动创建，所以要给一个已经存在的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>D:\workspace\temp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--上传文件的最大大小--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max-file-size</span><span class="token punctuation">></span></span>1024000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max-file-size</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--上传请求的最大大小，一个请求中可能包含多个上传文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>max-request-size</span><span class="token punctuation">></span></span>10240000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>max-request-size</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--上传文件的临界值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file-size-threshold</span><span class="token punctuation">></span></span>1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file-size-threshold</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>multipart-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供一个文件上传的解析器：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--这里只需要配置一个 Bean 即可，不需要额外提供任何属性但是，这里的 id 必须是 multipartResolver，不能是其他名字，也不能没有名字--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.support.StandardServletMultipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开发文件上传接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"/yyyy/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * OSS 对象存储服务     * @return     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1. 先确定文件保存路径</span>        <span class="token comment">//获取项目运行路径</span>        <span class="token class-name">String</span> realPath <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//文件保存的文件夹</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> realPath <span class="token operator">+</span> format<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s = "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>folder<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//文件夹不存在就创建出来</span>            folder<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2. 确定保存的文件名</span>        <span class="token comment">//获取原始的文件名</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取上传文件的后缀</span>        <span class="token class-name">String</span> suffix <span class="token operator">=</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newName <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffix<span class="token punctuation">;</span>        <span class="token comment">// 3. 保存文件</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>folder<span class="token punctuation">,</span> newName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4. 返回文件上传路径</span>            <span class="token keyword">return</span> req<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取请求协议  http</span>                    <span class="token operator">+</span> <span class="token string">"://"</span>                    <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取项目域名 localhost</span>                    <span class="token operator">+</span> <span class="token string">":"</span>                    <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取项目端口 8080</span>                    <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取项目名称 mvc05</span>                    <span class="token operator">+</span> <span class="token string">"/img"</span>                    <span class="token operator">+</span> format                    <span class="token operator">+</span> newName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="Servlet-中的下载方案："><a href="#Servlet-中的下载方案：" class="headerlink" title="Servlet 中的下载方案："></a>Servlet 中的下载方案：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// try-with-resources</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download/&#123;filename&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//加上这样一个响应头，就从文件访问变为文件下载了</span>    resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content-disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span>                <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">ISO_8859_1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取文件的输入流</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\baize\\Pictures\\weixin\\"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringMVC-中的下载方案"><a href="#SpringMVC-中的下载方案" class="headerlink" title="SpringMVC 中的下载方案:"></a>SpringMVC 中的下载方案:</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download3/&#123;filename&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">download3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//构建一个输出流，这个输出流将数据写出到 byte 数组中</span>    <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\baize\\Pictures\\weixin\\"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//1. 响应给前端的 byte 数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 响应头</span>    <span class="token class-name">HttpHeaders</span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    header<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. http 响应状态码</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> header<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>类似于过滤器。</p><p>过滤器先执行，拦截器后执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义拦截器，类似于一种 AOP 风格的过滤器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 这个是在处理器执行之前执行     * @param handler 这个就是处理器，也就是接下来要执行的接口方法     * @return 如果这个方法返回 false，那么请求就被拦截下来了，处理器将不再执行；请求如果返回 true，则当前请求继续向下走，处理器最终被执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 处理器执行之后会触发该方法     * @param modelAndView 这个就是处理器执行完成之后，返回的 ModelAndView     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 页面渲染完成之后，会触发的方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置拦截器到mvc中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--拦截器的拦截路径--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--拦截器的 Bean--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.demo.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SSM搭建"><a href="#SSM搭建" class="headerlink" title="SSM搭建"></a>SSM搭建</h1><h2 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.hengxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>SSM<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        无论是否需要jdbcTemplet都需要jdbc依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        mybatis做数据查询--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        mybatis和spring直接连接--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        数据库连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        mysql数据连接的底层实现--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        json处理--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.14.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定Java版本--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Double</span> money<span class="token punctuation">;</span>    <span class="token comment">//getter、setter、toString方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mapper</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountMapper</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Mapper类实现</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.mapper.AccountMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAllAccount<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.model.Account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from account;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Service层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AccountMapper</span> accountMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getAllAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accountMapper<span class="token punctuation">.</span><span class="token function">getAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Controller层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AccountService</span> accountService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/acc"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Account</span><span class="token punctuation">></span></span> <span class="token function">getall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> accountService<span class="token punctuation">.</span><span class="token function">getAllAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件部分</p><ol><li><p>数据库配置<code>db.properties</code></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">db.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///test?serverTimezone=Asia/Shanghai</span><span class="token key attr-name">db.maxWait</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span><span class="token key attr-name">db.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token key attr-name">db.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span class="token key attr-name">db.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这是 Spring 的配置文件</p><blockquote><p>项目中，实际上包含两个不同的容器，Spring 容器和 SpringMVC 容器，Spring 容器是父容器，SpringMVC 容器是子容器，子容器中可以访问父容器中的 Bean，但是父容器无法访问到子容器中的 Bean。</p><p>Controller 因为是在 DispatcherServlet 中使用的，所以 Controller 必须在 SpringMVC 容器中扫描</p><p>一般来说，SpringMVC 中主要配置和视图相关的，例如控制器，视图解析器、参数解析等等。</p><p>Spring 容器则主要配置业务相关的 Service、Mapper、事务、数据源。。。</p></blockquote> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--扫描 com.qfedu.demo 包下的所有 bean，但是排除掉 Controller --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>exclude-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--数据库配置及连接池配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--     整合 MyBatis 两个步骤：     1. 提供一个 SqlSessionFactoryBean     2. 提供 mapper 扫描器     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--给所有实体类取别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--注意 ，classpath* 表示扫描指定目录下的所有满足条件的文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath*:com/hengxing/demo/mapper/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--mapper 扫描器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>springMVC配置<code>spring-servlet.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    这是 SpringMVC 的配置文件    --></span>    <span class="token comment">&lt;!--只扫描 Controller--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>web.xml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--首先加载 Spring 配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--当系统启动的时候，会触发这个监听器，在这个监听器中，会自动加载上面配置的配置文件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SSMservlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SSMservlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>另外，maven在编译时只会把resources文件夹下的配置文件编译进去，我们需要把mapper的xml配置文件让其一并编译</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>json中出现乱码，是spring没有按照json的方式编码添加编码信息即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在你新建response时把header放进去，标识json</span><span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"&#123;\"status\": 200,\"msg\": \"删除成功\"&#125;"</span><span class="token punctuation">,</span>headers<span class="token punctuation">,</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前后端分离的例子"><a href="#前后端分离的例子" class="headerlink" title="前后端分离的例子"></a>前后端分离的例子</h2><h3 id="前端接收数据，直接写页面"><a href="#前端接收数据，直接写页面" class="headerlink" title="前端接收数据，直接写页面"></a>前端接收数据，直接写页面</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>账户详情页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../jquery-3.6.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">loadAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/accounts'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> table <span class="token operator">=</span> <span class="token string">"&lt;table border='1'>"</span><span class="token punctuation">;</span>                table <span class="token operator">+=</span> <span class="token string">'&lt;tr>&lt;td>账户id&lt;/td>&lt;td>账户持有人&lt;/td>&lt;td>余额&lt;/td>&lt;/tr>'</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">account</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    table <span class="token operator">+=</span> <span class="token string">'&lt;tr>&lt;td>'</span>                        <span class="token operator">+</span> account<span class="token punctuation">.</span>id <span class="token operator">+</span><span class="token string">'&lt;/td>&lt;td>'</span>                        <span class="token operator">+</span> account<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;td>'</span>                        <span class="token operator">+</span> account<span class="token punctuation">.</span>money <span class="token operator">+</span> <span class="token string">'&lt;/td>&lt;/tr>'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                table <span class="token operator">+=</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#accounts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">loadAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端返回渲染好的表格"><a href="#后端返回渲染好的表格" class="headerlink" title="后端返回渲染好的表格"></a>后端返回渲染好的表格</h3><p>添加Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 这个接口方法相当于 加了 @ResponseBody 注解* 加了注解，这个方法的返回值就是一个 HTML 字符串。* 跟不加注解的区别：* 1. 加了注解，那么系统会自动将结果渲染成一个 HTML 字符串，然后返回给前端。* 2. 没加注解，那么底层的实现本质上是一个服务端跳转（请求转发）。*/</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/table"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">getAllTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"accounts"</span><span class="token punctuation">,</span>accountService<span class="token punctuation">.</span><span class="token function">getAllAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加jsp,注意这里的jstl需要导入依赖</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;table border&#x3D;&quot;1&quot;&gt;    &lt;tr&gt;        &lt;td&gt;账户id&lt;&#x2F;td&gt;        &lt;td&gt;账户持有人&lt;&#x2F;td&gt;        &lt;td&gt;余额&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;c:forEach items&#x3D;&quot;$&#123;accounts&#125;&quot; var&#x3D;&quot;account&quot;&gt;        &lt;tr&gt;            &lt;td&gt;$&#123;account.id&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;account.name&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;account.money&#125;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;&#x2F;c:forEach&gt;&lt;&#x2F;table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改前端代码为</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>账户详情页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../jquery-3.6.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">loadAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/table'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#accounts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">loadAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完善添加删除功能"><a href="#完善添加删除功能" class="headerlink" title="完善添加删除功能"></a>完善添加删除功能</h3><p>在不用修改代码的情况下，直接就可以执行操作</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;div&gt;    &lt;p&gt;账户持有人：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot;&gt;&lt;&#x2F;p&gt;    &lt;p&gt;余额：&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;money&quot;&gt;&lt;&#x2F;p&gt;    &lt;p&gt;&lt;button onclick&#x3D;&quot;addAccount()&quot;&gt;添加&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;hr&#x2F;&gt;&lt;table border&#x3D;&quot;1&quot;&gt;    &lt;tr&gt;        &lt;td&gt;账户id&lt;&#x2F;td&gt;        &lt;td&gt;账户持有人&lt;&#x2F;td&gt;        &lt;td&gt;余额&lt;&#x2F;td&gt;        &lt;td&gt;操作&lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;    &lt;c:forEach items&#x3D;&quot;$&#123;accounts&#125;&quot; var&#x3D;&quot;account&quot;&gt;        &lt;tr&gt;            &lt;td&gt;$&#123;account.id&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;account.name&#125;&lt;&#x2F;td&gt;            &lt;td&gt;$&#123;account.money&#125;&lt;&#x2F;td&gt;            &lt;td&gt;&lt;button onclick&#x3D;&quot;deleteAccountById($&#123;account.id&#125;)&quot;&gt;删除&lt;&#x2F;button&gt;&lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &lt;&#x2F;c:forEach&gt;&lt;&#x2F;table&gt;&lt;script&gt;    function deleteAccountById(id) &#123;        $.ajax(&#123;            url:&#39;&#x2F;account&#x2F;&#39; + id,            type:&#39;delete&#39;,            success:function (data) &#123;                if (data.status &#x3D;&#x3D; 200) &#123;                    &#x2F;&#x2F;说明删除成功                    loadAccounts();                &#125;            &#125;        &#125;)    &#125;    function addAccount() &#123;        let username &#x3D; $(&quot;#username&quot;).val();        let money &#x3D; $(&quot;#money&quot;).val();        let data &#x3D; &#123;            name: username,            money: money        &#125;        $.ajax(&#123;            url: &#39;&#x2F;account&#39;,            type: &#39;post&#39;,            contentType:&#39;application&#x2F;json;charset&#x3D;utf-8&#39;,            data: JSON.stringify(data),            success: function (data) &#123;                if (data.status &#x3D; 200) &#123;                    &#x2F;&#x2F;添加成功                    loadAccounts();                    $(&quot;#username&quot;).val(&#39;&#39;);                    $(&quot;#money&quot;).val(&#39;&#39;);                &#125;            &#125;        &#125;)    &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面预览</p><img src="https://s2.loli.net/2023/02/22/Ol1ySvoAPhBqeM3.png" alt="页面预览" style="zoom: 33%;" /><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li><p><code>@Service</code>注解失效，系统报<code>No qualifying bean of type ‘springmvc.crud.service.XxxService&#39; available: expected at least 1 bean which qualifies as autowire candidate</code></p><p>原因是spring配置文件里面<code>context:exclude-filter</code>是<code>use-default-filters=&quot;true&quot;</code>，而<code>context:include-filter</code>是false，默认值就是false，不写即可。</p><p>也就是说，spring容器为默认容器，不加载Controller。而servlet容器不使用默认容器，加载Controller</p><p>或者可以从idea中看出，如果我们写错了，idea是不会在Service左边添加Bean符号的，写对之后会加上去。</p><img src="https://s2.loli.net/2023/02/21/kRzj3NxPZEgOiA6.png" alt="image-20230221200833223" style="zoom:50%;" /></li><li><p>mysql测试连接报错：<code>Unknown system variable &#39;language&#39; 未知名的系统变量语言</code></p><p><code>mysql-connector-java</code>版本太高，降低版本即可，我降级的版本为<code>5.1.30</code></p></li></ol><blockquote><h4 id="在idea中编辑字符串json"><a href="#在idea中编辑字符串json" class="headerlink" title="在idea中编辑字符串json"></a>在idea中编辑字符串json</h4><p>先按alt + enter，选择插入语言或参考</p><img src="https://s2.loli.net/2023/02/21/AHpiWuZoGXsf4qM.png" alt="alt_enter" style="zoom:67%;" /><p>选择json</p><p><img src="https://s2.loli.net/2023/02/21/at47kYD3UhRbVZS.png" alt="选择json"></p><p>选择插入json片段</p><img src="https://s2.loli.net/2023/02/21/ykMb9x3lYcX51Vt.png" alt="插入json片段" style="zoom:50%;" /><p>在新的编辑界面中编辑json</p><p><img src="https://s2.loli.net/2023/02/21/cxq3KJovGOzybuf.png" alt="编辑json"></p></blockquote><h1 id="Java代码配置SpringMVC"><a href="#Java代码配置SpringMVC" class="headerlink" title="Java代码配置SpringMVC"></a>Java代码配置SpringMVC</h1><p>纯java代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这个是 Spring 配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.hengxing.demo"</span><span class="token punctuation">,</span>        excludeFilters <span class="token operator">=</span> <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">,</span>        classes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springMVC配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这个是 SpringMVC 配置 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">//扫描 Controller 注解</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.hengxing.demo"</span><span class="token punctuation">,</span>        useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        includeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span>                <span class="token punctuation">,</span>classes <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//这个相当于 annotation-driven</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMVCConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现WebApplicationInitializer接口，相当于 web.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这个类的作用，相当于 web.xml */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebInit</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 当系统启动的时候，会自动执行这个方法，我们可以在这个方法中，完成容器的初始化     * @param servletContext 使用到了servlet的包，导入依赖     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个 Spring 容器 //注意是web的，别写错，有个包很相似</span>        <span class="token class-name">AnnotationConfigWebApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 servlet 容器设置给 Spring 容器</span>        context<span class="token punctuation">.</span><span class="token function">setServletContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//让 Spring 容器去加载两个 Spring 相关的配置</span>        context<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">SpringMVCConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> springMVC <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"springMVC"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置 DispatcherServlet 的拦截规则</span>        springMVC<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他部分和xml搭建没什么两样，只是配置文件的位置变了而已</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="jsp无法访问的问题"><a href="#jsp无法访问的问题" class="headerlink" title="jsp无法访问的问题"></a>jsp无法访问的问题</h2><p>有时通过Controller进行jsp跳转，但是服务器报404：<code>源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。</code></p><p>服务器控制台报：<code>No mapping for GET /MVCDemoDaily/book</code></p><p>你需要知道以下知识</p><p>serlvet如何匹配收到的服务请求：</p><ol><li>路径精确匹配</li><li>最长路径匹配</li><li>扩展匹配</li></ol><p>如果容器定义了一个default servelt（即匹配路径为<code>/</code>的servlet），则会将请求交给default servlet</p><blockquote><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p><code>/*.action</code>:错误的匹配规则，不能即是路径匹配，也是扩展匹配</p></blockquote><p>spring mvc中<code>dispatcherServlet</code>配置为<code>/*</code>访问请求转发<code>*.jsp</code>和访问jsp页面的时候访问不到的原因：</p><p>默认在<code>%TOMCAT_HOME%/conf/web.xml</code>中配置了<code>*.jsp</code>由<code>JspServelt</code>来处理，当我们将spring mvc的拦截规则配置为<code>/*</code>的时候，&#x3D;&#x3D;按照servlet的匹配规则，则路径匹配会优先于扩展匹配,导致对jsp的请求会被拦截掉。&#x3D;&#x3D;</p><p>当spring mvc配置为<code>/</code>，会匹配到<code>/login</code>这样的路径型url，不会匹配到模式为<code>*.jsp</code>这样的后缀型url</p><p>当我们请求jsp时，刚好有从<code>%TOMCAT_HOME%/conf/web.xml</code>中继承过来的<code>JspServlet</code>会处理对jsp请求的处理，所以会访问到jsp页面。<br>————————————————<br>原文链接：<a href="https://blog.csdn.net/yu870646595/article/details/51595147">https://blog.csdn.net/yu870646595/article/details/51595147</a></p><h2 id="springMVC项目访问404遇到的坑"><a href="#springMVC项目访问404遇到的坑" class="headerlink" title="springMVC项目访问404遇到的坑"></a>springMVC项目访问404遇到的坑</h2><p>项目一切都部署搞好了，可是就是无法访问，如果报上图信息，资源无法访问，显示jsp路径，那极有可能就是路径配置不对。</p><ol><li><p>项目controller层加了类映射注解，但是spring-mvc.xml文件配置视图解析器的时候，路径写的是这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这是无法访问的，可去掉类映射注解，或者修改配置文件前缀为<code>value=&quot;/WEB-INF/view/&quot;</code>，前面加<code>/</code></p><h2 id="RequestMapping默认的处理方法"><a href="#RequestMapping默认的处理方法" class="headerlink" title="RequestMapping默认的处理方法"></a>RequestMapping默认的处理方法</h2><p>不写就行了，不要画蛇添足。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token class-name">String</span>    <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"This is a default method for the class"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://blog.csdn.net/demo_yo/article/details/123608034">@RequestMapping 注解使用技巧（完整详解）</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2023/02/16/code/Java/spring/Spring%E4%BA%8B%E5%8A%A1/"/>
      <url>/2023/02/16/code/Java/spring/Spring%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/16/N8E1LGTUnYVdmPk.jpg" alt="世界最美海角"></p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务的重要性不言而喻，Spring 对事务也提供了非常丰富的支持，各种支持的属性应有尽有。</p><p>然而很多小伙伴知道，这里有两个属性特别绕：</p><ul><li>隔离性</li><li>传播性</li></ul><h2 id="事务是什么"><a href="#事务是什么" class="headerlink" title="事务是什么"></a>事务是什么</h2><p>数据库事务是指作为单个逻辑工作单元执行的一系列操作，这些操作要么一起成功，要么一起失败，是一个不可分割的工作单元。<br>在我们日常工作中，涉及到事务的场景非常多，一个 service 中往往需要调用不同的 dao 层方法，这些方法要么同时成功要么同时失败，我们需要在 service 层确保这一点。</p><p>说到事务最典型的案例就是转账了：</p><blockquote><p>张三要给李四转账 500 块钱，这⾥涉及到两个操作，从张三的账户上减去 500 块钱，给李四的账户添加 500 块钱，这两个操作要么同时成功要么同时失败，如何确保他们同时成功或者同时失败呢？答案就是事务。</p></blockquote><p>事务有四大特性（ACID）：</p><p><img src="https://s2.loli.net/2023/02/16/uhQT5ZH4cYzvA7K.png" alt="image-20230216171523256"></p><ul><li>&#x3D;&#x3D;原子性（Atomicity）&#x3D;&#x3D;： 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</li><li>&#x3D;&#x3D;一致性（Consistency）&#x3D;&#x3D;： 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</li><li>&#x3D;&#x3D;一致性（Consistency）&#x3D;&#x3D;： 在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</li><li>&#x3D;&#x3D;持久性（Durability）&#x3D;&#x3D;: 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>这就是事务的四大特性。</p><h2 id="Spring-中的事务"><a href="#Spring-中的事务" class="headerlink" title="Spring 中的事务"></a>Spring 中的事务</h2><p>Spring 作为 Java 开发中的基础设施，对于事务也提供了很好的支持，总体上来说，Spring 支持两种类型的事务，声明式事务和编程式事务。</p><p>编程式事务类似于 Jdbc 事务的写法，需要将事务的代码嵌入到业务逻辑中，这样代码的耦合度较高，而声明式事务通过 AOP 的思想能够有效的将事务和业务逻辑代码解耦，因此在实际开发中，声明式事务得到了广泛的应用，而编程式事务则较少使用。</p><p>Spring 中对事务的支持提供了三大基础设施，我们先来了解下。</p><ul><li><code>PlatformTransactionManager</code></li><li><code>TransactionDefinition</code></li><li><code>TransactionStatus</code></li></ul><p>具体分析请看源码，或详细解析的讲解，本文只做记录。</p><h2 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h2><p>通过<code>PlatformTransactionManager</code>或者<code>TransactionTemplate</code>可以实现编程式事务。如果是在 Spring Boot 项目中，这两个对象 Spring Boot 会自动提供，我们直接使用即可。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--连接池配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dao层代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set money=money+? where name=?"</span><span class="token punctuation">,</span> money<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">minusMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set money=money-? where name=?"</span><span class="token punctuation">,</span>money<span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Service层代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dao</span><span class="token punctuation">.</span><span class="token class-name">UserDao</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">PlatformTransactionManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">TransactionStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">DefaultTransactionDefinition</span></span><span class="token punctuation">;</span><span class="token comment">/** * @projectName: tx_demo01 * @package: com.hengxing.demo.Service * @className: UserService * @author: HengxingStu * @description: 服务层 * @date: 2/16/2023 4:16 PM * @version: 1.0 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>    <span class="token comment">//注意我们这里是使用接口去接收的，以后如果换实现类，只需要在xml文件中修改就行了</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//定义一个事务</span>        <span class="token class-name">DefaultTransactionDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取事务状态</span>        <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启事务</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            userDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>try-catch</code>中进行业务操作，没问题就 commit，有问题就 rollback。如果我们需要配置事务的隔离性、传播性等，可以在<code>DefaultTransactionDefinition</code>对象中进行配置。</p><p>上面的代码是通过<code>PlatformTransactionManager</code>实现的编程式事务，我们也可以通过<code>TransactionTemplate</code>来实现编程式事务，如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--TransactionTemplate 注册--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                    userDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                    userDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//成功后无需提交</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置回滚</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接注入 <code>TransactionTemplate</code>，然后在<code>execute()</code>方法中添加回调写核心的业务即可，当抛出异常时，将当前事务标注为只能回滚即可。注意，<code>execute()</code>方法中，如果不需要获取事务执行的结果，则直接使用 <code>TransactionCallbackWithoutResult</code>类即可，如果要获取事务执行结果，则使用<br><code>TransactionCallback</code>即可。</p><blockquote><h3 id="不常用的"><a href="#不常用的" class="headerlink" title="不常用的"></a>不常用的</h3><p>编程式事务由于代码入侵太严重了，因为在实际开发中使用的很少，我们在项目中更多的是使用声明式事务。</p></blockquote><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><p>声明式事务如果使用  XML  配置，可以做到无侵入；如果使用  Java  配置，也只有一个<code>@Transactional</code>注解侵入而已，相对来说非常容易。</p><p>以下配置针对传统 SSM 项目（因为在 Spring Boot 项目中，事务相关的组件已经配置好了）：</p><h3 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h3><p>XML 配置声明式事务大致上可以分为三个步骤，如下：</p><ol><li><p>配置数据源</p><p>配置dataSource</p></li><li><p>配置事务管理器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置事务通知</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--表示以transfer开头的方法要添加事务--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transfer*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意不是cache的那个</p><img src="https://s2.loli.net/2023/02/16/eXlsaj4dco5DmOg.png" alt="事务通知" style="zoom:50%;" /></li><li><p>配置 AOP</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--aop配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.hengxing.demo.Service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意依赖的添加，由于声明式事务用到了切面，所以需要添加aop的依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--aop切面相关--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Java文件配置"><a href="#Java文件配置" class="headerlink" title="Java文件配置"></a>Java文件配置</h3><p>使用 Java 代码来配置事务，即将 applicationContext.xml 用 Java 类代替</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:db.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.hengxing.demo.part2"</span><span class="token punctuation">)</span><span class="token comment">//这个表示开启事务注解，将来需要添加事务的地方，直接添加事务注解即可</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//读取配置文件的数据</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.username&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.password&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.url&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> url<span class="token punctuation">;</span><span class="token comment">//配置数据源</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DruidDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置jdbcTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">JdbcTemplate</span> <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//配置事务管理器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSourceTransactionManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要配置的东西其实和 XML 中配置的都差不多，最最关键的就两个：</p><ul><li>事务管理器<code>PlatformTransactionManager</code>。</li><li><code>@EnableTransactionManagement</code>注解开启事务支持。</li></ul><p>事务通知和aop的切面配置在代码中直接完成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        accountDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然这个稍微有点代码入侵，不过问题不大，&#x3D;&#x3D;日常开发中这种方式使用较多&#x3D;&#x3D;。</p><blockquote><h5 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h5><p>当<code>@Transactional</code>注解加在类上面的时候，表示该类的所有方法都有事务，该注解加在方法上面的时候，表示该方法有事务。</p></blockquote><h3 id="混合式配置"><a href="#混合式配置" class="headerlink" title="混合式配置"></a>混合式配置</h3><p>也可以 Java 代码和 XML 混合配置来实现声明式事务，就是一部分配置用 XML 来实现，一部分配置用 Java 代码来实现：</p><p>声明事务管理器、dataSource等两种方式选其一即可。我在这里使用的是用xml配置事务管理器、dataSource等，只使用<code>@Transactional</code>注解确定切面。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.part3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置事务管理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    这行配置的作用，类似于 @EnableTransactionManagement 注解的作用，表示开启事务注解    以后，哪个方法需要加事务，只需要添加 @Transactional 注解即可    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后确定切面即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">AccountDao</span> accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferMoney</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        accountDao<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><h3 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h3><p>MySQL 中事务的隔离级别一共分为四种，分别如下：</p><ul><li>序列化（SERIALIZABLE）</li><li>可重复读（REPEATABLE READ）</li><li>提交读（READ COMMITTED）</li><li>未提交读（READ UNCOMMITTED）</li></ul><p>四种不同的隔离级别含义分别如下：</p><ol><li>SERIALIZABLE</li></ol><blockquote><p>如果隔离级别为序列化，则用户之间通过一个接一个顺序地执行当前的事务，这种隔离级别提供了事务之间最大限度的隔离。</p></blockquote><ol start="2"><li>REPEATABLE READ</li></ol><blockquote><p>在可重复读在这一隔离级别上，事务不会被看成是一个序列。不过，当前正在执行事务的变化仍然不能被外部看到，也就是说，如果用户在另外一个事务中执行同条 SELECT 语句数次，结果总是相同的。（因为正在执行的事务所产生的数据变化不能被外部看到）。</p></blockquote><ol start="3"><li>READ COMMITTED</li></ol><blockquote><p>READ COMMITTED 隔离级别的安全性比 REPEATABLE READ 隔离级别的安全性要差。处于 READ COMMITTED 级别的事务可以看到其他事务对数据的修改。也就是说，在事务处理期间，如果其他事务修改了相应的表，那么同一个事务的多个 SELECT 语句可能返回不同的结果。</p></blockquote><ol start="4"><li>READ UNCOMMITTED</li></ol><blockquote><p>READ UNCOMMITTED 提供了事务之间最小限度的隔离。除了容易产生虚幻的读操作和不能重复的读操作外，处于这个隔离级的事务可以读到其他事务还没有提交的数据，如果这个事务使用其他事务不提交的变化作为计算的基础，然后那些未提交的变化被它们的父事务撤销，这就导致了大量的数据变化。</p></blockquote><p>  在 MySQL 数据库中，默认的事务隔离级别是 REPEATABLE READ</p><table><thead><tr><th>隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻象读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td align="center">有</td><td align="center">有</td><td align="center">有</td></tr><tr><td>READ COMMITED</td><td align="center">无</td><td align="center">有</td><td align="center">有</td></tr><tr><td>REPEATABLE READ</td><td align="center">无</td><td align="center">无</td><td align="center">有</td></tr><tr><td>SERIALIZABLE</td><td align="center">无</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><p>具体请看专门讲解事务隔离的文章</p><h3 id="事务传播性"><a href="#事务传播性" class="headerlink" title="事务传播性"></a>事务传播性</h3><p>当 A 方法调用 B 方法的时候，会涉及到传播性，&#x3D;&#x3D;传播性是设置给 B 方法的&#x3D;&#x3D;。</p><h4 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h4><p>默认传播性即此。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个事务</span>Creating new transaction with name <span class="token punctuation">[</span>com.qfedu.demo.p4.service.AService.a<span class="token punctuation">]</span>: PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="token punctuation">&#123;</span>dataSource-1<span class="token punctuation">&#125;</span> inited<span class="token comment"># 获取一个 JDBC 连接开始操作</span>Acquired Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@56bca85b<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transaction<span class="token comment"># 切换事务提交为手动方式</span>Switching JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@56bca85b<span class="token punctuation">]</span> to manual commit<span class="token comment"># 开始执行 A 中的数据库操作</span>Executing prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money-? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment"># 将 B 方法加入到 A 方法所开启的事务中</span>Participating <span class="token keyword">in</span> existing transactionExecuting prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money+? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span>Initiating transaction commit<span class="token comment"># 提交事务</span>Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@56bca85b<span class="token punctuation">]</span>Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@56bca85b<span class="token punctuation">]</span> after transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>从头到尾，只有一个事务，B 方法会加入到已有的事务中。</li><li>既然 A 和 B 处于同一个事务中，那么要是 B 方法中，发生了回滚，会触发整体回滚（其实 A和 B本身就是一个整体）。</li></ol><h4 id="REQUIRES-NEW"><a href="#REQUIRES-NEW" class="headerlink" title="REQUIRES_NEW"></a>REQUIRES_NEW</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给 A 创建事务</span>Creating new transaction with name <span class="token punctuation">[</span>com.qfedu.demo.p4.service.AService.a<span class="token punctuation">]</span>: PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="token punctuation">&#123;</span>dataSource-1<span class="token punctuation">&#125;</span> inited<span class="token comment"># 获取数据库连接</span>Acquired Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@58359ebd<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transactionSwitching JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@58359ebd<span class="token punctuation">]</span> to manual commitExecuting prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money-? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment"># 挂起当前的事务，为 B 方法创建一个新的事务</span>Suspending current transaction, creating new transaction with name <span class="token punctuation">[</span>com.qfedu.demo.p4.service.BService.b<span class="token punctuation">]</span><span class="token comment"># 获取连接执行 B 方法，注意，此时获取到的数据库连接和 A 方法中的数据库连接不是同一个</span>Acquired Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@295eaa7c<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transactionSwitching JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@295eaa7c<span class="token punctuation">]</span> to manual commitExecuting prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money+? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span>Initiating transaction commit<span class="token comment"># 提交事务，根据数据库连接，可以看出来这里提交的是 B 方法的事务</span>Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@295eaa7c<span class="token punctuation">]</span>Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@295eaa7c<span class="token punctuation">]</span> after transaction<span class="token comment"># 当 B 方法的事务提交成功之后，恢复 A 方法中挂起的事务</span>Resuming suspended transaction after completion of inner transactionInitiating transaction commit<span class="token comment"># 提交 A 方法的事务</span>Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@58359ebd<span class="token punctuation">]</span>Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@58359ebd<span class="token punctuation">]</span> after transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>无论 A 方法本身有没有事务，B 方法都会开启一个新的事务。</li><li>A 中的事务和 B 中的事务，是两个事务。</li><li>B 中的事务提交或者回滚不影响 A。</li><li>A 中的事务提交或者回滚也不影响 B。</li></ol><blockquote><p>这个地⽅⼩伙伴们要稍微注意⼀下，我们测试的时候，由于是两个更新 SQL，如果更新的查询字段不是索引字段，那么 InnoDB 将使⽤表锁，这样就会发⽣死锁（B⽅法执⾏时开启表锁，导致 A⽅法陷⼊等待中，⽽必须 A⽅法执⾏完，B才能释放锁）。所以，在上⾯的测试中，我们要将 username 字段设置为索引字段，这样默认就使⽤⾏锁了。</p></blockquote><p><img src="https://s2.loli.net/2023/02/17/coFUtaRZqNymQhw.png" alt="image-20230217145245211"></p><h4 id="NESTED"><a href="#NESTED" class="headerlink" title="NESTED"></a>NESTED</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 A 方法的事务</span>Creating new transaction with name <span class="token punctuation">[</span>com.qfedu.demo.p4.service.AService.a<span class="token punctuation">]</span>: PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="token punctuation">&#123;</span>dataSource-1<span class="token punctuation">&#125;</span> initedAcquired Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@75e91545<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transactionSwitching JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@75e91545<span class="token punctuation">]</span> to manual commitExecuting prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money-? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token comment"># 创建一个嵌套的内部事务</span>Creating nested transaction with name <span class="token punctuation">[</span>com.qfedu.demo.p4.service.BService.b<span class="token punctuation">]</span>Executing prepared SQL updateExecuting prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money+? where <span class="token assign-left variable">username</span><span class="token operator">=</span>?<span class="token punctuation">;</span><span class="token punctuation">]</span>Releasing transaction savepointInitiating transaction commitCommitting JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@75e91545<span class="token punctuation">]</span>Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.cj.jdbc.ConnectionImpl@75e91545<span class="token punctuation">]</span> after transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先，A 和 B 中只有一个连接，虽然看起来有两个事务，但实际上是一个事务和他的子事务，其中，A 方法中的事务，是父事务，B 方法中的事务是子事务。</li><li>B 方法如果回滚，不会影响 A 方法，但是 A 方法要是回滚了，B 方法也会回滚。</li></ol><h4 id="MANDATORY"><a href="#MANDATORY" class="headerlink" title="MANDATORY"></a>MANDATORY</h4><p>MANDATORY 表示如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</p><p>举两个例子：</p><ol><li><p>假设 A方法有事务，B方法也有事务且传播性为MANDATORY，那么最终执行的事务日志如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Creating new transaction with name <span class="token punctuation">[</span>com.hengxing.demo.part4.Service.AService.a<span class="token punctuation">]</span>: PROPAGATION_REQUIRED,ISOLATION_DEFAULT INFO <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token punctuation">&#123;</span>dataSource-1<span class="token punctuation">&#125;</span> initedDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Acquired Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@16610890<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transactionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Switching JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@16610890<span class="token punctuation">]</span> to manual commitDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL updateDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money - ? where name <span class="token operator">=</span> ?<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Participating <span class="token keyword">in</span> existing transactionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL updateDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money + ? where name <span class="token operator">=</span> ?<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Initiating transaction commitDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@16610890<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@16610890<span class="token punctuation">]</span> after transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这段日志可以看出：</p><ol><li>首先给 A方法开启事务。</li><li>执行 B方法的 SQL。</li><li>B方法加入到已经存在的事务中。</li><li>执行 B方法的 SQL。</li><li>提交事务。</li></ol></li><li><p>假设 A方法无事务，B方法有事务且传播性为 MANDATORY，那么最终执行时会抛出如下异常：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> org.springframework.transaction.IllegalTransactionStateException: No existing transaction found <span class="token keyword">for</span> transaction marked with propagation <span class="token string">'mandatory'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于没有已经存在的事务，所以出错了。</p></li></ol><h4 id="SUPPORTS"><a href="#SUPPORTS" class="headerlink" title="SUPPORTS"></a>SUPPORTS</h4><p>SUPPORTS 表示如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</p><p>不做演示，用屁股就能想明白。</p><h4 id="NOT-SUPPORTED"><a href="#NOT-SUPPORTED" class="headerlink" title="NOT_SUPPORTED"></a>NOT_SUPPORTED</h4><p>不管你有没有事务，我就是不用事务。拽～</p><p>这里需要注意的是，如果A方法是有事务的，那B在执行前会先把A挂起</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建事务</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Creating new transaction with name <span class="token punctuation">[</span>com.hengxing.demo.part4.Service.AService.a<span class="token punctuation">]</span>: PROPAGATION_REQUIRED,ISOLATION_DEFAULT INFO <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token punctuation">&#123;</span>dataSource-1<span class="token punctuation">&#125;</span> initedDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Acquired Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@156b88f5<span class="token punctuation">]</span> <span class="token keyword">for</span> JDBC transactionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Switching JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@156b88f5<span class="token punctuation">]</span> to manual commitDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL updateDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money - ? where name <span class="token operator">=</span> ?<span class="token punctuation">]</span><span class="token comment">#B挂起事务，以普通方法执行</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Suspending current transactionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL updateDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Executing prepared SQL statement <span class="token punctuation">[</span>update account <span class="token builtin class-name">set</span> money <span class="token operator">=</span> money + ? where name <span class="token operator">=</span> ?<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Fetching JDBC Connection from DataSource<span class="token comment">#执行完后，恢复A事务</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Resuming suspended transaction after completion of inner transactionDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Initiating transaction commitDEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@156b88f5<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@156b88f5<span class="token punctuation">]</span> after transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NEVER"><a href="#NEVER" class="headerlink" title="NEVER"></a>NEVER</h4><blockquote><p>憋跟我扯别的，就是不能有事务。</p></blockquote><p>NEVER 表示以非事务方式运行，如果当前存在事务，则抛出异常。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> org.springframework.transaction.IllegalTransactionStateException: Existing transaction found <span class="token keyword">for</span> transaction marked with propagation <span class="token string">'never'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="回滚规则"><a href="#回滚规则" class="headerlink" title="回滚规则"></a>回滚规则</h3><p>默认情况下，事务只有遇到运行期异常（<code>RuntimeException</code>的子类）以及 Error 时才会回滚，在遇到检查型（<code>Checked Exception</code>）异常时不会回滚。</p><p>像 1&#x2F;0，空指针这些是<code>RuntimeException</code>，而<code>IOException</code>则算是<code>Checked Exception</code>，换言之，默认情况下，如果发生<code>IOException</code>并不会导致事务回滚。</p><p>如果我们希望发生<code>IOException</code>时也能触发事务回滚，那么可以按照如下方式配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>    accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileInputStream</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.io.IOException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，我们也可以指定在发生某些异常时不回滚，例如当系统抛出 <code>ArithmeticException</code>异常并不要触发事务回滚，配置方式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>noRollbackFor <span class="token operator">=</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    bService<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会看到，虽然发生异常了，但事务仍然被提交：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Committing JDBC transaction on Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@71def8f8<span class="token punctuation">]</span>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - Releasing JDBC Connection <span class="token punctuation">[</span>com.mysql.jdbc.JDBC4Connection@71def8f8<span class="token punctuation">]</span> after transactionException <span class="token keyword">in</span> thread <span class="token string">"main"</span> java.lang.ArithmeticException: / by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="是否只读"><a href="#是否只读" class="headerlink" title="是否只读"></a>是否只读</h3><p>只读事务一般设置在查询方法上，但不是所有的查询方法都需要只读事务，要看具体情况。</p><p>一般来说，如果这个业务方法只有一个查询 SQL，那么就没必要添加事务，强行添加最终效果适得其反。</p><p>但是如果一个业务方法中有多个查询 SQL，情况就不一样了：多个查询 SQL，默认情况下，每个查询 SQL 都会开启一个独立的事务，这样，如果有并发操作修改了数据，那么多个查询 SQL 就会查到不一样的数据。此时，如果我们开启事务，并设置为只读事务，那么多个查询 SQL 将被置于同一个事务中，多条相同的 SQL 在该事务中执行将会获取到相同的查询结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><p>超时时间是说一个事务允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。</p><p>事务超时时间配置方式如下(&#x3D;&#x3D;单位为秒&#x3D;&#x3D;)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token class-name">String</span> from<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    accountDao<span class="token punctuation">.</span><span class="token function">minusMoney</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li><p>事务只能应用到 public 方法上才会有效。</p></li><li><p>事务需要从外部调用，&#x3D;&#x3D;Spring 自调事务用会失效&#x3D;&#x3D;。即相同类里边，A 方法没有事务，B 方法有事务，A 方法调用 B 方法，则 B 方法的事务会失效，这点尤其要注意，因为代理模式只拦截通过代理传入的外部方法调用，所以自调用事务是不生效的。</p><blockquote><h3 id="为什么事务会失效"><a href="#为什么事务会失效" class="headerlink" title="为什么事务会失效"></a>为什么事务会失效</h3><p>通过DeBug我们可以看到，我们拿到的Bean的类型是：</p><p><code>com.hengxing.demo.part4.Service.AService@774698ab</code></p><p>它是一个通过Spring增强的实现类，并不是<code>AService</code>本身。如果这时候你在代码中直接调用方法，相当于<code>this.method()</code>这时候调用的就是<code>AService</code>本身了，当然没有被代理。</p></blockquote></li><li><p>建议事务注解<code>@Transactional</code>一般添加在实现类上，而不要定义在接口上，如果加在接口类或接口方法上时，只有配置基于接口的代理这个注解才会生效。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAOP笔记</title>
      <link href="/2023/02/15/code/Java/spring/SpringAop%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/15/code/Java/spring/SpringAop%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>面向切面编程。</p><p>在项目运行的时候，在不改变已有代码的情况下，自动的向方法中添加新的功能。</p><p>AOP 的本质实际上就是动态代理。</p><p>Java 代理：</p><ul><li>静态代理</li><li>动态代理：<ul><li>JDK</li><li>CGLIB</li></ul></li></ul><p>JDK 动态代理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1. JDK 动态代理 * - 代理的工具，都是 JDK 自己提供的，不需要额外的 jar * - JDK 只能代理有接口的类，没有接口的类，是代理不了的 * 2. CGLIB 动态代理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个计算器对象</span>        <span class="token keyword">final</span> <span class="token class-name">CaculatorImpl</span> caculatorImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CaculatorImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个代理对象，需要三个参数，分别是</span>        <span class="token comment">//1.类加载器</span>        <span class="token comment">//2.这个方法返回的是一个代理对象，第二参数是指这个返回的代理对象实现了哪个接口</span>        <span class="token comment">//3.代理对象的处理器</span>        <span class="token class-name">Caculator</span> caculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Caculator</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">MainDemo01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Caculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**             * 具体的代理逻辑             * @param proxy 这个参数实际上就是自动生成的代理对象本身             * @param method 这个就是生成的代理对象中的方法             * @param args 对象需要的参数             * @return 把结果返回             */</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> invoke<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//如果是加法在执行</span>                    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>caculatorImpl<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>caculatorImpl<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行代理方法</span>        caculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caculator<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>Proxy.newProxyInstance</code> 方法的返回值，必须用接口来接收，不能用 <code>CalculatorImpl</code> 来接收。本质上，<code>Proxy.newProxyInstance</code> 的作用，相当于自动帮你生成了一个类，自动生成的类，实现了 <code>Calculator</code> 接口，所以这个方法的返回值是 Calculator 接口的实例，但不是 <code>CalculatorImpl</code> 的实例。</li></ol><p>动态代理生成的类，大概是这个样子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$<span class="token class-name">Proxy0</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//利用反射执行 CalculatorImpl 对象的 add 方法</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印执行时间</span>        <span class="token comment">//返回第二步的执行结果</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>切点（pointcut）：要增加代码的地方，一般是在某个方法执行前后加入目标代码，这个方法的位置，就是切点。</li><li>通知&#x2F;增强（advice）：要添加的代码，称之为 advice。</li><li>切面：（aspect）：切点+通知。</li></ul><p><strong>AOP底层就是动态代理，而动态代理有两种实现方式，在 Spring 中，默认情况下，如果被代理的对象有接口，则动态代理使用 JDK 动态代理，如果被代理的对象没有接口，则被代理的对象使用 CGLIB 动态代理。</strong></p><h3 id="XML-配置-AOP"><a href="#XML-配置-AOP" class="headerlink" title="XML 配置 AOP"></a>XML 配置 AOP</h3><h4 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h4><p>首先定义一个计算器类，这个类没有接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorImpl</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义通知&#x2F;增强：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这是通知/增强 * &lt;p> * AOP 中存在五种通知： * 1. 前置通知：在目标方法执行之前主执行 * 2. 后置通知：在目标方法执行之后执行 * 3. 异常通知：当目标方法抛出异常的时候执行 * 4. 返回通知：当目标方法返回值的时候执行 * 5. 环绕通知：集大成者，上面四种都包含在这个里边 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAdvice</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 前置通知     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取目标方法名称</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"开始执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 后置通知     *     * @param jp     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法执行结束了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 异常通知     *      * 当目标方法抛出异常的时候，这个方法会执行     *     * 注意异常的参数，只有目标方法抛出的异常，是这个异常参数或者它的子类的时候，才会进入到这个方法中     *      *     * 这个异常通知的原理，相当于目标方法用 try-catch 裹起来     *      * try&#123;     *   method.invoke(xxxx)     * &#125;catch(NullPointerException e)&#123;     *      * &#125;     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法抛出 "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 返回通知，目标方法返回值和这里参数类型匹配的时候，这个方法会被触发     *      * 注意，返回值为 void，对应的类型为 Void，而 Void 是 Object 的子类，所以，这里如果用 Object 去接收返回类型，那么返回值为 void 的方法也会进入到返回通知中     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法返回了 "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 环绕通知     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这行代码就类似于 method.invoke 方法</span>            <span class="token comment">//当执行这行代码的时候，目标方法才会被真正的执行</span>            <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//注意这个地方有返回值</span>            <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XML 中配置 AOP：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.demo.p1.service.CalculatorImpl<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calculator<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.qfedu.demo.p1.LogAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        id 表示切点的名称        expression：表示切点的定义，第一个 * 表示方法返回值任意（这个位置也可以给定一个具体的返回类型）        第二个 * 表示 service 下的所有类        第三个 * 表示 任意方法        .. 表示参数任意（参数可有可无，如果有，参数类型也是任意的）        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.qfedu.demo.p1.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--ref 表示通知的 Bean--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--定义前置通知--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>throwing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>returning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后加载 Spring 容器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注意这里返回的对象，是 Spring 容器根据 Calculator 接口自动生成的一个实现类的对象</span>        <span class="token comment">//是一个代理的对象</span>        <span class="token class-name">CalculatorImpl</span> calculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CalculatorImpl</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"calculator.getClass() = "</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        calculator.add(3, 4);</span>        calculator<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这个地方虽然我们用 <code>CalculatorImpl</code> 类型接收的 Spring 容器中的 Bean，但实际上返回的对象并不是 <code>CalculatorImpl</code> 本身，而是它的子类的实例，此时使用的动态代理是 CGLIB动态代理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">calculator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>qfedu<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>p1<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>CalculatorImpl</span>$$<span class="token class-name">EnhancerBySpringCGLIB</span>$$<span class="token number">9e71</span>c934<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><p>改两个地方，就可以变为 JDK 动态代理：</p><ol><li><p>首先给 CalculatorImpl 添加一个接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        int i = 1 / 0;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>加载容器的时候，使用 Calculator 去接收：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注意这里返回的对象，是 Spring 容器根据 Calculator 接口自动生成的一个实现类的对象</span>        <span class="token comment">//是一个代理的对象</span>        <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Calculator</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"calculator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"calculator.getClass() = "</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        calculator.add(3, 4);</span>        calculator<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>此时，由于被代理的对象有接口，所以就会使用 JDK 动态代理。</p><p>打印的日志如下：</p><pre class="line-numbers language-none"><code class="language-none">calculator.getClass() &#x3D; class com.sun.proxy.$Proxy5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当被代理的对象有接口的时候，通过修改 XML 中的配置，也可以实现使用 CGLIB 动态代理：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    id 表示切点的名称    expression：表示切点的定义，第一个 * 表示方法返回值任意（这个位置也可以给定一个具体的返回类型）    第二个 * 表示 service 下的所有类    第三个 * 表示 任意方法    .. 表示参数任意（参数可有可无，如果有，参数类型也是任意的）    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.qfedu.demo.p1.service.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--ref 表示通知的 Bean--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--定义前置通知--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>throwing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>returning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pc1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>proxy-target-class=&quot;true&quot;</code></strong> 通过修改该属性，可以在有接口的情况下，也使用 CGLIB 动态代理。</p><h3 id="Java-代码配置-AOP"><a href="#Java-代码配置-AOP" class="headerlink" title="Java 代码配置 AOP"></a>Java 代码配置 AOP</h3><p>直接定义一个切面即可，切面中包含了切点和通知：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * LogAspect 这是一个切面，切面包含两部分：切点和通知 * &lt;p> * AOP 中存在五种通知： * 1. 前置通知：在目标方法执行之前主执行 * 2. 后置通知：在目标方法执行之后执行 * 3. 异常通知：当目标方法抛出异常的时候执行 * 4. 返回通知：当目标方法返回值的时候执行 * 5. 环绕通知：集大成者，上面四种都包含在这个里边 * * @Aspect 就表示当前类是一个切面 * @EnableAspectJAutoProxy 表示开启自动代理 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 统一定义切点     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.qfedu.demo.p2.service.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 前置通知     * @Before 方法表示这是一个前置通知     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pc()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取目标方法名称</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"开始执行了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 后置通知     *     * @param jp     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pc()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法执行结束了..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 异常通知     * &lt;p>     * 当目标方法抛出异常的时候，这个方法会执行     * &lt;p>     * 注意异常的参数，只有目标方法抛出的异常，是这个异常参数或者它的子类的时候，才会进入到这个方法中     * &lt;p>     * &lt;p>     * &lt;p>     * 这个异常通知的原理，相当于目标方法用 try-catch 裹起来     * &lt;p>     * try&#123;     * &lt;p>     * method.invoke(xxxx)     * &#125;catch(NullPointerException e)&#123;     * &lt;p>     * &#125;     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pc()"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">throwing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法抛出 "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 返回通知，目标方法返回值和这里参数类型匹配的时候，这个方法会被触发     * &lt;p>     * 注意，返回值为 void，对应的类型为 Void，而 Void 是 Object 的子类，所以，这里如果用 Object 去接收返回类型，那么返回值为 void 的方法也会进入到返回通知中     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pc()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 方法返回了 "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 环绕通知     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pc()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//这行代码就类似于 method.invoke 方法</span>            <span class="token comment">//当执行这行代码的时候，目标方法才会被真正的执行</span>            <span class="token class-name">Object</span> proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//注意这个地方有返回值</span>            <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外需要注意，将被代理 Bean 要注册到 Spring 容器中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在配置类中，统一扫描到被代理的对象以及切面：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.qfedu.demo.p2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p>修改项目依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring常用依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Spring JDBC --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 阿里数据库连接池 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- jdbc 连接器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.32<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 避免source release 8 requires target release 1.8 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoding</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>db.properties</code>文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">db.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///test?serverTimezone=Asia/Shanghai</span><span class="token key attr-name">db.maxWait</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span><span class="token key attr-name">db.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token key attr-name">db.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span class="token key attr-name">db.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span>   <span class="token comment">//getter\setter\toString\constructor</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>applicationContext.xml</code>中注册到Spring中去</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--加载数据库文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--配置数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动，获取<code>JdbcTemplate</code>对象，执行查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JdbcTemplate</span> jdbcTemplate <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以执行简单的增删改，用的都是</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into users (id,name,password) values (?,?,?);"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"唐可可"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//也可以查询对象</span>        <span class="token comment">//BeanPropertyRowMapper 能够自动地将查询结果映射到User类上</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select * from users where id=?;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查询所有对象</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from users;"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2023/02/12/code/Java/spring/Spring%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/12/code/Java/spring/Spring%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/12/ukqiYOMfcU4WwCJ.jpg" alt="alexander-grey-62vi3TG5EDg-unsplash"></p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><hr><h3 id="1-1-原生web开发中存在哪些问题？"><a href="#1-1-原生web开发中存在哪些问题？" class="headerlink" title="1.1 原生web开发中存在哪些问题？"></a>1.1 原生web开发中存在哪些问题？</h3><blockquote><ul><li><p>传统Web开发存在硬编码所造成的过度程序耦合（例如：Service中作为属性Dao对象）。</p></li><li><p>部分Java EE API较为复杂，使用效率低（例如：JDBC开发步骤）。</p></li><li><p>侵入性强，移植性差（例如：DAO实现的更换，从Connection到SqlSession）。</p></li></ul></blockquote><h2 id="二、Spring框架"><a href="#二、Spring框架" class="headerlink" title="二、Spring框架"></a>二、Spring框架</h2><hr><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><blockquote><ul><li><p>Spring是一个项目管理框架，同时也是一套Java EE解决方案。</p></li><li><p>Spring是众多优秀设计模式的组合（工厂、单例、代理、适配器、包装器、观察者、模板、策略）。</p></li><li><p>Spring并未替代现有框架产品，而是将众多框架进行有机整合，简化企业级开发，俗称”胶水框架”。</p></li></ul></blockquote><h3 id="2-2-访问与下载"><a href="#2-2-访问与下载" class="headerlink" title="2.2 访问与下载"></a>2.2 访问与下载</h3><blockquote><p>官方网站：<a href="https://spring.io/">https://spring.io/</a></p><p>下载地址：<a href="http://repo.spring.io/release/org/springframework/spring/">http://repo.spring.io/release/org/springframework/spring/</a></p></blockquote><h3 id="2-3-Spring架构组成"><a href="#2-3-Spring架构组成" class="headerlink" title="2.3 Spring架构组成"></a>2.3 Spring架构组成</h3><hr><blockquote><p>Spring架构由诸多模块组成，可分类为</p><ul><li>核心技术：**<a href="">依赖注入</a><strong>，事件，资源，i18n，验证，数据绑定，类型转换，SpEL，</strong><a href="">AOP</a>**。</li><li>测试：模拟对象，TestContext框架，Spring MVC测试，WebTestClient。</li><li>数据访问：<a href="">事务</a>，DAO支持，JDBC，ORM，封送XML。</li><li>Spring MVC和 Spring WebFlux Web框架。</li><li>集成：远程处理，JMS，JCA，JMX，电子邮件，任务，调度，缓存。</li><li>语言：Kotlin，Groovy，动态语言。</li></ul></blockquote><table><thead><tr><th align="center">Spring架构组成</th></tr></thead><tbody><tr><td align="center"><img src="https://s2.loli.net/2023/02/12/ljFpkoDQZytXWI9.png" alt="001"></td></tr></tbody></table><table><thead><tr><th><strong>GroupId</strong></th><th><strong>ArtifactId</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>org.springframework</td><td><a href="">spring-beans</a></td><td><a href="">Beans 支持，包含 Groovy</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-aop</a></td><td><a href="">基于代理的AOP支持</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-aspects</a></td><td><a href="">基于AspectJ 的切面</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-context</a></td><td><a href="">应用上下文运行时，包括调度和远程抽象</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-context-support</a></td><td><a href="">支持将常见的第三方类库集成到 Spring 应用上下文</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-core</a></td><td><a href="">其他模块所依赖的核心模块</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-expression</a></td><td><a href="">Spring 表达式语言，SpEL</a></td></tr><tr><td>org.springframework</td><td>spring-instrument</td><td>JVM 引导的仪表（监测器）代理</td></tr><tr><td>org.springframework</td><td>spring-instrument-tomcat</td><td>Tomcat 的仪表（监测器）代理</td></tr><tr><td>org.springframework</td><td>spring-jdbc</td><td>支持包括数据源设置和 JDBC 访问支持</td></tr><tr><td>org.springframework</td><td>spring-jms</td><td>支持包括发送&#x2F;接收JMS消息的助手类</td></tr><tr><td>org.springframework</td><td>spring-messaging</td><td>对消息架构和协议的支持</td></tr><tr><td>org.springframework</td><td>spring-orm</td><td>对象&#x2F;关系映射，包括对 JPA 和 Hibernate 的支持</td></tr><tr><td>org.springframework</td><td>spring-oxm</td><td>对象&#x2F;XML 映射（Object&#x2F;XML Mapping，OXM）</td></tr><tr><td>org.springframework</td><td><a href="">spring-test</a></td><td><a href="">单元测试和集成测试支持组件</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-tx</a></td><td><a href="">事务基础组件，包括对 DAO 的支持及 JCA 的集成</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-web</a></td><td><a href="">web支持包，包括客户端及web远程调用</a></td></tr><tr><td>org.springframework</td><td><a href="">spring-webmvc</a></td><td><a href="">REST web 服务及 web 应用的 MVC 实现</a></td></tr><tr><td>org.springframework</td><td>spring-webmvc-portlet</td><td>用于 Portlet 环境的MVC实现</td></tr><tr><td>org.springframework</td><td>spring-websocket</td><td>WebSocket 和 SockJS 实现，包括对 STOMP 的支持</td></tr><tr><td>org.springframework</td><td><a href="">spring-jcl</a></td><td><a href="">Jakarta Commons Logging 日志系统</a></td></tr></tbody></table><h2 id="三、Spring容器注册Bean"><a href="#三、Spring容器注册Bean" class="headerlink" title="三、Spring容器注册Bean"></a>三、Spring容器注册Bean</h2><h3 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h3><ol><li><p>pom.xml中引入Spring常用依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>         <span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0           http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.hengxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- Spring常用依赖 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建Spring配置文件</p><blockquote><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>命名无限制，约定俗成命名有：spring-context.xml、applicationContext.xml、beans.xml</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello gays!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建启动类或称工厂类，所谓工厂就是替你创建对象的工厂。如果你了解工厂设计模式，理解它应该不难。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestFactory</span><span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 程序中的对象都交由Spring的ApplicationContext工厂进行创建。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1. 读取配置文件中所需创建的bean对象，并获得工厂对象</span>        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-context.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 通过id获取bean对象</span><span class="token class-name">MyClass</span> mc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"mc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 使用对象</span>mc<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我自己的启动类内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里只需要写配置文件的文件名即可，系统会自动去 classpath 下查找配置文件</span><span class="token comment">//这个就是加载 Spring 容器，只要 Spring 容器启动了，那么配置文件中的所有 Bean 就会完成初始化</span><span class="token class-name">ClassPathXmlApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据名字去查找一个 user 对象，这个方法返回一个 Object，需要进行类型转换</span><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去查找 User 类型的对象</span><span class="token comment">//这种方式有一个缺陷：Spring 容器中如果存在多个 User 对象，那么这个方法执行就会报错</span><span class="token class-name">User</span> u2 <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//告诉 Spring 容器，查找一个名为 user 的 bean，并且类型是 User</span><span class="token class-name">User</span> u3 <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u3<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ClassPathXmlApplicationContext</span> xac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> xac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h3><p>Exception in thread “main” org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named ‘name2’ available</p><p>找不到名为name2的可用bean</p></blockquote><h3 id="Bean注册的细节"><a href="#Bean注册的细节" class="headerlink" title="Bean注册的细节"></a>Bean注册的细节</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>DI（Dependency Injection）依赖注入【<code>重点</code>】</p><blockquote><p>在Spring创建对象的同时，为其属性赋值，称之为依赖注入。</p></blockquote><h4 id="属性注入方式"><a href="#属性注入方式" class="headerlink" title="属性注入方式"></a>属性注入方式</h4><p>三种属性注入方式：</p><ul><li>构造方法注入</li><li>set 方法注入（推荐）</li><li>p名称空间注入（本质上还是 set 方法注入）</li></ul><p>各种注入属性：</p><ul><li>基本数据类型，直接使用标签的 value 属性注入</li></ul><p>首先需要实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//getter、setter和toSting()等</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>构造注入【了解】</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>《傲慢与偏见》<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>奥斯丁<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Set注入</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"book3"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.hengxing.Model.Book"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"id"</span> value<span class="token operator">=</span><span class="token string">"002"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"figure out why"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"author"</span> value<span class="token operator">=</span><span class="token string">"hengixng"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>p名称空间注入（本质上还是 set 方法注入）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>//首先要添加p标签的属性，将其声明为一个标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Book<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>003<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;anc><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>author</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hengxing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>//通过p标签注入属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在启动类中获取对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> xac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext2.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book1 <span class="token operator">=</span> xac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认无参构造</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book2 <span class="token operator">=</span> xac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book2"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造注入</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book3 <span class="token operator">=</span> xac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book3"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Set注入</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Book</span> book4 <span class="token operator">=</span> xac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book4"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p名称空间注入</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Book&#123;id=null, name='null', author='null'&#125;Book&#123;id=1, name='《傲慢与偏见》', author='克里斯'&#125;Book&#123;id=2, name='figure out why', author='hengixng'&#125;Book&#123;id=3, name='anc', author='hengxing'&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对象<ul><li>外部定义好一个对象，然后通过 ref 引用对象</li><li>直接在需要的地方通过 bean 标签定义一个对象（局限性，定义好的 bean 无法复用）</li></ul></li><li>List 集合：list</li><li>数组：array</li><li>Map：map</li><li>Properties ：props</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>momo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>momo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>White<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>001<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hengxing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M78星云<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>momo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        用 set 方法给 cat 赋值的时候，有两种方式：        Cat cat = new Cat();        setCat(cat);//使用提前定义好的对象        setCat(new Cat());//现场定义一个匿名对象        ref 表示这里的值是引用了一个提前定义好的 cat 对象        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>football<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>basketball<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cats<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>momo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nana<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Cat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>002<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nana<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--            list 标签表示数据类型是一个 List            如果 list 中存放的数据是字符串，那么这里就直接使用 value            如果 list 中存放的数据库是对象，那么可以使用 ref 去引用外部的 对象，也可以使用 bean 标签现场定义 Bean            --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>//数组要使用array                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>003<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>木偶奇遇记<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>刘心武<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.Book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>004<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>枪械保养手册<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>albert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--            map 的定义            --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>柳州工学院<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>柳州市新柳大道99号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3 id="Warning-注意属性名"><a href="#Warning-注意属性名" class="headerlink" title="Warning 注意属性名"></a>Warning 注意属性名</h3><p>内省。</p><p>对于框架而言，并不是看对象定义的属性叫什么名字，而是根据对象的<code>get/set</code>方法来推断属性名称。无论是Mybatis、Spring、SpringMVC、所有框架，只要用到反射都是这样的。</p><p>所以，定义<code>get/set</code>方法的时候，不要写错，另一方面，变量的命名要复合规范。</p></blockquote><h3 id="Java代码配置Spring"><a href="#Java代码配置Spring" class="headerlink" title="Java代码配置Spring"></a>Java代码配置Spring</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * java配置类，它的作用类似于applicationContext.xml * @Configuration 表示这是一个配置类 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @Bean 就表示将当前方法的返回值注册到Spring容器中     * 默认情况下，方法名就是bean的名字     * 如果要自定义名字，就在注解中配置@Bean("你的名字")     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">)</span>    <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你的启动类也需要一点点改变，创建<code>AnnotationConfigApplicationContext</code>对象来接收参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">JavaConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//User&#123;id=1, name='琪亚娜'&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="参数自动注入"><a href="#参数自动注入" class="headerlink" title="参数自动注入"></a>参数自动注入</h4><p>现在我们在配置类中注册Bean，注意这里的book有一项属性为author类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @Bean 就表示将当前方法的返回值注册到Spring容器中     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Author</span> <span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"太宰治"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        author<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> author<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"book1"</span><span class="token punctuation">)</span>    <span class="token class-name">Book</span> <span class="token function">book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"人间失格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在这里直接调用bean的注册方法</span>        <span class="token keyword">return</span> book<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种情况下，book1的作者是之前创造的author，还是重新创造了一个？我们一试便知。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnnotationConfigApplicationContext</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">JavaConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Book</span> book1 <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"book1"</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Book&#123;id=1, name='人间失格', author=Author&#123;name='太宰治', age=23&#125;&#125;</span>    <span class="token class-name">Author</span> author <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token class-name">Author</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Author&#123;name='太宰治', age=23&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"book1.getAuthor() == author : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>book1<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//book1.getAuthor() == author : true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明author对象是一致的</p><ul><li><p><code>@Configuration</code>：这个注解表示当前类是一个配置类，那么当前类中，所有添加了<code>@Bean</code>注解的方法都会被注册到Spring容器中，如果有其他方法调用到一个添加了<code>@Bean</code>注解的方法，那么不会立马执行对应的方法，而是先去Spring容器中查看是否有对应的对象。如果有，则直接从容器中获取，没有的话才会执行对应的方法。</p></li><li><p><code>@Component</code>虽然也可以加载配置类上，但是，如果有其他方法掉哟共到一个添加了<code>@Bean</code>注解的方法，那么不会去检查是否有相应对象了，而是直接执行对应方法。</p><p>上面的情况换成<code>@Component</code>最终的结果就是<code>false</code></p><p>如果一定要使用<code>@Component</code>，可以通过依赖注入来代替方法调用，修改注册book1的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"book1"</span><span class="token punctuation">)</span><span class="token class-name">Book</span> <span class="token function">book</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//将author作为形参传入</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"人间失格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> book<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>所以我们在配置类中一般不用<code>@Component</code></p><h4 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h4><p>条件注解的作用是告诉Spring在某些条件下再执行某些操作。</p><p>我们来实现一个功能，当系统检测到当前系统是Windows，系统就输出dir，是Linux时就输出ls。</p><blockquote><h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><p>通过Spring提供的Condition接口中的match方法，可以获得系统的参数，再利用<code>@Condition</code>当返回确定是某个系统的信息后注册对应的Bean，并返回信息。</p></blockquote><p>先写一个接口，确定输出系统信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ShowCmd</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现对应两个系统的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//win</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsShowCmd</span> <span class="token keyword">implements</span> <span class="token class-name">ShowCmd</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"dir"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//linux</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinuxShowCmd</span> <span class="token keyword">implements</span> <span class="token class-name">ShowCmd</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过Spring提供的接口获取系统信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token comment">//注意这里的接口是Spring中的Condition</span><span class="token comment">//win</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取当前操作系统的名字</span>        <span class="token class-name">String</span> property <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> property<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//linux</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinuxCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> property <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> property<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置类中注册对应bean，使用<code>@Conditional(LinuxCondition.class)</code>，当这个类的<code>matches()</code>方法返回<code>true</code>，这个bean就会被注册，反之不会。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 向 Spring 容器中注册一个 Bean     *     * @Conditional(WindowsCondition.class) 就是一个条件注解，如果里边的类的 matches 方法返回 true，就表示条件满足，这个 bean 就会注册到 Spring 容器中，如果返回 false，那么这个 Bean 就不会注册到 Spring 容器中。     */</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">LinuxCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">ShowCmd</span> <span class="token function">linuxCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span>  <span class="token class-name">LinuxShowCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">WindowsCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">ShowCmd</span> <span class="token class-name">WinCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsShowCmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们通过启动类检测一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">AnnotationConfigApplicationContext</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">JavaConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ShowCmd</span> cmd <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ShowCmd</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">cmd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dir我当前是Windows系统</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功了</p><h4 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h4><h5 id="通过Java代码实现"><a href="#通过Java代码实现" class="headerlink" title="通过Java代码实现"></a>通过Java代码实现</h5><p>比如生产环境和开发环境间切换</p><p>我们设置一个数据库的信息类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">//getter、setter等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置类中，我们分别设置生产和开发两个Bean。通过<code>@Profile(&quot;dev&quot;)</code>注解可以指定当前Bean在哪个环境下生效</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DataSource</span> <span class="token function">devDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"localhost:3306:///test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DataSource</span> <span class="token function">prodDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"tt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"12.12.12.12:3306:///prod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以去获取，注意先不要写配置类，要先设置环境信息。设置好后再填入配置类，刷新。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//注意先不要写配置类，要先设置环境信息</span>    <span class="token class-name">AnnotationConfigApplicationContext</span> acc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置当前的环境信息</span>    acc<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addActiveProfile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置当前环境为dev，这里的dev就是profile中设置的</span>    acc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">JavaConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    acc<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dataSource = "</span> <span class="token operator">+</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//dataSource = DataSource&#123;name='hengxing', password='123123', url='localhost:3306:///test1'&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring是怎么实现的？</p><p>我们来看<code>Profile</code>注解的代码，里面有一个属性，注意它的意思可不是一个方法，而是一个键值对，键为value，值为一个String类型的数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">ProfileCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Profile</span> <span class="token punctuation">&#123;</span>   <span class="token comment">/**    * The set of profiles for which the annotated component should be registered.    */</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ProfileCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attrs <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">Profile</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>attrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取键为value的属性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span><span class="token class-name">Profiles</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//判断当前环境中有没有value中的值。</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过Xml文件实现"><a href="#通过Xml文件实现" class="headerlink" title="通过Xml文件实现"></a>通过Xml文件实现</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token comment">&lt;!--写在这个beans中的，都是开发环境用的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:///test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token comment">&lt;!--写在这个beans中的，都是生产环境用的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jprod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1444<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:///prod<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和之前程序一样，只不过换了配置文件而已</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> cxa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cxa<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addActiveProfile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cxa<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cxa<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> bean <span class="token operator">=</span> cxa<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean = "</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件注入"><a href="#配置文件注入" class="headerlink" title="配置文件注入"></a>配置文件注入</h4><p>主要指properties文件的注入</p><p>我们先在resource中生成一个配置文件<code>db.properties</code></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">db.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token key attr-name">db.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">1234</span><span class="token key attr-name">db.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///db?serverTimezone=Asia/Shanghai</span><span class="token key attr-name">db.maxWait</span><span class="token punctuation">=</span><span class="token value attr-value">60000</span><span class="token key attr-name">db.initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">100</span><span class="token key attr-name">db.maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span class="token key attr-name">db.minIdle</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Java代码配置"><a href="#Java代码配置" class="headerlink" title="Java代码配置"></a>Java代码配置</h5><p><code>@PropertySource(&quot;classpath:db.properties&quot;) </code>当容器启动的时候，指定配置文件的位置，那么配置文件中的内容，就会被自动的注入到 Spring 容器中</p><p>与<code>@Value(&quot;$&#123;db.username&#125;&quot;)</code>结合使用。</p><blockquote><p><code>@Value</code>注解是Spring框架中的一个常用功能,其作用是通过注解将常量、配置文件中的值、其他bean的属性值注入到变量中，作为变量的初始值。</p><p>详细资料：<a href="https://juejin.cn/post/6998688624237625374#heading-8">关于Spring中@Value注解使用</a></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:db.properties"</span><span class="token punctuation">)</span><span class="token comment">//注入到 Spring 容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DSConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//跟 Spring 容器要一个字符串回来</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.username&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.password&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;db.url&#125;"</span><span class="token punctuation">)</span>    <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来通过Spring容器获取bean就行了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartWithJavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">DSConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> source <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"source = "</span> <span class="token operator">+</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//source = DataSource&#123;name='root', password='1234', url='jdbc:mysql:///db?serverTimezone=Asia/Shanghai'&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Xml文件配置"><a href="#Xml文件配置" class="headerlink" title="Xml文件配置"></a>Xml文件配置</h5><p>同样可以通过xml文件来注册</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    这个配置的作用类似于 @PropertySource，就是将配置文件注册到 Spring 容器中    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--    $&#123;db.url&#125; 表示引用 Spring 容器中，key 为 db.url 的变量    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.Model.DataSource<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;db.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取方式和之前一样，没太大变化，通过xml启动就行了</p><h3 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h3><p>之前注册Bean都是一个一个来的，效率太低了，有没有办法让它自动注册？</p><p>以一个典型的Servlet工程为例</p><img src="https://s2.loli.net/2023/02/13/5MrihfONF1T2UCZ.png" alt="典型的Servlet工程结构" style="zoom: 50%;" /><p>上图是它的工程结构，如果我们使用之前注册Bean的方法就太慢了，现在来演示如何让其自动注册</p><h4 id="Java代码配置包扫描"><a href="#Java代码配置包扫描" class="headerlink" title="Java代码配置包扫描"></a>Java代码配置包扫描</h4><p>整体上来说，有三个方面：</p><ol><li>将Bean注册到Spring容器中：<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>、<code>@Component</code></li><li>从Spring容器中要一个Bean回来。官方推荐的方式，是通过构造器来注入。</li><li>配置包扫描</li></ol><p>需要我们给需要注册的bean加上注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 将 UserDao 注册到 Spring 容器中，将来谁需要使用 UserDao，就直接跟 Spring 容器去查找即可 * * * @Repository：一般是加在 Dao 层 * @Service：一般是加在 Service 层 * @Controller：一般是加在控制层，也就是 servlet * @Component：身份不明的 Bean 注册到 Spring 容器中时，使用这个注解 * * 技术上来说，这四个注解并没有差异，即实际上除了 @Controller 之外，其他几个注解是可以混用的。 * * 实际开发中，不要混用 * */</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"陕西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又设计一个问题，如果有多个构造器怎么办？<code>@Autowired</code>注解可解决</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * UserService 想要使用 UserDao * 1. UserService 自己需要在 Spring 容器 * 2. 跟 Spring 容器去要一个 UserDao */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>    <span class="token comment">/**     * 官方推荐使用构造器注入。因为 UserService 要注册到 Spring 容器，要生成一个对象，必然就要调用它的构造方法，现在它只有这一个构造法方法，那么 Spring 容器只能通过这个构造方法来获取一个 UserService 的实例，那么 Spring 容器会自动去查找容器中是否有一个 UserDao 的实例，如果有，就作为这个方法的参数传入进来     * 如果有多个构造方法，那么可以通过 @Autowired 注解来告诉 Spring 容器，应该调用哪一个构造方法去初始化当前对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">getUserByUsername</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UserServlet</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置包扫描</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.hengxing.demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来正常启动即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">JavaConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserServlet</span> servlet <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> hengxing <span class="token operator">=</span> servlet<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hengxing<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日常使用较多的写法"><a href="#日常使用较多的写法" class="headerlink" title="日常使用较多的写法"></a>日常使用较多的写法</h4><p>与前面的步骤相比，主要是第二步不一样，其他都差不多</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @Autowired 表示根据类型去 Spring 容器中查找到相应的 Bean，并赋值给 userService 变量     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以注意到我们不需要写构造方法，或者也可以认为使用了默认的空参构造。在注册了Bean后，直接从容器中查找。那为什么我们使用这种方式？</p><p>来对比两者的区别：</p><ul><li><p>构造方法注入：</p><ul><li><p>官方考虑的是，这个类将来使用的时候，用户不一定是和Spring要，而有可能是自己new出来。</p><p>假如此时不止一个构造器，一个空参，一个有参。用户直接通过空参new一个UserServlet，那此时其中的userService变量就为null，并且用户没有办法给userService赋值，导致userService调用时空指针。</p><p>假如此时只有一个有参构造器，用户自己new的时候也需要传一个userService进去，就不会导致空指针了。</p></li><li><p>但是实际开发环境中，一个类的属性会特别多，导致其构造方法太长。所以一般不这样写。</p></li></ul></li><li><p>注解注入：</p><ul><li>简单便捷</li><li>如果用户使用不规范，自己new对象，就会有很多属性没有赋值。</li></ul></li></ul><h4 id="Xml配置包扫描"><a href="#Xml配置包扫描" class="headerlink" title="Xml配置包扫描"></a>Xml配置包扫描</h4><p>xml配置包扫描跟Java配置，区别在于第三步，即包扫描用xml配置。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--加上这句包扫描即可--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工厂Bean"><a href="#工厂Bean" class="headerlink" title="工厂Bean"></a>工厂Bean</h3><p>这主要是解决一些第三方的Bean，一些无法通过构造方法正常初始化、或者无法通过set方法正常为属性赋值的Bean，可以通过工厂Bean的方式将之注册到Spring容器中。</p><p>我们在项目中使用OkHttp做网络客户端，访问百度网页。这个包的依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.okhttp3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.14.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这个的作用，就是用来发送一个一个的请求</span>        <span class="token class-name">OkHttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置服务端的读取超时时间</span>                <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                <span class="token comment">//连接超时</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建一个具体的请求</span>        <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置请求方法是 get</span>                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置请求的 URL 地址</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Call</span> call <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//请求失败的回调</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//请求成功的回调</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Call</span> call<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//我们把网页打印出来就行</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码经过验证，可以访问。</p><p>它在实例化时必须设置好参数，并且不可以通过构造方法修改参数，只能在实例化时调用某些方法来设置。然而Spring容器却都是通过构造方法来注册Bean的，难道就用不了了吗？</p><p>并不是，我们可以通过工厂创造这样的对象。工厂又分两种，静态工厂和实例工厂。</p><h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><p>静态工厂中，工厂方法是一个静态方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OkHttpClient</span> okHttpClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">OkHttpClient</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>okHttpClient <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//设置服务端的读取超时时间</span>                    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                    <span class="token comment">//连接超时</span>                    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> okHttpClient<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>applicationContext.xml</code>中注册这个Bean，标识工厂方法。直接</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    标识工厂方法    这个 Bean，将来会自动调用 getInstance 方法，并将该方法的返回值注入到 Spring 容器中    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.OkHttpFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>这里将来注册到Spring容器中的Bean，不是class对应的类的对象，而是<code>getInstance()</code>方法返回的对象。</p></blockquote><h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>实例工厂就是一个实例化后的工厂，此时就不能使用静态方法的调用方式来注册了。必须要先有工厂对象，然后才能调用对应方法</p><p>这是工厂类的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpFactory01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> okHttpClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>okHttpClient <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment">//设置服务端的读取超时时间</span>                    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                    <span class="token comment">//连接超时</span>                    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> okHttpClient<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bean的注册：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--对于实例工厂方法，必须得先有一个工厂的实例，将来要通过这个实例才能调用工厂方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.demo.OkHttpFactory01<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory01<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--此时配置工厂的时候，既需要指定工厂的 Bean，也需要指定工厂方法--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>okhttp3.OkHttpClient<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory01<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getInstance<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>client2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来使用调用</p><h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><p>Spring推荐的使用方式。</p><blockquote><h4 id="编者按"><a href="#编者按" class="headerlink" title="编者按"></a>编者按</h4><p>这才是真正的常用方法，优雅~果然真正实用的方式就是简便</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OkHttpClient</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 返回对象的方法     */</span>    <span class="token keyword">public</span> <span class="token class-name">OkHttpClient</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//设置服务端的读取超时时间</span>                <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                <span class="token comment">//连接超时</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取对象的类型     */</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 是否为单例模式     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册进Spring容器中去</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">FactoryBean</span>的注册方法<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.hengxing.demo.OkHttpFactoryBean"</span> id<span class="token operator">=</span><span class="token string">"client3"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再通过Xml文件方式调用即可</p><blockquote><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>这种方式获取的是工厂注册好的Bean那如果我想要工厂Bean呢？</p><p>在<code>getBean()</code>时在id前添加<code>&amp;</code>符号即可，例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;client3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean.getClass() = "</span> <span class="token operator">+</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//bean.getClass() = class com.hengxing.demo.OkHttpFactoryBean</span>        <span class="token comment">//得到了工厂bean</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>默认情况下，注册到Spring容器中的Bean是单例的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.scope.Model.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不希望这个Bean是单例的，可以通过如下方式修改：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.scope.Model.User<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scope有五种取值</p><ul><li>singleton表示这个Bean是单例的，每次取到的都是一个对象</li><li>prototype 非单例，每次取到都是新的</li><li>request 在同一个请求中，如果对此获取同一个Bean，取到的是同一个（Web下生效）</li><li>session 在同一个session中，如果对此获取同一个Bean，取到的是同一个（Web下生效）</li><li>application 在同一个Web应用中，如果对此获取同一个Bean，取到的是同一个（Web下生效）</li></ul><p>也可以通过java代码配置scope，通过<code>@Scope</code>注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token comment">//字符串书写</span>    <span class="token class-name">User</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bean的初始化和销毁"><a href="#Bean的初始化和销毁" class="headerlink" title="Bean的初始化和销毁"></a>Bean的初始化和销毁</h3><p>如果在Spring容器完成注册之后，还想要做一些配置，那么可以在init方法中完成，当Spring容器销毁的时候，可以在destory方法中完成一些资源回收操作。</p><p>定义好初始化和销毁方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化方法。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"销毁方法。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用xml将其注册到Spring中去</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.scope.Model.User<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在用xml注册文件方式执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean = "</span> <span class="token operator">+</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来关闭spring容器</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IoC小结"><a href="#IoC小结" class="headerlink" title="IoC小结"></a>IoC小结</h3><p>控制反转，指的是对象的控制权反转。</p><p>本来，UserService需要一个UserDao，那么直接在UserService中new一个UserDao，此时UserDao的对象控制权就在UserService中。</p><p>有了Spring之后，系统启动时，UserDao会将自己的各种信息告诉Spring容器，Spring利用这些信息，就可以结合反射创建一个UserDao对象，此时UserDao对象处于容器中，这个对象的控制权在容器中，&#x3D;&#x3D;控制权&#x3D;&#x3D;反转了。</p><p>利用IoC可以实现对象之间的解耦。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-泛型与File</title>
      <link href="/2023/02/11/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%B3%9B%E5%9E%8B/"/>
      <url>/2023/02/11/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/11/uEfAp3VrQq7KDWd.jpg" alt="asd"></p><p>本篇讲解java集合</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h2><p>集合容器类在设计阶段、声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的。</p><p>因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。<code>Collection&lt;E&gt;，List&lt;E&gt;，ArrayList&lt;E&gt;</code> 这个<code>&lt;E&gt;</code>就是类型参数，即泛型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在集合中使用泛型之前的情况：</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需求：存放学生的成绩</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//问题一：类型不安全</span>    <span class="token comment">//        list.add("Tom");</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> score <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//问题二：强转时，可能出现ClassCastException</span>        <span class="token keyword">int</span> stuScore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> score<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuScore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在集合中使用泛型的情况：以ArrayList为例</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//编译时，就会进行类型检查，保证数据的安全</span>    <span class="token comment">//        list.add("Tom");</span>    <span class="token comment">//方式一：</span>    <span class="token comment">//        for(Integer score : list)&#123;</span>    <span class="token comment">//            //避免了强转操作</span>    <span class="token comment">//            int stuScore = score;</span>    <span class="token comment">//</span>    <span class="token comment">//            System.out.println(stuScore);</span>    <span class="token comment">//</span>    <span class="token comment">//        &#125;</span>    <span class="token comment">//方式二：</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> stuScore <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuScore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么要有泛型呢，直接Object不是也可以存储数据吗？</p><blockquote><ol><li><p>解决元素存储的安全性问题，好比商品、药品标签，不会弄错。</p></li><li><p>解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。</p></li></ol><p>  <img src="https://s2.loli.net/2023/02/11/wZmRcONXGyxu4Sp.png" alt="image-20230211212128212"></p><p>  <img src="https://s2.loli.net/2023/02/11/9rRKwZ5IzyEmutM.png" alt="image-20230211212017601"></p><p>  Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<code>ClassCastException</code>异常。同时，代码更加简洁、健壮。</p></blockquote><h2 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h2><p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</p><p>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，正如：<code>List&lt;String&gt;</code>，这表明该List只能保存字符串类型的对象。</p><p>JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</p><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>JDK7新特性：类型推断</p><p>之前我们写泛型时两个类名后都必须写上泛型</p><p><code>ArrayList&lt;Integer&gt; list =  new ArrayList&lt;Integer&gt;();</code></p><p>既然都是一样的，我们就偷个懒，少写一个：</p><p><code>ArrayList&lt;Integer&gt; list =  new ArrayList&lt;&gt;();</code></p><h2 id="在集合中使用泛型"><a href="#在集合中使用泛型" class="headerlink" title="在集合中使用泛型"></a>在集合中使用泛型</h2><p>总结：</p><ul><li>集合接口或集合类在JDK5.0时都修改为带泛型的结构。</li><li>在实例化集合类时，可以指明具体的泛型类型</li><li>指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。<br>比如：<code>add(E e)</code>  —&gt;实例化以后：<code>add(Integer e)</code></li><li>注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</li><li>如果实例化时，没有指明泛型的类型。默认类型为<code>java.lang.Object</code>类型。</li></ul><h2 id="自定义泛型结构"><a href="#自定义泛型结构" class="headerlink" title="自定义泛型结构"></a>自定义泛型结构</h2><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">T</span> orderT<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getOrderT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//也可以把T当作一个类名</span>        <span class="token keyword">return</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token class-name">T</span> orderT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用时就可以直接指定类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringOrder<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token string">"sjsj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>泛型类的子类，直接指明类型</p><p>此时的子类就不是一个泛型类了，你可以理解为，所有泛型的位置都被填上了这个指定的类型，比如：</p><p><code>public class SubOrder extends Order&lt;String&gt; &#123;&#125;</code></p><p>在实例化时就只能填指定的类型（String）了</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SubOrder</span> subOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subOrder<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token string">"anc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>泛型类的子类，保留泛型</p><p><code>public class SubOrder1&lt;T&gt; extends Order&lt;T&gt; &#123;&#125;</code></p><p>实例化时就可以指明类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SubOrder1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> subOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubOrder1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subOrder<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol><li><p>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：<br>&lt;E1,E2,E3&gt;</p></li><li><p>泛型类的构造器如下：<code>public GenericClass()&#123;&#125;</code>。<br> 而下面是错误的：<code>public GenericClass&lt;E&gt;()&#123;&#125;</code></p></li><li><p>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</p></li><li><p>泛型不同的引用不能相互赋值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//泛型不同的引用不能相互赋值。</span>list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span><span class="token comment">//这样过不了编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>尽管在编译时<code>ArrayList&lt;String&gt;</code>和<code>ArrayList&lt;Integer&gt;</code>是两种类型，但是，在运行时只有一个<code>ArrayList</code>被加载到JVM中。</p></blockquote></li><li><p>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。经验：泛型要使用一路都用。要不用，一路都不要用。</p></li><li><p>如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象（由于接口或抽象类不可实例化的特性）</p></li><li><p>泛型的指定中不能使用基本数据类型，可以使用包装类替换。</p></li><li><p>在类&#x2F;接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在静态方法中不能使用类的泛型。（泛型是在创建对象时指定的，而静态方法在类出现时就已经出现）</p></li><li><p>异常类不能是泛型的</p></li><li><p>不能使用<code>new E[]</code>。但是可以：<code>E[] elements = (E[])new Object[capacity];</code></p></li></ol><pre><code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ts1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//编译通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>&gt; 参考：`ArrayList`源码中声明：`Object[] elementData`，而非泛型参数类型数组。</code></pre><ol start="11"><li>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：<ul><li>子类不保留父类的泛型：按需实现<br>没有类型 擦除<br>具体类型</li><li>子类保留父类的泛型：泛型子类<br>全部保留<br>部分保留<blockquote><p>结论：子类必须是“富二代”，子类除了指定或保留父类的泛型，还可以增加自己的泛型</p></blockquote></li></ul></li></ol><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>方法也可以被泛型化，不管此时定义在其中的类是不是泛型类。在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型。</p><p><code>[访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常</code></p><p>来看一个例子，比如我现在想写一个复制list数组的方法，我并不清楚会传进来一个什么类型。难道还要使用多态，或者重载方法吗？有了泛型就不用了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">copyFromList</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//指明数组的类型为泛型</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">copyFromList</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用时才指明参数类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型在继承方面的体现"><a href="#泛型在继承方面的体现" class="headerlink" title="泛型在继承方面的体现"></a>泛型在继承方面的体现</h2><p>虽然类A是类B的父类，但是<code>G&lt;A&gt;</code> 和<code>G&lt;B&gt;</code>二者不具备子父类关系，二者是并列关系。</p><p>补充：类A是类B的父类，<code>A&lt;G&gt;</code> 是 <code>B&lt;G&gt;</code> 的父类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>arr1 <span class="token operator">=</span> arr2<span class="token punctuation">;</span><span class="token comment">//以上这两则例子体现了多态，父类引用指向子类对象。</span><span class="token comment">//编译不通过</span><span class="token comment">//Date date = new Date();</span><span class="token comment">//str = date;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时的list1和list2的类型不具有子父类关系</span><span class="token comment">//编译不通过</span><span class="token comment">//list1 = list2;</span><span class="token comment">/*反证法：假设list1 = list2;list1.add(123);导致混入非String的数据。出错。*/</span><span class="token function">show</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show1</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//带泛型的方法，由于不存在子父类关系，不可以使用多态，必须重新定义</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符的使用"><a href="#通配符的使用" class="headerlink" title="通配符的使用"></a>通配符的使用</h2><p>那如果我们就是想使用类似多态的功能呢？</p><p>那可以使用通配符：<code>?</code></p><blockquote><h4 id="你也可以理解为"><a href="#你也可以理解为" class="headerlink" title="你也可以理解为"></a>你也可以理解为</h4><p>类A是类B的父类，<code>G&lt;A&gt;</code>和<code>G&lt;B&gt;</code>是没有关系的，二者共同的父类是：<code>G&lt;?&gt;</code></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//使用通配符作为父类</span>list <span class="token operator">=</span> list1<span class="token punctuation">;</span>list <span class="token operator">=</span> list2<span class="token punctuation">;</span><span class="token comment">//编译通过</span><span class="token comment">//print(list1);</span><span class="token comment">//print(list2);</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用通配符后数据的读写要求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list <span class="token operator">=</span> list3<span class="token punctuation">;</span><span class="token comment">//添加(写入)：对于List&lt;?>就不能向其内部添加数据。</span><span class="token comment">//list.add("DD");</span><span class="token comment">//list.add('?');</span><span class="token comment">//除了添加null之外。</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span><span class="token class-name">Object</span> o <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有限制条件的通配符的使用"><a href="#有限制条件的通配符的使用" class="headerlink" title="有限制条件的通配符的使用"></a>有限制条件的通配符的使用</h2><blockquote><h4 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h4><p><code>? extends A</code>：<code>G&lt;? extends A&gt;</code>允许G中的泛型为A及A的子类</p><p><code>? super A</code>:<code>G&lt;? super A&gt;</code> 允许G中的泛型为A及A的父类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> listExtendsPerson <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> listSuperPerson <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//有三个具体类对象，继承关系为Object->Person->Student</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> listStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> listPerson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> listObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listExtendsPerson <span class="token operator">=</span> listStudent<span class="token punctuation">;</span>listExtendsPerson <span class="token operator">=</span> listPerson<span class="token punctuation">;</span><span class="token comment">//listExtendsPerson = listObj;//大于Person的就不能赋值了</span><span class="token comment">//listSuperPerson = listStudent;//小于Person的就不能赋值了</span>listSuperPerson <span class="token operator">=</span> listPerson<span class="token punctuation">;</span>listSuperPerson <span class="token operator">=</span> listObj<span class="token punctuation">;</span><span class="token comment">//读取数据：</span>listExtendsPerson <span class="token operator">=</span> listStudent<span class="token punctuation">;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> listExtendsPerson<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token comment">//Student s = listExtendsPerson.get(0);</span><span class="token comment">//万一我这里就是一个Person呢？怎么能把父类赋给子类</span>listSuperPerson <span class="token operator">=</span> listPerson<span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> listSuperPerson<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token comment">//Person obj = listSuperPerson.get(0);</span><span class="token comment">//写入数据：</span><span class="token comment">//编译不通过</span><span class="token comment">//listExtendsPerson.add(new Student());万一我这里是一个比Student更小的类呢？</span><span class="token comment">//编译通过，子类可以赋给fu'lei</span>listSuperPerson<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>listSuperPerson<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-集合-Map部分</title>
      <link href="/2023/02/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(%E4%B8%8B)/"/>
      <url>/2023/02/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/hengxingstu/Blog-img/mc/00f3e6da1f364172c08d6dc6ddb4a077e.jpg" alt="mc酱"></p><p>本篇讲解java集合</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><img src="https://s2.loli.net/2023/02/10/cDMzxnGWXR52Kr6.png" alt="image-20230210161346896"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Map</span><span class="token operator">:</span>双列数据，存储key<span class="token operator">-</span>value对的数据   <span class="token operator">--</span><span class="token operator">-</span>类似于高中的函数：y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">HashMap</span><span class="token operator">:</span>作为<span class="token class-name">Map</span>的主要实现类；线程不安全的，效率高；存储<span class="token keyword">null</span>的key和value<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">LinkedHashMap</span><span class="token operator">:</span>保证在遍历map元素时，可以按照添加的顺序实现遍历。原因：在原有的<span class="token class-name">HashMap</span>底层结构基础上，添加了一对指针，指向前一个和后一个元素。对于频繁的遍历操作，此类执行效率高于<span class="token class-name">HashMap</span>。<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">TreeMap</span><span class="token operator">:</span>保证按照添加的key<span class="token operator">-</span>value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序底层使用红黑树<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Hashtable</span><span class="token operator">:</span>作为古老的实现类；线程安全的，效率低；不能存储<span class="token keyword">null</span>的key和value<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Properties</span><span class="token operator">:</span>常用来处理配置文件。key和value都是<span class="token class-name">String</span>类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HashMap</code>的底层：</p><ul><li>数组+链表  （JDK7.0及之前）</li></ul><ul><li><pre><code>               数组+链表+红黑树 （JDK8.0）</code></pre></li></ul><h2 id="Map结构的理解"><a href="#Map结构的理解" class="headerlink" title="Map结构的理解"></a>Map结构的理解</h2><img src="https://s2.loli.net/2023/02/10/wR6UVmXNOpMWEQC.png" alt="Map底层结构" style="zoom:33%;" /><ul><li>Map中的key：无序的、不可重复的，使用Set存储所有的key  —&gt; key所在的类要重写<code>equals()</code>和<code>hashCode() </code>（以HashMap为例）</li><li>Map中的value：无序的、可重复的，使用Collection存储所有的value —&gt;value所在的类要重写<code>equals()</code></li><li>一个键值对：key-value构成了一个Entry对象。</li><li>Map中的entry：无序的、不可重复的，使用Set存储所有的entry</li></ul><h3 id="HashMap的底层实现原理"><a href="#HashMap的底层实现原理" class="headerlink" title="HashMap的底层实现原理"></a>HashMap的底层实现原理</h3><h4 id="以JDK7-0为例"><a href="#以JDK7-0为例" class="headerlink" title="以JDK7.0为例"></a>以JDK7.0为例</h4><p><code>HashMap map = new HashMap():</code></p><p>在实例化以后，底层创建了长度是16的一维数组<code>Entry[] table</code>。</p><p>…可能已经执行过多次put…</p><p><code>map.put(key1,value1);</code></p><p>首先，调用key1所在类的<code>hashCode()</code>计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</p><ul><li><p>如果此位置上的数据为空，此时的<code>key1-value1</code>添加成功。 —-情况1</p></li><li><p>如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较<code>key1</code>和已经存在的一个或多个数据的哈希值：</p><ul><li><p>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时<code>key1-value1</code>添加成功。—-情况2</p></li><li><p>如果key1的哈希值和已经存在的某一个数据(<code>key2-value2</code>)的哈希值相同，继续比较：调用key1所在类的<code>equals(key2)</code>方法，比较：</p><ul><li><p>如果<code>equals()</code>返回<code>false</code>:此时key1-value1添加成功。—-情况3</p></li><li><p>如果<code>equals()</code>返回true:使用value1替换value2。</p></li></ul></li></ul></li></ul><p>补充：关于情况2和情况3：此时<code>key1-value1</code>和原来的数据以链表的方式存储。</p><p>在不断的添加过程中，会涉及到扩容问题，当超出临界值（且要存放的位置非空）时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><h4 id="JDK8-0与7-0的不同"><a href="#JDK8-0与7-0的不同" class="headerlink" title="JDK8.0与7.0的不同"></a>JDK8.0与7.0的不同</h4><ol><li><code>new HashMap()</code>：初始化时，底层并没有创建一个长度为16的数组</li><li>JDK8.0底层的数组是：<code>Node[]</code>,而非<code>Entry[]</code></li><li>首次调用<code>put()</code>方法时，底层创建长度为16的数组</li><li>JDK7.0底层结构只有：数组+链表。JDK8.0中底层结构：数组+链表+红黑树。</li></ol><ul><li>形成链表时，七上八下（JDK7.0：新的元素指向旧的元素。JDK8.0：旧的元素指向新的元素）</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。（优化查找效率）</li></ul><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>以7.0为例：</p><p>无论使用哪个构造器，最终都会调用这个构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//初始容量小于0</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span>                                           initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span><span class="token comment">//大于最大容量时使用最大容量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//加载因子异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span>                                           loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Find a power of 2 >= initialCapacity，找到一个大于initialCapacity的2的平方</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;</span> initialCapacity<span class="token punctuation">)</span>        capacity <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临界值，当存储量达到临界值时，扩容</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//新建数组</span>    useAltHashing <span class="token operator">=</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">isBooted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span>capacity <span class="token operator">>=</span> <span class="token class-name">Holder</span><span class="token punctuation">.</span><span class="token constant">ALTERNATIVE_HASHING_THRESHOLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建完数组存储，接下来就是put方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//处理存放空值</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算哈希值</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过哈希值确定存储位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果此位置已经有元素，就进入这个循环</span>        <span class="token class-name">Object</span> k<span class="token punctuation">;</span>        <span class="token comment">/*        如果进入了循环，说明进入了一个链表，        e.hash == hash，表示哈希值相同，哈希值不同就不进入分支，直接判断下一个元素 ，直到对比完所有链表中的元素        哈希值相同，就同时判断是否equals，如果equals就替换旧值并返回        */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//没有元素，直接添加，返回空</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加Entry</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时没有元素，执行添加Entry的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果当前表中数据量大于临界值并且要存放数据的位置为空，才进行扩容</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩容为表长的2倍</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//key不为空的话就重新计算hash值，为空直接用0作hash值</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不需要扩容，直接放</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看它是如何创建新的Entry的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将之前在该位置上的元素取出</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//把新的元素放在该位置上，其next指针指向之前的元素</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然涉及到Entry，那就不得不了解它的属性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span><span class="token comment">//下一元素指针</span>    <span class="token keyword">int</span> hash<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的next指针就是单向链表指向下一元素的指针。简图如下：</p><img src="https://s2.loli.net/2023/02/10/Bl8eqvRjXf3iDV9.png" alt="image-20230210194927090" style="zoom:33%;" /><p>JDK8.0中put的操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>               <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//如果表为空</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//新建表并返回长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment">//如果要存的位置为空</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接存</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果要存的位置已经有元素</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span><span class="token comment">//e是新的对象，p是旧的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span><span class="token comment">//对比哈希值相同，p.hash是已有元素的。hash是新元素的</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//并且key值相同</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//旧对象赋给新对象，下方(e != null)，就会true。执行替换逻辑</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//哈希值不同 或 哈希值相同key值不同</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//如果该节点next为空，没有下一个节点。</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//新建节点，赋给该节点next。这里就是七上八下的关键点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment">//哈希值相同，key相同</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//跳出循环，到下方(e != null)，执行替换逻辑</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key ：key值已经有映射</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token comment">//旧值替换新值</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token comment">//返回旧值</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//大于临界值时扩容</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构图解：</p><p><img src="https://s2.loli.net/2023/02/10/dpxmDeAaEvihrSL.png" alt="JDK8.0HashMap的存储结构"></p><blockquote><p>需要注意的几个常量<br>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16<br>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75<br>threshold：扩容的临界值，&#x3D;容量*填充因子：16 * 0.75 &#x3D;&gt; 12<br>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8<br>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</p></blockquote><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>负载因子值的大小，对HashMap有什么影响</p><blockquote><ul><li>负载因子的大小决定了HashMap的数据密度。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul></blockquote><h3 id="LinkedHashMap的底层实现原理（了解）"><a href="#LinkedHashMap的底层实现原理（了解）" class="headerlink" title="LinkedHashMap的底层实现原理（了解）"></a>LinkedHashMap的底层实现原理（了解）</h3><p>LinkedHashMap的<code>newNode()</code>被重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关键部分在这里</span>    <span class="token function">linkNodeLast</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到它new的是一个Entry</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span><span class="token comment">//记录了前，后liang</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map常用方法"><a href="#Map常用方法" class="headerlink" title="Map常用方法"></a>Map常用方法</h2><ul><li><p>添加、删除、修改操作：<br><code>Object put(Object key,Object value)</code>：将指定key-value添加到(或修改)当前map对象中<br><code>void putAll(Map m)</code>:将m中的所有key-value对存放到当前map中<br><code>Object remove(Object key)</code>：移除指定key的key-value对，并返回value<br><code>void clear()</code>：清空当前map中的所有数据</p></li><li><p>元素查询的操作：<br><code>Object get(Object key)</code>：获取指定key对应的value<br><code>boolean containsKey(Object key)：是否包含指定的key</code></p><p><code>boolean containsValue(Object value)</code>：是否包含指定的value</p><p><code> int size()</code>：返回map中key-value对的个数<br><code> boolean isEmpty()</code>：判断当前map是否为空<br><code> boolean equals(Object obj)</code>：判断当前map和参数对象obj是否相等</p></li><li><p>元视图操作的方法：<br><code>Set keySet()</code>：返回所有key构成的Set集合<br><code> Collection values()</code>：返回所有value构成的Collection集合<br><code> Set entrySet()</code>：返回所有key-value对构成的Set集合</p></li></ul><p>常用方法：</p><ul><li>添加：<code>put(Object key,Object value)</code></li><li>删除：<code>remove(Object key)</code></li><li>修改：<code>put(Object key,Object value)</code></li><li>查询：<code>get(Object key)</code></li><li>长度：<code>size()</code></li><li>遍历：<code>keySet() / values() / entrySet()</code></li></ul><p>重点是遍历的方法，需要使用元视图操作方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">345</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只遍历key</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只遍历value</span>iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历key，value。我们有两种方式遍历：</span><span class="token comment">//方法一：entrySet()返回Entry对象，强转为Entry后，调用get方法</span>iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方法二：通过keySet()返回key的集合，再通过map对象调用get方法获取value</span>iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"===="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TreeMap排序"><a href="#TreeMap排序" class="headerlink" title="TreeMap排序"></a>TreeMap排序</h2><p>TreeMap的特殊之处就在于它可以根据元素的key进行排序</p><h3 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h3><p>排序算法在<code>compareTo()</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">TreeMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u3<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u4<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*User&#123;name='Rose', age=18&#125;---->100User&#123;name='Jack', age=20&#125;---->76User&#123;name='Tom', age=23&#125;---->98User&#123;name='Jerry', age=32&#125;---->89*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">TreeMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">User</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的参数类型不匹配。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>            <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Rose"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u2<span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u3<span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>u4<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*User&#123;name='Rose', age=18&#125; = 100User&#123;name='Jack', age=20&#125; = 76User&#123;name='Tom', age=23&#125; = 98User&#123;name='Jerry', age=32&#125; = 89*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</p><p>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</p><p>存取数据时，建议使用<code>setProperty(String key,String value)</code>方法和<code>getProperty(String key)</code>方法</p><blockquote><p>注意：这里读写文件的写法并不规范，等到IO流后，我们再使用规范的方式进行读取，这里只是测试Properties类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom:abc123</span>fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h1><p>Collections 是一个操作 Set、List 和 Map 等集合的工具类</p><blockquote><p>提醒：操作数组的工具类：Arrays</p></blockquote><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p><ul><li><p>排序操作：（均为static方法）</p><p><code>reverse(List)</code>：反转 List 中元素的顺序<br><code>shuffle(List)</code>：对 List 集合元素进行随机排序<br><code>sort(List)</code>：根据元素的自然顺序对指定 List 集合元素按升序排序<br><code>sort(List，Comparator)</code>：根据指定的 Compar&#x3D;ator 产生的顺序对 List 集合元素进行排序<br><code>swap(List，int， int)</code>：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123, 1, 0, 23, -23]</span><span class="token class-name">Comparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//定制排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> u1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>            <span class="token class-name">Integer</span> u2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span>u2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123, 23, 1, 0, -23]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查找、替换</p><p><code>Object max(Collection)</code>：根据元素的自然顺序，返回给定集合中的最大元素<br><code>Object max(Collection，Comparator)</code>：根据 Comparator 指定的顺序，返回给定集合中的最大元素，所谓的最大是指排序后最右侧的元素<br><code>Object min(Collection)</code><br><code>Object min(Collection，Comparator)</code><br><code>int frequency(Collection，Object)</code>：返回指定集合中指定元素的出现次数<br><code>void copy(List dest,List src)</code>：将src中的内容复制到dest中<br><code>boolean replaceAll(List list，Object oldVal，Object newVal)</code>：使用新值替换 List 对象的所有旧值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这是一种错误的复制list的方式，会报异常，原因是新的list1长度不够，list无法将元素放进去</span><span class="token comment">//java.lang.IndexOutOfBoundsException: Source does not fit in dest</span><span class="token comment">//ArrayList list2 = new ArrayList();</span><span class="token comment">//System.out.println(list2);</span><span class="token comment">//Collections.copy(list2,list);</span><span class="token comment">//我们可以通过将数组转为list的方式保证内部已经有数据</span><span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同步控制</p></li><li><p>Collections 类中提供了多个 synchronizedXxx() 方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</p><img src="https://s2.loli.net/2023/02/11/TxAcQmrMsP2p3eI.png" alt="image-20230211193315534" style="zoom:33%;" /><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> synchronizedList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-集合-Collection部分</title>
      <link href="/2023/02/08/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(%E4%B8%8A)/"/>
      <url>/2023/02/08/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/hengxingstu/Blog-img/mc/00f3e6da1f364172c08d6dc6ddb4a077e.jpg" alt="mc酱"></p><p>本篇讲解java集合</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架的概述"><a href="#集合框架的概述" class="headerlink" title="集合框架的概述"></a>集合框架的概述</h2><ol><li><p>集合、数组都是对多个数据进行存储操作的结构，简称<code>Java容器</code>。</p><p>说明：此时的存储，主要指的是内存层面的存储，不涉及到持久化的存储（.txt,.jpg,.avi，数据库中）</p></li><li><p>数组的缺陷</p><ol><li><p>数组在存储多个数据方面的特点</p><ul><li>一旦初始化以后，其长度就确定了。</li><li>数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</li></ul></li><li><p>数组在存储多个数据方面的缺点</p><ul><li><p>一旦初始化以后，其长度就不可修改。</p></li><li><p>数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，同时效率不高。</p></li><li><p>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</p></li><li><p>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。</p></li></ul></li></ol></li></ol><p>Java 集合可分为 Collection 和 Map 两种体系</p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Collection</span>接口：单列集合，用来存储一个一个的对象         <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">List</span>接口：存储有序的、可重复的数据。  <span class="token operator">--</span><span class="token operator">></span>“动态”数组             <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">ArrayList</span>、<span class="token class-name">LinkedList</span>、<span class="token class-name">Vector</span>         <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Set</span>接口：存储无序的、不可重复的数据   <span class="token operator">--</span><span class="token operator">></span>高中讲的“集合”             <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">HashSet</span>、<span class="token class-name">LinkedHashSet</span>、<span class="token class-name">TreeSet</span><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Map</span>接口：双列集合，用来存储一对<span class="token punctuation">(</span>key <span class="token operator">-</span> value<span class="token punctuation">)</span>一对的数据   <span class="token operator">--</span><span class="token operator">></span>高中函数：y <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>         <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">HashMap</span>、<span class="token class-name">LinkedHashMap</span>、<span class="token class-name">TreeMap</span>、<span class="token class-name">Hashtable</span>、<span class="token class-name">Properties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Collection接口方法测试"><a href="#Collection接口方法测试" class="headerlink" title="Collection接口方法测试"></a>Collection接口方法测试</h3><ol><li>添加<ul><li><code>add(Object obj)</code></li><li><code>addAll(Collection coll)</code></li></ul></li><li>获取有效元素的个数<ul><li><code>int size()</code></li></ul></li><li>清空集合<ul><li><code>void clear()</code></li></ul></li><li>是否是空集合<ul><li><code>boolean isEmpty()</code></li></ul></li><li>是否包含某个元素<ul><li><code>boolean contains(Object obj)</code>：是通过元素的<code>equals</code>方法来判断是否是同一个对象</li><li><code>boolean containsAll(Collection c)</code>：也是调用元素的<code>equals</code>方法来比较的。拿两个集合的元素挨个比较。</li></ul></li><li>删除<ul><li><code>boolean remove(Object obj)</code> ：通过元素的<code>equals</code>方法判断是否是要删除的那个元素。只会删除找到的第一个元素</li><li><code>boolean removeAll(Collection coll)</code>：取当前集合的差集</li></ul></li><li>取两个集合的交集<ul><li><code>boolean retainAll(Collection c)</code>：把交集的结果存在当前集合中，不影响c</li></ul></li><li>集合是否相等<ul><li><code>boolean equals(Object obj)</code></li></ul></li><li>转成对象数组<ul><li><code>Object[] toArray()</code></li></ul></li><li>获取集合对象的哈希值<ul><li><code>hashCode()</code></li></ul></li><li>遍历<ul><li><code>iterator()</code>：返回迭代器对象，用于集合遍历</li></ul></li></ol><p>方法示例，这里我们使用<code>ArrayList</code>来作演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//add(Object e):将元素e添加到集合coll中</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person是自定义的一个类</span><span class="token comment">//size():获取添加的元素的个数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span><span class="token comment">//addAll(Collection coll1):将coll1集合中的元素添加到当前的集合中</span><span class="token class-name">Collection</span> coll1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>coll1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[AA, BB, 123, Wed Feb 08 16:40:55 CST 2023, 456, CC]</span><span class="token comment">//clear():清空集合元素</span>coll<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//isEmpty():判断当前集合是否为空</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//contains(Object obj):判断obj是否存在于集合中</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true,因为我们重写了Person的equals方法</span><span class="token comment">//containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span><span class="token class-name">Collection</span> coll2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>coll2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123, hello, 17:24, 456, Person&#123;name='琪亚娜', age=20&#125;]</span><span class="token comment">//remove(Object obj):从当前集合中移除obj元素。</span>coll<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123, 17:24, 456, Person&#123;name='琪亚娜', age=20&#125;]</span><span class="token comment">//removeAll(Collection coll1):差集：从当前集合中移除coll2中所有的元素。</span><span class="token class-name">Collection</span> coll2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>coll2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[17:24, 456]</span><span class="token comment">//retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span><span class="token class-name">Collection</span> coll1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>coll1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span><span class="token comment">//此时，coll1是一个和coll集合完全相同的集合</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>coll1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token comment">//hashCode():返回当前对象的哈希值</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-816743945</span><span class="token comment">//集合 --->数组：toArray()</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[123, hello, 17:24, 456, Person&#123;name='琪亚娜', age=20&#125;]</span><span class="token comment">//拓展：数组 ---> 集合:调用Arrays类的静态方法asList()</span><span class="token class-name">List</span> strings <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[hello, hi]</span><span class="token comment">//注意：int型数组会被认为是一个元素</span><span class="token class-name">List</span> ints <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[[I@6477463f]，这里[I@6477463f是其中一个元素，左右有中括号包围，说明使用了toString()</span><span class="token comment">//为了看的更清楚，写了下面这个例子，你可以看出，第一个元素[I@3d71d552是一个一维数组和地址</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[[I@3d71d552, 12]</span><span class="token comment">//解决办法：</span><span class="token comment">//1.使用包装类</span><span class="token class-name">List</span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3]</span><span class="token comment">//2.直接放入数组元素</span><span class="token class-name">List</span> ints2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ints2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代器接口"><a href="#迭代器接口" class="headerlink" title="迭代器接口"></a>迭代器接口</h3><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</p><p> GOF给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。迭代器模式，就是为容器而生。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”。</p><p>Collection接口继承了<code>java.lang.Iterable</code>接口，该接口有一个<code>iterator()</code>方法，那么所<br>有实现了Collection接口的集合类都有一个<code>iterator()</code>方法，用以返回一个实现了Iterator接口的对象。</p><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</p><p>⭐集合对象每次调用<code>iterator()</code>方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><img src="https://cdn.jsdelivr.net/gh/hengxingstu/Blog-img/picgo/202302081950901.png" alt="迭代器"></p><blockquote><p>在调用<code>it.next()</code>方法之前必须要调用<code>it.hasNext()</code>进行检测。</p><p>若不调用，且下一条记录无效，直接调用<code>it.next()</code>会抛出<code>NoSuchElementException</code>异常。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//hasNext(): 判断是否还有下一个元素</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//next(): 1.指针下移 2.将下移以后集合位置上的元素返回</span><span class="token punctuation">&#125;</span><span class="token comment">/*123hello17:24456Person&#123;name='琪亚娜', age=20&#125;*/</span>iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//会删除hello这一项</span><span class="token comment">/*12317:24456Person&#123;name='琪亚娜', age=20&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。</p><p>如果还未调用<code>next()</code>或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报<code>IllegalStateException</code>。</p><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//错误方式一：</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//错误方式二：</span><span class="token comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span><span class="token keyword">while</span> <span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增强for循环foreach"><a href="#增强for循环foreach" class="headerlink" title="增强for循环foreach"></a>增强for循环<code>foreach</code></h3><p>Java 5.0 提供了<code>foreach</code>循环迭代访问<code>Collection</code>和数组。</p><ul><li>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</li><li>遍历集合的底层调用Iterator完成操作。</li><li><code>foreach</code>还可以用来遍历数组。</li></ul><p><code>for(集合元素的类型 局部变量 : 集合对象)</code>或者<code>for(数组元素的类型 局部变量 : 数组对象)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> coll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//并不会修改原先数组中的数据，因为这个i是你新声明的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List子接口"><a href="#List子接口" class="headerlink" title="List子接口"></a>List子接口</h3><p>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</p><p>List集合类中<strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的顺序索引。</p><p>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</p><p>JDK API中List接口的实现类常用的有：<code>ArrayList</code>、<code>LinkedList</code>和<code>Vector</code>。</p><ul><li><code>ArrayList</code>：作为List接口的主要实现类；线程不安全的，效率高；底层使用<code>Object[] elementData</code>存储</li></ul><ul><li><pre><code>         `LinkedList`：对于频繁的插入、删除操作，使用此类效率比`ArrayList`高；底层使用双向链表存储</code></pre></li><li><pre><code>         `Vector`：作为List接口的古老实现类；线程安全的，效率低；底层使用`Object[] elementData`存储</code></pre></li></ul><blockquote><p>面试题：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>三者的异同？</p><p>同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</p><p>不同：见上</p></blockquote><h4 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a><code>ArrayList</code>源码分析</h4><ul><li><p>JDK 7.0中</p><p><code>ArrayList list = new ArrayList();</code>&#x2F;&#x2F;底层创建了长度是10的<code>Object[]</code>数组<code>elementData</code></p><p><code>list.add(123);//elementData[0] = new Integer(123);</code></p><p>…</p><p><code>list.add(11);</code>&#x2F;&#x2F;如果此次的添加导致底层<code>elementData</code>数组容量不够，则扩容。</p><p>默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p><p>结论：建议开发中使用带参的构造器：<code>ArrayList list = new ArrayList(int capacity)</code>，避免扩容影响效率</p></li><li><p>JDK 8.0中<code>ArrayList</code>的变化</p><p><code>ArrayList list = new ArrayList();</code>&#x2F;&#x2F;底层<code>Object[] elementData</code>初始化为{}.并没有创建长度为10的数组</p><p><code>list.add(123);</code>&#x2F;&#x2F;第一次调用<code>add()</code>时，底层才创建了长度10的数组，并将数据123添加到<code>elementData[0]</code></p><p>…</p><p>后续的添加和扩容操作与JDK 7.0无异。</p></li><li><p>小结</p><p>JDK 7.0中的<code>ArrayList</code>的对象的创建类似于单例的饿汉式，而JDK 8.0中的<code>ArrayList</code>的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</p></li></ul><h4 id="LinkedList源码分析"><a href="#LinkedList源码分析" class="headerlink" title="LinkedList源码分析"></a><code>LinkedList</code>源码分析</h4><p><code>LinkedList list = new LinkedList();</code>内部声明了Node类型的first和last属性，默认值为null<br><code>list.add(123);</code>将123封装到Node中，创建了Node对象。</p><p>其中，Node定义为：体现了<code>LinkedList</code>的双向链表的特性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">E</span> item<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vector源码分析"><a href="#Vector源码分析" class="headerlink" title="Vector源码分析"></a><code>Vector</code>源码分析</h4><p>JDK 7.0和JDK 8.0中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</p><h4 id="List常用方法"><a href="#List常用方法" class="headerlink" title="List常用方法"></a>List常用方法</h4><blockquote><p><code>void add(int index, Object ele)</code>:在index位置插入ele元素<br><code>boolean addAll(int index, Collection eles)</code>:从index位置开始将<code>eles</code>中的所有元素添加进来<br><code>Object get(int index)</code>:获取指定index位置的元素<br><code>int indexOf(Object obj)</code>:返回<code>obj</code>在集合中首次出现的位置<br><code>int lastIndexOf(Object obj)</code>:返回<code>obj</code>在当前集合中末次出现的位置<br><code>Object remove(int index)</code>:移除指定<code>index</code>位置的元素，并返回此元素<br><code>Object set(int index, Object ele)</code>:设置指定<code>index</code>位置的元素为<code>ele</code>（覆盖之前的记录）<br><code>List subList(int fromIndex, int toIndex)</code>:返回从<code>fromIndex</code>到<code>toIndex</code>位置的子集合</p></blockquote><p>总结：</p><ul><li>增：<code>add(Object obj)</code></li><li>删：<code>remove(int index) / remove(Object obj)</code></li><li>改：<code>set(int index, Object ele)</code></li><li>查：<code>get(int index)</code></li><li>插：<code>add(int index, Object ele)</code></li><li>长度：<code>size()</code></li><li>遍历：<ul><li>Iterator迭代器方式</li><li>增强for循环</li><li>普通的循环</li></ul></li></ul><h5 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testListRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">updateList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会输出什么？</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateList</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案是<code>[1,2]</code></p><p>这道题的重点是，区分List中<code>remove(int index)</code>和<code>remove(Object obj)</code></p><p>我们这里传入的是<code>int</code>型的数据，根据重载原则，会执行<code>remove(int index)</code>，而不是自动装箱后使用<code>remove(Object obj)</code>。如果我们想删掉2这个数据（使用对象删除）那可以手动装箱：</p><p><code>list.remove(new Integer(2));</code></p><h3 id="Set子接口"><a href="#Set子接口" class="headerlink" title="Set子接口"></a>Set子接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Collection</span>接口：单列集合，用来存储一个一个的对象     <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">Set</span>接口：存储无序的、不可重复的数据   <span class="token operator">--</span><span class="token operator">></span>高中讲的“集合”          <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">HashSet</span>：作为<span class="token class-name">Set</span>接口的主要实现类；线程不安全的；可以存储<span class="token keyword">null</span>值          <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">LinkedHashSet</span>：作为<span class="token class-name">HashSet</span>的子类；遍历其内部数据时，可以按照添加的顺序遍历                                     对于频繁的遍历操作，<span class="token class-name">LinkedHashSet</span>效率高于<span class="token class-name">HashSet</span><span class="token punctuation">.</span>          <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token class-name">TreeSet</span>：可以按照添加对象的指定属性，进行排序。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存储无序的、不可重复的数据</p><ul><li>Set接口是Collection的子接口，set接口没有提供额外的方法</li><li>Set 集合不允许包含相同的元素，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</li><li>Set 判断两个对象是否相同不是使用<code>==</code>运算符，而是根据<code>equals()</code>方法</li></ul><h4 id="Set的特性及HashSet"><a href="#Set的特性及HashSet" class="headerlink" title="Set的特性及HashSet"></a>Set的特性及<code>HashSet</code></h4><p>以<code>HashSet</code>为例说明：</p><ol><li><p>无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</p></li><li><p>不可重复性：保证添加相同的元素按照<code>equals()</code>判断时，不能返回<code>true</code>。即：相同的元素只能添加一个。</p></li></ol><p>二、添加元素的过程</p><p>以<code>HashSet</code>为例：</p><blockquote><p>我们向<code>HashSet</code>中添加元素a,首先调用元素a所在类的<code>hashCode()</code>方法，计算元素a的哈希值，此哈希值接着通过某种算法计算出在<code>HashSet</code>底层数组中的存放位置（即为：索引位置），判断数组此位置上是否已经有元素：</p><ul><li>如果此位置上没有其他元素，则元素a添加成功。 —&gt;情况1</li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：<ul><li>如果hash值不相同，则元素a添加成功。—&gt;情况2</li><li>如果hash值相同，进而需要调用元素a所在类的equals()方法：<br>                <code>equals()</code>返回true，元素a添加失败<br>                <code>equals()</code>返回false，则元素a添加成功。—&gt;情况3</li></ul></li></ul><p>对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。</p><ul><li>JDK 7.0 :元素a放到数组中，指向原来的元素。</li><li>JDK 8.0:原来的元素在数组中，指向元素a<br>总结：七上八下</li></ul></blockquote><p><code>HashSet</code>底层：数组+链表的结构。</p><h4 id="Set对数据的要求"><a href="#Set对数据的要求" class="headerlink" title="Set对数据的要求"></a>Set对数据的要求</h4><ul><li>向Set(主要指：<code>HashSet、LinkedHashSet</code>)中添加的数据，其所在的类一定要重写<code>hashCode()</code>和<code>equals()</code></li><li>重写的<code>hashCode()</code>和<code>equals()</code>尽可能保持一致性：相等的对象必须具有相等的散列码</li></ul><p>​重写两个方法的小技巧：对象中用作 <code>equals()</code> 方法比较的 <code>Field</code>，都应该用来计算 <code>hashCode</code> 值。</p><p><img src="https://s2.loli.net/2023/02/09/Tv9IkJfKYaHgrRo.png" alt="image-20230209184106054"></p><h4 id="LinkedHashSet介绍"><a href="#LinkedHashSet介绍" class="headerlink" title="LinkedHashSet介绍"></a><code>LinkedHashSet</code>介绍</h4><p><code>LinkedHashSet</code>作为<code>HashSet</code>的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个数据和后一个数据。</p><p>优点是：对于频繁的遍历操作，<code>LinkedHashSet</code>效率高于<code>HashSet</code></p><img src="https://s2.loli.net/2023/02/09/nLjXQpmsJ8V9GRO.png" alt="image-20230209190555552" style="zoom: 33%;" /><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><code>TreeSet</code></h4><p><code>TreeSet</code>是<code>SortedSet</code>接口的实现类，<code>TreeSet</code>可以确保集合元素处于排序状态。</p><p><code>TreeSet</code>底层使用<strong>红黑树</strong>结构存储数据</p><blockquote><p>参考：<a href="https://www.yycoding.xyz/post/2014/3/27/introduce-red-black-tree">红黑树介绍</a></p></blockquote><p><code>TreeSet</code>两种排序方法：自然排序和定制排序。默认情况下，<code>TreeSet</code>采用自然排序。</p><p><code>TreeSet</code>会调用集合元素的<code>compareTo(Object obj)</code>方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列</p><blockquote><p>如果试图把一个对象添加到<code>TreeSet</code>时，则该对象的类必须实现<code>Comparable</code>接口。</p></blockquote><p>Comparable 的典型实现：</p><ul><li><code>BigDecimal、BigInteger</code> 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</li><li><code>Character</code>：按字符的<code>unicode</code>值来进行比较</li><li><code>Boolean</code>：<code>true</code>对应的包装类实例大于<code>false</code>对应的包装类实例</li><li><code>String</code>：按字符串中字符的<code>unicode</code>值进行比较</li><li><code>Date、Time</code>：后边的时间、日期比前面的时间、日期大</li></ul><h5 id="自然排序实现"><a href="#自然排序实现" class="headerlink" title="自然排序实现"></a>自然排序实现</h5><p>自然排序中，比较两个对象是否相同的标准为：<code>compareTo()</code>返回0.不再是<code>equals()</code>.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在Person类中去实现Comparable接口</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"类型不匹配。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">int</span> compare <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>compare <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> compare<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"芽衣"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"布洛尼亚"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李素裳"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李素裳"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> treeSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Person&#123;name='布洛尼亚', age=11&#125;Person&#123;name='李素裳', age=24&#125;Person&#123;name='李素裳', age=25&#125;Person&#123;name='琪亚娜', age=12&#125;Person&#123;name='芽衣', age=13&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="定制排序实现"><a href="#定制排序实现" class="headerlink" title="定制排序实现"></a>定制排序实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//先按年龄升序排，相同的不要</span><span class="token class-name">Comparator</span> comparator  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的类型不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>        <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">TreeSet</span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用有参构造器，传入定制排序对象</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"芽衣"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"布洛尼亚"</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李素裳"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李素裳1"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年龄相同，不可存入</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> treeSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Person&#123;name='布洛尼亚', age=11&#125;Person&#123;name='琪亚娜', age=12&#125;Person&#123;name='芽衣', age=13&#125;Person&#123;name='李素裳', age=24&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ol><li><p>集合Collection中存储的如果是自定义类的对象，需要自定义类重写哪个方法？为什么？</p><blockquote><p>对于<code>List</code>：重写<code>equals()</code>，因为list通过<code>equals()</code>判断元素是否重复</p><p>对于<code>Set</code>：重写<code>equals()</code>和<code>hashCode()</code>，因为Set通过<code>hashCode()</code>确定存储位置，再通过<code>equals()</code>确定是否重复</p><p>对于<code>TreeSet</code>：重写<code>compareTo()</code>或<code>compare()</code>，自然排序使用<code>compareTo()</code>，定制排序使用<code>compare()</code></p></blockquote></li><li><p><code>ArrayList,LinkedList,Vector</code>三者的相同点与不同点</p><blockquote><p>相同点：三者都是无序，不可重复的数据</p><p>不同点：Vector是线程安全的，效率低，</p><p><code>ArrayList</code>线程不安全，效率高，<code>Vector</code>与<code>ArrayList</code>底层都是通过数组实现的</p><p><code>LinkedList</code>线程不安全，是链表实现，插入删除效率高于<code>ArrayList</code>，但随机存取的效率反而低于<code>ArrayList</code>，需要根据场景选择。</p></blockquote></li></ol><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//练习：在List内去除重复数字值，要求尽量简单</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span> <span class="token function">duplicateList</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token function">duplicateList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> integer <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们通常利用Set不可重复的特性过滤重复数据。</p></blockquote><p>第二题，考察Set的特性和增加删除的细节</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一部分</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第二部分</span>    p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第三部分</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第四部分</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'AA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'CC'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'CC'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'CC'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1002</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'BB'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'CC'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'CC'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>id<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token char">'AA'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分，通过属性算出hash地址，注意存储的是地址值</p><img src="https://s2.loli.net/2023/02/10/gZumGBUlEO3SXyM.png" alt="第一部分" style="zoom:33%;" /><p>第二部分，修改p1的属性，修改后再执行删除，删除时是通过hash寻址的，虽然找到的地址并没有实际对象，但是还是进行删除，此时并没删除真正的p1对象。</p><p>所以输出<code>[Person&#123;id=1002, name=&#39;BB&#39;&#125;, Person&#123;id=1001, name=&#39;CC&#39;&#125;]</code></p><img src="https://s2.loli.net/2023/02/10/m3RXzYdqW2tpb7D.png" alt="image-20230210135327665" style="zoom:33%;" /><p>第三部分，通过hash值算出地址，由于hash值不重复，Set认为这个对象和p1并不重复，成功存入</p><p>所以输出<code>[Person&#123;id=1002, name=&#39;BB&#39;&#125;, Person&#123;id=1001, name=&#39;CC&#39;&#125;, Person&#123;id=1001, name=&#39;CC&#39;&#125;]</code></p><img src="https://s2.loli.net/2023/02/10/LtmoahGFupT3Wj4.png" alt="第三部分" style="zoom:33%;" /><p>第四部分，通过hash值算出地址，发现已经有元素，执行<code>equals()</code>算法发现元素属性不重复，成功存入</p><p>所以输出<code>[Person&#123;id=1002, name=&#39;BB&#39;&#125;, Person&#123;id=1001, name=&#39;CC&#39;&#125;, Person&#123;id=1001, name=&#39;CC&#39;&#125;, Person&#123;id=1001, name=&#39;AA&#39;&#125;]</code></p><p><img src="https://s2.loli.net/2023/02/10/kuYfEWl9v81sxzL.png" alt="第四部分"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-枚举类与注解</title>
      <link href="/2023/02/07/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%8E%E6%B3%A8%E8%A7%A3/"/>
      <url>/2023/02/07/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%B8%8E%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/08/PQEkKusxfo9HqCe.jpg" alt="5a2244b0c55dc"></p><p>本篇讲解java枚举类与注解</p><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><p>枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</p><p>当需要定义一组常量时，强烈建议使用枚举类</p><p>如果枚举类中只有一个对象，则可以作为单例模式的实现方式。</p><h2 id="如何定义枚举类"><a href="#如何定义枚举类" class="headerlink" title="如何定义枚举类"></a>如何定义枚举类</h2><h3 id="JDK5-0前-自定义枚举类"><a href="#JDK5-0前-自定义枚举类" class="headerlink" title="JDK5.0前-自定义枚举类"></a>JDK5.0前-自定义枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用自定义枚举类</span><span class="token keyword">class</span> <span class="token class-name">Status</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明Season对象的属性:private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> statusName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> statusDesc<span class="token punctuation">;</span>    <span class="token comment">//2.私有化类的构造器,并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token class-name">String</span> statusName<span class="token punctuation">,</span> <span class="token class-name">String</span> statusDesc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusName <span class="token operator">=</span> statusName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusDesc <span class="token operator">=</span> statusDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3.提供当前枚举类的多个对象：public static final的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Status</span> <span class="token constant">FREE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token string">"FREE"</span><span class="token punctuation">,</span><span class="token string">"摸鱼状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Status</span> <span class="token constant">BUSY</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token string">"BUSY"</span><span class="token punctuation">,</span><span class="token string">"忙碌中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Status</span> <span class="token constant">VOCATION</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token string">"VOCATION"</span><span class="token punctuation">,</span><span class="token string">"度假中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Status</span> <span class="token constant">DISSMISS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token string">"DISSMISS"</span><span class="token punctuation">,</span><span class="token string">"已离职"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> statusName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> statusDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4.其他诉求2：提供toString()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Status&#123;"</span> <span class="token operator">+</span>                <span class="token string">"statusName='"</span> <span class="token operator">+</span> statusName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", statusDesc='"</span> <span class="token operator">+</span> statusDesc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-0后-enum关键字枚举类"><a href="#5-0后-enum关键字枚举类" class="headerlink" title="5.0后-enum关键字枚举类"></a>5.0后-<code>enum</code>关键字枚举类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用自定义枚举类</span><span class="token keyword">enum</span> <span class="token class-name">Status</span><span class="token punctuation">&#123;</span><span class="token comment">//这部分要放在首位！！！</span>    <span class="token comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>    <span class="token function">FREE</span><span class="token punctuation">(</span><span class="token string">"FREE"</span><span class="token punctuation">,</span><span class="token string">"摸鱼状态"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BUSY</span><span class="token punctuation">(</span><span class="token string">"BUSY"</span><span class="token punctuation">,</span><span class="token string">"忙碌中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VOCATION</span><span class="token punctuation">(</span><span class="token string">"VOCATION"</span><span class="token punctuation">,</span><span class="token string">"度假中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DISSMISS</span><span class="token punctuation">(</span><span class="token string">"DISSMISS"</span><span class="token punctuation">,</span><span class="token string">"已离职"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.声明Season对象的属性:private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> statusName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> statusDesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Status</span><span class="token punctuation">(</span><span class="token class-name">String</span> statusName<span class="token punctuation">,</span> <span class="token class-name">String</span> statusDesc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusName <span class="token operator">=</span> statusName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>statusDesc <span class="token operator">=</span> statusDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> statusName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> statusDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>说明：定义的枚举类默认继承于<code>java.lang.Enum</code>类，里面已经定义了<code>toString()</code>方法，会自动输出枚举类对象的变量名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.toString():返回枚举类对象的名称</span><span class="token class-name">Status</span> busy <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">BUSY</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>busy<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BUSY</span><span class="token comment">//2.values():返回所有的枚举类对象构成的数组</span><span class="token class-name">Status</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[FREE, BUSY, VOCATION, DISSMISS]</span><span class="token comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span><span class="token class-name">Status</span> free <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"FREE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>free<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FREE</span><span class="token class-name">Status</span> free1 <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"FREE1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*如果没有objName的枚举类对象，则抛异常：IllegalArgumentException: No enum constant com.atguigu.yuan.Status.FREE1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用enum关键字定义的枚举类实现接口的情况"><a href="#使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="使用enum关键字定义的枚举类实现接口的情况"></a>使用<code>enum</code>关键字定义的枚举类实现接口的情况</h4><p>情况一：实现接口，在<code>enum</code>类中实现抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Showable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现抽象类</span><span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token keyword">implements</span> <span class="token class-name">Showable</span><span class="token punctuation">&#123;</span>    <span class="token function">FREE</span><span class="token punctuation">(</span><span class="token string">"FREE"</span><span class="token punctuation">,</span><span class="token string">"摸鱼状态"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">BUSY</span><span class="token punctuation">(</span><span class="token string">"BUSY"</span><span class="token punctuation">,</span><span class="token string">"忙碌中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">VOCATION</span><span class="token punctuation">(</span><span class="token string">"VOCATION"</span><span class="token punctuation">,</span><span class="token string">"度假中"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">DISSMISS</span><span class="token punctuation">(</span><span class="token string">"DISSMISS"</span><span class="token punctuation">,</span><span class="token string">"已离职"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个员工的状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Status</span> busy <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token constant">BUSY</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>busy<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//BUSY</span>busy<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这是一个员工的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>情况二：让枚举类的对象分别实现接口中的抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Showable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用自定义枚举类</span><span class="token keyword">enum</span> <span class="token class-name">Status</span> <span class="token keyword">implements</span> <span class="token class-name">Showable</span><span class="token punctuation">&#123;</span>    <span class="token comment">//重写每一个对象的show()方法</span>    <span class="token function">FREE</span><span class="token punctuation">(</span><span class="token string">"FREE"</span><span class="token punctuation">,</span><span class="token string">"摸鱼状态"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他正在摸鱼呢！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">BUSY</span><span class="token punctuation">(</span><span class="token string">"BUSY"</span><span class="token punctuation">,</span><span class="token string">"忙碌中"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他很勤奋！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">VOCATION</span><span class="token punctuation">(</span><span class="token string">"VOCATION"</span><span class="token punctuation">,</span><span class="token string">"度假中"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"他已经在享受了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">DISSMISS</span><span class="token punctuation">(</span><span class="token string">"DISSMISS"</span><span class="token punctuation">,</span><span class="token string">"已离职"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"都被炒鱿鱼咯！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Status</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*FREE他正在摸鱼呢！BUSY他很勤奋！VOCATION他已经在享受了！DISSMISS都被炒鱿鱼咯！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注解Annotation"><a href="#注解Annotation" class="headerlink" title="注解Annotation"></a>注解<code>Annotation</code></h1><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><p>从 JDK 5.0 开始, Java 增加了对元数据(<code>MetaData</code>) 的支持, 也就是Annotation(注解)</p><ul><li>Annotation 其实就是代码里的特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</li><li>Annotation 可以像修饰符一样被使用, 可用于修饰包,类, 构造器, 方法, 成员变量, 参数, 局部变量的声明, 这些信息被保存在 Annotation 的<code>“name=value”</code>对中。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE&#x2F;Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式</code>。</li><li>使用 Annotation 时要在其前面增加<code>@</code>符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</li></ul><blockquote><p><code>@author</code>标明开发该类模块的作者，多个作者之间使用,分割<br><code>@version</code> 标明该类模块的版本<br><code>@see</code> 参考转向，也就是相关主题<br><code>@since</code> 从哪个版本开始增加的<br><code>@param</code> 对方法中某参数的说明，如果没有参数就不能写<br><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写<br><code>@exception</code> 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写<br>    其中<br><code>@param @return 和 @exception</code> 这三个标记都是只用于方法的。<br><code>@param</code>的格式要求：<code>@param 形参名 形参类型 形参说明</code><br><code>@return</code> 的格式要求：<code>@return 返回值类型 返回值说明</code><br><code>@exception</code>的格式要求：<code>@exception 异常类型 异常说明</code><br><code>@param</code>和<code>@exception</code>可以并列多个</p></blockquote><p>举例一：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description 表示员工的状态 * @author hengxingstu * @version v1.0 * @date 2023-02-07 11:10:24 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Status</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/**     * 获取一个字符串在另一个字符串中出现的次数。     * @param str 要受检测的字符串     * @param checkStr 要检测的子串     * @return 如果出现，返回次数，如果没出现返回0     */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">String</span> checkStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例二：在编译时进行格式检查(JDK内置的三个基本注解)</p><ul><li><code>@Override</code>: 限定重写父类方法, 该注解只能用于方法</li><li><code>@Deprecated</code>: 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</li><li><code>@SuppressWarnings</code>: 抑制编译器警告</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"都被炒鱿鱼咯！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个过时方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在代码中加上过时注释，编译器会提示我们方法已经过时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/02/07/KM6S1RzNxOWhctr.png" alt="image-20230207203750211"></p><p>举例三：自定义注解</p><p>如何自定义注解：参照<code>@SuppressWarnings</code>定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如在类中我们可以打上注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>注解声明为：<code>@interface</code></li><li>内部定义成员，通常使用value表示</li><li>可以指定成员的默认值，使用default定义</li><li>如果自定义注解没有成员，表明是一个标识作用。</li></ol><p>如果注解有成员，在使用注解时，需要指明成员的值。</p><p>自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</p><p>自定义注解通常都会指明两个元注解：<code>Retention</code>、<code>Target</code>（元注解看下方）</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义</p><p>JDK5.0提供了4个标准的<code>meta-annotation</code>类型，分别是：</p><ul><li>Retention</li><li>Target</li><li>Documented</li><li>Inherited</li></ul><blockquote><p>元数据的理解：<code>String name = “hengxing”;</code></p><p>这句中最重要的信息就是<code>hengxing</code>这个字符串，而<code>name</code>和<code>String</code>都不过是对它的修饰。这就是元数据</p></blockquote><p><code>@Retention</code>: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命周期, <code>@Retention</code>包含一个<code>RetentionPolicy</code>类型的成员变量, 使用<code>@Retention</code>时必须为该<code>value</code>成员变量指定值:</p><ul><li><code>RetentionPolicy.SOURCE</code>: 在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释</li><li><code>RetentionPolicy.CLASS</code>: 在 class 文件中有效（即 class 保留） ， 当运行 Java 程序时, JVM 不会保留注解。 这是默认值</li><li><code>RetentionPolicy.RUNTIME</code>: 在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序可以通过反射获取该注释。</li></ul><p><code>@Target</code>: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。 <code>@Target</code>也包含一个名为<code>value</code>的成员变量。</p><p><img src="https://s2.loli.net/2023/02/07/kAt2rdc9XmpIv5H.png" alt="image-20230207211140144"></p><hr><p>下面这两个注解不常用</p><p><code>@Documented</code>: 用于指定被该元 Annotation 修饰的 Annotation 类将被<code>javadoc</code>工具提取成文档。默认情况下，<code>javadoc</code>是不包括注解的。</p><ul><li>定义为Documented的注解必须设置Retention值为RUNTIME。</li></ul><p><code>@Inherited</code>: 被它修饰的 Annotation 将具有继承性。如果某个类使用了被<code>@Inherited</code>修饰的 Annotation, 则其子类将自动具有该注解。</p><ul><li>比如：如果把标有<code>@Inherited</code>注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</li><li>实际应用中，使用较少</li></ul><h2 id="利用反射获取注解信息（了解）"><a href="#利用反射获取注解信息（了解）" class="headerlink" title="利用反射获取注解信息（了解）"></a>利用反射获取注解信息（了解）</h2><p>到反射时再仔细了解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token comment">//一定要设置为运行时，这个注解才会保留到运行过程当中，才能够通过程序获得</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnn</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyAnn</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token comment">//在类中标注</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取注解</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> annotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//@com.atguigu.yuan.MyAnn(value=hi)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDK-8-中注解的新特性"><a href="#JDK-8-中注解的新特性" class="headerlink" title="JDK 8 中注解的新特性"></a>JDK 8 中注解的新特性</h2><h3 id="可重复注解"><a href="#可重复注解" class="headerlink" title="可重复注解"></a>可重复注解</h3><p>重复声明某一注解</p><ol><li>在<code>MyAnnotation</code>注解类上声明<code>@Repeatable</code>，成员值为<code>MyAnnotations.class</code></li><li><code>MyAnnotation</code>的<code>Target</code>和<code>Retention</code>等元注解与<code>MyAnnotations</code>相同</li></ol><p>实操：</p><p>先声明<code>MyAnns</code>注解类，保持元注解相同</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnns</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MyAnn</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value是一个数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>MyAnn</code>中添加可重复注解<code>@Repeatable</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnns</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span><span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span><span class="token constant">TYPE_USE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnn</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可重复使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MyAnn</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MyAnn</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>这一部分涉及泛型的知识了解即可，不要深入</p><ul><li><code>ElementType.TYPE_PARAMETER</code>表示该注解能写在类型变量的声明语句中（如：泛型声明）。</li><li><code>ElementType.TYPE_USE</code>表示该注解能写在使用类型的任何语句中。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token comment">//可以参数的具体类型,TYPE_PARAMETER</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span><span class="token comment">//可以获取异常类型,TYPE_USE</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">String</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以获取泛型中的类型,TYPE_USE</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10L</span><span class="token punctuation">;</span><span class="token comment">//获取强转的类型,TYPE_USE</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-常用类-String、Date、Compare、Other</title>
      <link href="/2023/02/03/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2023/02/03/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/03/uwhRQAO6rqZgWVi.jpg" alt="5cb056d96f727"></p><p>本篇讲解java常用类</p><h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p>String:字符串，使用一对””引起来表示。</p><ol><li><p>String类被声明为final的，不可被继承。</p></li><li><p>String实现了<code>Serializable</code>接口：表示字符串是支持序列化的。</p><p>​ 实现了<code>Comparable</code>接口：表示String可以比较大小</p></li><li><p>String内部定义了<code>final char[] value</code>用于存储字符串数据</p></li><li><p>String:代表不可变的字符序列。简称：不可变性。</p><p>体现：</p><ul><li>当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行连接操作时，同上。</li><li>当调用String的<code>replace()</code>方法修改指定字符或字符串时，同上。</li></ul></li><li><p>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</p></li><li><p>字符串常量池中是不会存储相同内容的字符串的。</p></li></ol><p>String的实例化方式：</p><p>方式一：通过字面量定义的方式，如下图左</p><p>方式二：通过new + 构造器的方式，如下图右</p><p><img src="https://s2.loli.net/2023/02/03/Tf2BtRySPcNxZUh.png" alt="String的实例化方式对比"></p><blockquote><p>面试题：String s &#x3D; new String(“abc”);方式创建对象，在内存中创建了几个对象？</p><p>答：两个:一个是堆空间中new结构，另一个是<code>char[]</code>对应的常量池中的数据：”abc”</p></blockquote><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><ol><li>常量与常量的拼接结果在常量池。 且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量， 结果就在堆中，相当于new出来的对象对象中有一个value指向常量池的地址</li><li>如果拼接的结果调用<code>intern()</code>方法， 返回值就是常量池的地址</li></ol><img src="https://s2.loli.net/2023/02/03/RLt5rxAZ3H9NYXb.png" alt="image-20230203155553307" style="zoom:50%;" /><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringTest</span> ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//good</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//best</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，初始化str和ch时的内存模型为：</p><img src="https://s2.loli.net/2023/02/03/ByhQImlqoidscuL.png" alt="image-20230203162706600" style="zoom:33%;" /><p>进入<code>change()</code>方法后：</p><p>声明了一个形参str，形参传入的是地址，相当于直接指向value。ch则是数组，直接指向数组地址。</p><p>str通过字面量赋值修改，由于String值的不可变性，直接在常量池中重新开辟空间赋值。现在，两个str就有区别了，一个是change方法中的str，一个是ex对象中的str属性，它们分别指向不同的地址。</p><p>ch也进行了修改，数组可以进行直接修改，所以test被修改为了best。</p><img src="https://s2.loli.net/2023/02/03/erLJtjcRyEhf3QA.png" alt="image-20230203163507479" style="zoom:33%;" /><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>为了进一步说明字符串的常量与变量间的区别，我们有下面的例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hellojava"</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//现在他是一个常量了</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token string">"java"</span> <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">+</span> <span class="token string">"java"</span> <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s存储在常量池中，s1、s2相同，正常情况下参与运算会被看作是变量，变量地址加常量地址，当然不等于常量的地址了。但现在我们把s1标为常量，再去计算，就是常量间的运算（先将字符串拼接，然后发现常量池中已经有<code>&quot;hellojava&quot;</code>了，就直接使用之前的地址。），所以结果是true。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>字符串处理：<br><code>int length()</code>：返回字符串的长度： return value.length<br><code>char charAt(int index)</code>： 返回某索引处的字符return value[index]<br><code>boolean isEmpty()</code>：判断是否是空字符串：return value.length &#x3D;&#x3D; 0<br><code>String toLowerCase()</code>：使用默认语言环境，将 String 中的所有字符转换为小写<br><code>String toUpperCase()</code>：使用默认语言环境，将 String 中的所有字符转换为大写<br><code>String trim()</code>：返回字符串的副本，忽略前导空白和尾部空白<br><code>boolean equals(Object obj)</code>：比较字符串的内容是否相同<br><code>boolean equalsIgnoreCase(String anotherString)</code>：与equals方法类似，忽略大小写<br><code>String concat(String str)</code>：将指定字符串连接到此字符串的结尾。 等价于用“+”<br><code>int compareTo(String anotherString)</code>：比较两个字符串的大小<br><code>String substring(int beginIndex)</code>：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。<br><code>String substring(int beginIndex, int endIndex)</code> ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</p><blockquote><p>注意，只要涉及到开始索引和结束索引的方法，基本都是左闭右开。顾头不顾腚~</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">" ab bc "</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//7</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// AB BC </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ab bc</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ac"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">" A Bc "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ab bc def</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-68</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ab bc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>前缀后缀：<br><code>boolean endsWith(String suffix)</code>：测试此字符串是否以指定的后缀结束<br><code>boolean startsWith(String prefix)</code>：测试此字符串是否以指定的前缀开始<br><code>boolean startsWith(String prefix, int toffset)</code>：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"While the world sleep, you dream."</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Wh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ile"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"eam."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>查找字符：<br><code>boolean contains(CharSequence s)</code>：当且仅当此字符串包含指定的 char 值序列时，返回 true<br><code>int indexOf(String str)</code>：返回指定子字符串在此字符串中第一次出现处的索引<br><code>int indexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br><code>int lastIndexOf(String str)</code>：返回指定子字符串在此字符串中最右边出现处的索引<br><code>int lastIndexOf(String str, int fromIndex)</code>：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</p><p>注：<code>indexOf</code>和<code>lastIndexOf</code>方法如果未找到都是返回<code>-1</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"While the world sleep, you dream."</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//13</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//17</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>替换<br><code>String replace(char oldChar, char newChar)</code>：返回一个新的字符串，它是通过用<code>newChar</code>替换此字符串中出现的所有<code>oldChar</code>得到的。<br><code>String replace(CharSequence target, CharSequence replacement)</code>：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。<br><code>String replaceAll(String regex, String replacement)</code>：使用给定的<code>replacement</code>替换此字符串所有匹配给定的正则表达式的子字符串。<br><code>String replaceFirst(String regex, String replacement)</code>：使用给定的<code>replacement</code>替换此字符串匹配给定的正则表达式的第一个子字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Tom is Tommy."</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'T'</span><span class="token punctuation">,</span> <span class="token char">'J'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Jom is Jommy.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Jim"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Jim is Jimmy.</span>str <span class="token operator">=</span> <span class="token string">"12Tom34Tommy5"</span><span class="token punctuation">;</span><span class="token comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span><span class="token class-name">String</span> string <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"^,|,$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom,Tommy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>匹配<br><code>boolean matches(String regex)</code>：告知此字符串是否匹配给定的正则表达式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span><span class="token keyword">boolean</span> matches <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">String</span> tel <span class="token operator">=</span> <span class="token string">"0571-4534289"</span><span class="token punctuation">;</span><span class="token comment">//判断这是否是一个杭州的固定电话</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> tel<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"0571-\\d&#123;7,8&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>切片<br><code>String[] split(String regex)</code>：根据给定正则表达式的匹配拆分此字符串。<br><code>String[] split(String regex, int limit)</code>：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">str <span class="token operator">=</span> <span class="token string">"Tom|Tommy|Jimmy"</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">"Tom.Tommy.Jimmy"</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*TomTommyJimmyTomTommyJimmy*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String-与基本数据类型、包装类之间的转换"><a href="#String-与基本数据类型、包装类之间的转换" class="headerlink" title="String 与基本数据类型、包装类之间的转换"></a>String 与基本数据类型、包装类之间的转换</h2><p>String –&gt; 基本数据类型、包装类：调用包装类的静态方法：<code>parseXxx(str)</code></p><p>基本数据类型、包装类 –&gt; String：调用String重载的<code>valueOf(xxx)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String-与-char-之间的转换"><a href="#String-与-char-之间的转换" class="headerlink" title="String 与 char[]之间的转换"></a>String 与 char[]之间的转换</h2><p>String –&gt; <code>char[]</code>：调用String的<code>toCharArray()</code></p><p><code>char[]</code>–&gt; String：调用String的构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String-与-byte-之间的转换"><a href="#String-与-byte-之间的转换" class="headerlink" title="String 与 byte[]之间的转换"></a>String 与 byte[]之间的转换</h2><p>编码：String –&gt; <code>byte[]</code>:调用String的<code>getBytes()</code></p><p>​字符串 –&gt;字节  (看得懂 —&gt;看不懂的二进制数据)</p><p>解码：<code>byte[]</code> –&gt; String:调用String的构造器</p><p>​编码的逆过程，字节 –&gt; 字符串 （看不懂的二进制数据 —&gt; 看得懂）</p><p>说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc123爱你"</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认使用UTF-8编码</span><span class="token comment">//[97, 98, 99, 49, 50, 51, -25, -120, -79, -28, -67, -96]</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解码，默认使用UTF-8</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc123爱你</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用gbk字符编码</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[97, 98, 99, 49, 50, 51, -80, -82, -60, -29]</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解码，默认使用UTF-8</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc123����</span><span class="token class-name">String</span> gbk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解码，使用GBK</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gbk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc123爱你</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><h3 id="模拟一个trim方法，去除字符串两端的空格。"><a href="#模拟一个trim方法，去除字符串两端的空格。" class="headerlink" title="模拟一个trim方法，去除字符串两端的空格。"></a>模拟一个trim方法，去除字符串两端的空格。</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//先把String转为Char数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历数组，返回开头和末尾字符的索引</span>    <span class="token keyword">int</span> foreIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rearIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//查找首位字符索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现空格！现在记录空格索引："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//出现过空格了</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现了非空格内容。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                foreIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//检测到出现非空格内容前有空格，记录该位置，并退出遍历</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查找末位字符索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现空格！现在记录空格索引："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//出现过空格了</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现了非空格内容。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                rearIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果首末位本身就有字符，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        foreIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rearIndex <span class="token operator">=</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符首位索引是："</span> <span class="token operator">+</span> foreIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符末位索引是："</span> <span class="token operator">+</span> rearIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取出新的字符串        </span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>foreIndex<span class="token punctuation">,</span> <span class="token operator">++</span>rearIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码对比分析：</p><blockquote><p>Returns a string whose value is this string, with any leading and trailing whitespace removed.</p><p>If this String object represents an empty character sequence, or the first and last characters of character sequence represented by this String object both have codes greater than ‘\u0020’ (the space character), then a reference to this String object is returned.</p><p>Otherwise, if there is no character with a code greater than ‘\u0020’ in the string, then a String object representing an empty string is returned.</p><p>Otherwise, let k be the index of the first character in the string whose code is greater than ‘\u0020’, and let m be the index of the last character in the string whose code is greater than ‘\u0020’. A String object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of this.substring(k, m + 1).</p><p>This method may be used to trim whitespace (as defined above) from the beginning and end of a string.</p><p>Returns:</p><p>A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space.</p><p>External and inferred annotations:</p><p>@org.jetbrains.annotations.NotNull @org.jetbrains.annotations.Contract(pure &#x3D; true)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录字串首位索引</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment">/* avoid getfield opcode 避免获取字段操作码 */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        st<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此时st &lt; len表示判断到子串开头即可</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>st <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">substring</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看第一个循环，<code>st &lt; len</code>的条件表示首位索引小于字符串长度，保证循环整个字符串。<code>val[st] &lt;= &#39; &#39;</code>的条件表示字符的编码小于空格（空格编码为32），如果两个条件都满足说明出现空格等字符，不满足则要么是开头没有出现空格，要么是整个字符串都是空格。</p><p>第二个循环是从后向前遍历，同时查看是否为空格等字符，两个条件都满足，说明出现空格，不满足要么末尾没有出现空格，要么是整个字符串都是空格。</p><p>最后<code>(st &gt; 0) || (len &lt; value.length)</code>条件通过（st和len发生了改变）表示：</p><ul><li>前后任意位置发现了空格 –&gt; <code>substring(st, len)</code>取子串</li><li>字符串全为空格 –&gt;  <code>substring(st, len)</code>取子串，会返回空的字符串</li></ul><h3 id="将一个字符串进行反转。将字符串中指定部分进行反转。"><a href="#将一个字符串进行反转。将字符串中指定部分进行反转。" class="headerlink" title="将一个字符串进行反转。将字符串中指定部分进行反转。"></a>将一个字符串进行反转。将字符串中指定部分进行反转。</h3><p>比如“abcdefg”反转为”abfedcg”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”* @param startIndex 反转字符串开头索引* @param endIndex  反转字符串末尾索引* @return 反转后的数组*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//反转数组</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> reverse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    reverse <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先把之前的数组复制一份</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">,</span>j <span class="token operator">=</span> endIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        reverse<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//改进后</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//反转数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">,</span>j <span class="token operator">=</span> endIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//i &lt; j是该算法的精髓</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方式三：使用String的拼接</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第一部分</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第二部分</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第三部分</span>    s <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方式四：使用StringBuilder的拼接</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第一部分</span>    <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第二部分</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//第三部分</span>    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取一个字符串在另一个字符串中出现的次数。"><a href="#获取一个字符串在另一个字符串中出现的次数。" class="headerlink" title="获取一个字符串在另一个字符串中出现的次数。"></a>获取一个字符串在另一个字符串中出现的次数。</h3><p>比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 获取一个字符串在另一个字符串中出现的次数。*       比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数* @param str 要受检测的字符串* @param checkStr 要检测的子串* @return 如果出现，返回次数，如果没出现返回0*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">String</span> checkStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> checkChars <span class="token operator">=</span> checkStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outter<span class="token operator">:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> checkChars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> checkChars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> checkChars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span> outter<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//方式二：利用indexOf()检查字符串</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token class-name">String</span> checkStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> checkStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//循环字符串直到找不到为止</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>checkStr<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        index <span class="token operator">+=</span> checkStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每次开始寻找的位置==上次找到的字符出现位置+字符长度</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取两个字符串中最大相同子串。"><a href="#获取两个字符串中最大相同子串。" class="headerlink" title="获取两个字符串中最大相同子串。"></a>获取两个字符串中最大相同子串。</h3><p>比如：<code>str1 = &quot;abcwerthelloyuiodef“;``str2 = &quot;cvhellobnm&quot;</code><br>提示：将短的那个串进行长度依次递减的子串与较长的串比较。<br>前提：两个字符串中只有一个最大相同字串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMaxSubString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> longerStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1<span class="token operator">:</span>str2<span class="token punctuation">;</span>    <span class="token class-name">String</span> shortStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1<span class="token operator">:</span>str2<span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> shortStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span>k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//k &lt;= length k现在是索引数，要能取到才行</span>            <span class="token class-name">String</span> subString <span class="token operator">=</span> shortStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>longerStr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> subString<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对字符串中字符进行自然顺序排序。"><a href="#对字符串中字符进行自然顺序排序。" class="headerlink" title="对字符串中字符进行自然顺序排序。"></a>对字符串中字符进行自然顺序排序。</h3><p>提示：</p><ol><li><p>字符串变成字符数组。</p></li><li><p>对数组排序，选择，冒泡，<code>Arrays.sort();</code></p></li><li><p>将排序后的数组变成字符串。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方式一：系统快排</span>    <span class="token comment">//方式二：手写冒泡</span>    <span class="token keyword">boolean</span> is_swap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> chars<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                chars<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                is_swap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is_swap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                is_swap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="StringBuffer、StringBuilder类"><a href="#StringBuffer、StringBuilder类" class="headerlink" title="StringBuffer、StringBuilder类"></a>StringBuffer、StringBuilder类</h1><h3 id="与String比较"><a href="#与String比较" class="headerlink" title="与String比较"></a>与String比较</h3><p>String、StringBuffer、StringBuilder三者的异同？</p><ul><li>String：不可变的字符序列；底层使用<code>char[]</code>存储</li><li>StringBuffer：可变的字符序列；线程安全的，效率低；底层使用<code>char[]</code>存储</li><li>StringBuilder：可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用<code>char[]</code>存储</li></ul><p>源码分析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[0];</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[]&#123;'a','b','c'&#125;;</span><span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char[16];底层创建了一个长度是16的数组。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0，显示的是实际写入的字符长度。</span>sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[0] = 'a';</span>sb1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//value[1] = 'b';</span><span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//char[] value = new char["abc".length() + 16];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题1. <code>System.out.println(sb2.length());</code>输出结果为？</p><p>答案：3。只写入了3个字符。而底层<code>char[]</code>数组的长度为19。</p><p>问题2. 扩容问题：如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。如何进行扩容</p><p>答案：默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</p><p>指导意义：</p><p>​开发中建议大家使用：<code>StringBuffer(int capacity)</code>或<code>StringBuilder(int capacity)</code>，因为它们可以改变长度随时修改数据，再根据是否需要解决线程安全，选其一（需要线程安全选<code>StringBuffer(int capacity)</code>）。</p><h3 id="其常用方法"><a href="#其常用方法" class="headerlink" title="其常用方法"></a>其常用方法</h3><p>有以下方法：<br><code>StringBuffer append(xxx)</code>：提供了很多的<code>append()</code>方法，用于进行字符串拼接<br><code>StringBuffer delete(int start,int end)</code>：删除指定位置的内容<br><code>StringBuffer replace(int start, int end, String str)</code>：把[start,end)位置替换为str<br><code>StringBuffer insert(int offset, xxx)</code>：在指定位置插入xxx<br><code>StringBuffer reverse()</code> ：把当前字符序列逆转<br><code>public int indexOf(String str)</code><br><code>public String substring(int start,int end)</code>:返回一个从start开始到end索引结束的左闭右开区间的子字符串<br><code>public int length()</code><br><code>public char charAt(int n )</code><br><code>public void setCharAt(int n ,char ch)</code></p><p>总结：<br>        增：<code>append(xxx)</code><br>        删：<code>delete(int start,int end)</code><br>        改：<code>setCharAt(int n ,char ch)</code> &#x2F; <code>replace(int start, int end, String str)</code><br>        查：<code>charAt(int n)</code><br>        插：<code>insert(int offset, xxx)</code><br>        长度：<code>length();</code><br>        ⭐遍历：<code>for()</code> + <code>charAt()</code> &#x2F; <code>toString()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StringBuilder</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"0123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//01234567</span>str<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//012345</span>str<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//01234a</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"45"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//012345</span>str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//012hello345</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//11</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//012hello345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1><h2 id="System类时间"><a href="#System类时间" class="headerlink" title="System类时间"></a>System类时间</h2><p>使用<code>System</code>类的<code>currentTimeMillis()</code>方法获取当前时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1675588908461</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JDK-8之前日期和时间的API"><a href="#JDK-8之前日期和时间的API" class="headerlink" title="JDK 8之前日期和时间的API"></a>JDK 8之前日期和时间的API</h2><h3 id="java-util-Date类及其子类"><a href="#java-util-Date类及其子类" class="headerlink" title="java.util.Date类及其子类"></a><code>java.util.Date</code>类及其子类</h3><p><code>java.util.Date</code>类<br>           |—<code>java.sql.Date</code>类</p><ol><li>两个构造器的使用<ul><li>构造器一：<code>Date()</code>：创建一个对应当前时间的Date对象</li><li>构造器二：创建指定毫秒数的Date对象</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1675563865916L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.util.Date有两个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>两个方法的使用<ul><li><code>toString()</code>:显示当前的年、月、日、时、分、秒</li><li><code>getTime()</code>:获取当前Date对象对应的毫秒数。（时间戳）</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1675564133278</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sun Feb 05 10:28:53 CST 2023</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p><code>java.sql.Date</code>对应着数据库中的日期类型的变量</p><ul><li><p>如何实例化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">1675563865916L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java.sql.Date只有这一个构造器可用，必须填上时间戳</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-05java.sql.Date只会输出年月日</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1675563865916</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如何将<code>java.util.Date</code>对象转换为<code>java.sql.Date</code>对象</p><p>通过时间戳</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1675563865916L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="SimpleDateFormat类"><a href="#SimpleDateFormat类" class="headerlink" title="SimpleDateFormat类"></a><code>SimpleDateFormat</code>类</h3><p>Date类的API不易于国际化，大部分被废弃了，<code>java.text.SimpleDateFormat</code>类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</p><p>它允许进行</p><ul><li><p>格式化：日期–&gt;文本</p><p><code>SimpleDateFormat()</code>：默认的模式和语言环境创建对象</p><p><code>public SimpleDateFormat(String pattern)</code>：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用–&gt;<code>public String format(Date date)</code>方法格式化时间对象date</p></li><li><p>解析：文本–&gt;日期</p><p><code>public Date parse(String source)</code>：从给定字符串的开始解析文本，以生成一个日期。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用默认构造器</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2/6/23 12:11 PM</span><span class="token comment">//解析</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"2/6/23 11:25 AM"</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Feb 06 11:25:00 CST 2023</span><span class="token comment">//按照指定的方法格式化和解析，调用带参的构造器</span><span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日 HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式化</span><span class="token class-name">String</span> format1 <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023年02月06日 12时19分47秒</span><span class="token comment">//解析,解析时必须使用与SimpleDateFormat相同的日期格式</span><span class="token class-name">Date</span> parse1 <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2023年02月06日 12时18分56秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Feb 06 12:18:56 CST 2023</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日期格式的字母含义：</p><img src="https://s2.loli.net/2023/02/06/45MAlR8uheUOcqK.png" alt="image-20230206150552876" style="zoom:50%;" /><h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a><code>Calendar</code>类</h3><p><code>Calendar</code>是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p><p>获取Calendar实例的方法</p><ul><li><p>使用<code>Calendar.getInstance()</code>方法</p><p><code>Calendar calendar = Calendar.getInstance();</code>即可实例化</p></li><li><p>调用它的子类<code>GregorianCalendar</code>的构造器。（不常用）</p></li></ul><p> 一个Calendar的实例是系统时间的抽象表示，通过<code>get(int field)</code>方法来取得想要的时间信息。比如<code>YEAR</code>、<code>MONTH</code>、<code>DAY_OF_WEEK</code>、<code>HOUR_OF_DAY</code> 、<code>MINUTE</code>、<code>SECOND</code></p><ul><li><p><code>public void get(int field,int value)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>public void set(int field,int value)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>public void add(int field,int amount)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>与Date转换</p><ul><li><p><code>public final Date getTime()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> time <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>public final void setTime(Date date)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><p> 注意：</p><ul><li>获取月份时：一月是0，二月是1，以此类推，12月是11</li><li>获取星期时：周日是1，周二是2  。。。。。周六是7</li></ul><h2 id="JDK-8中新的日期和时间API"><a href="#JDK-8中新的日期和时间API" class="headerlink" title="JDK 8中新的日期和时间API"></a>JDK 8中新的日期和时间API</h2><p>为啥要引入新的时间api？来看看旧版api有多变态</p><p>用我们之前的Date类生成2023年2月6日的日期</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你以为是这样？</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Mar 06 00:00:00 CST 3923</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>错了，这样给出的是3923年3月6日，只有日是对的。这是因为Date中的年份是从1900开始的，而月份都从0开始。所以要想得到正确的日期，必须要使用偏移量。像这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2023</span> <span class="token operator">-</span> <span class="token number">1900</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Mon Feb 06 00:00:00 CST 2023</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>太变态了，不过幸好有外部的包可以使用，它叫做：<code>Joda-Time</code>，java8之前我们通过maven引入即可，java8之后官方引入了这个包，我们可以直接使用。</p><h3 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h3><p>java新的日期包有：</p><blockquote><p><code>java.time</code> – 包含值对象的基础包<br>       <code>java.time.chrono</code> – 提供对不同的日历系统的访问<br>       <code>java.time.format</code> – 格式化和解析时间和日期<br>       <code>java.time.temporal</code> – 包括底层框架和扩展特性<br>       <code>java.time.zone</code> – 包含时区支持的类</p></blockquote><p> <code>LocalDate、LocalTime、LocalDateTime</code> 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p><ul><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul><p>这三个类拥有相同的方法，不同的是只包含日期或时间而已。<code>LocalDateTime</code>最常用。</p><p>方法列举：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>now() / now(ZoneId zone)</code></td><td align="center">静态方法，根据当前时间创建对象&#x2F;指定时区的对象</td></tr><tr><td align="center"><code>of()</code></td><td align="center">静态方法，根据指定日期&#x2F;时间创建对象</td></tr><tr><td align="center"><code>getDayOfMonth()/getDayOfYear()</code></td><td align="center">获得月份天数(1-31) &#x2F;获得年份天数(1-366)</td></tr><tr><td align="center"><code>getDayOfWeek()</code></td><td align="center">获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td align="center"><code>getMonth()</code></td><td align="center">获得月份, 返回一个 Month 枚举值</td></tr><tr><td align="center"><code>getMonthValue() / getYear()</code></td><td align="center">获得月份(1-12) &#x2F;获得年份</td></tr><tr><td align="center"><code>getHour()/getMinute()/getSecond()</code></td><td align="center">获得当前对象对应的小时、分钟、秒</td></tr><tr><td align="center"><code>withDayOfMonth()/withDayOfYear()/</code><br/><code>withMonth()/withYear()</code></td><td align="center">将月份天数、年份天数、月份、年份<br/>修改为指定的值并返回新的对象</td></tr><tr><td align="center"><code>plusDays()/plusWeeks()</code><br/><code>plusMonths()/plusYears()/plusHours()</code></td><td align="center">向当前对象添加几天、几周、<br>几个月、几年、几小时</td></tr><tr><td align="center"><code>minusMonths() / minusWeeks()/</code><br/><code>minusDays()/minusYears()/minusHours()</code></td><td align="center">从当前对象减去几月、几周、几天、<br/>几年、几小时</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//now()方法获取当前时间</span><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06</span><span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//22:35:26.178</span><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06T22:35:26.178</span><span class="token comment">//of()</span><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06T22:53:23</span><span class="token comment">//getXxx()</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MONDAY</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FEBRUARY</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//23</span><span class="token comment">//withXxx(),修改时间。由于不可变性，所以返回一个日期对象。</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改时间为3点：2023-02-06T03:13:50.929</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改日期为22号：2023-02-22T23:13:50.929</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">withDayOfYear</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改日期为一年中的第234天：2023-08-22T23:13:50.929</span><span class="token comment">//plusXxx()，加上一段时间。由于不可变性，所以返回一个日期对象。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-04-06T23:33:21.147</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-09T23:33:21.147</span><span class="token comment">//minusXxx()，减去一段时间。由于不可变性，所以返回一个日期对象。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-04T23:34:58.746</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06T20:34:58.746</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="瞬时：Instant"><a href="#瞬时：Instant" class="headerlink" title="瞬时：Instant"></a>瞬时：Instant</h3><p>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。</p><p><code>java.time</code>包通过值类型<code>Instant</code>提供机器视图，不提供处理人类意义上的时间单位。<code>Instant</code>表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为<code>java.time</code>包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>now()</code></td><td align="center"><strong>静态方法</strong>，返回默认UTC时区的Instant类的对象</td></tr><tr><td align="center"><code>ofEpochMilli(long epochMilli)</code></td><td align="center"><strong>静态方法</strong>，返回在1970-01-01 00:00:00基础上<br/>加上指定毫秒数之后的Instant类的对象</td></tr><tr><td align="center"><code>atOffset(ZoneOffset offset)</code></td><td align="center">结合即时的偏移来创建一个 OffsetDateTime</td></tr><tr><td align="center"><code>toEpochMilli()</code></td><td align="center">返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳</td></tr></tbody></table><p>使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06T15:58:40.700Z</span><span class="token comment">//默认提供的是本初子午线时间，北京时间加上8小时即可</span><span class="token class-name">OffsetDateTime</span> beijingTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//atOffset()方法调整时差</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beijingTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-06T23:58:40.700+08:00</span><span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取时间戳（自1970年1月1日0时0分0秒（UTC）开始的秒数）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1675699348497</span><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1675700191827L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以某一时刻shi'li</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-07T00:16:31.827+08:00为了更好展示添加了时区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DateTimeFormatter类"><a href="#DateTimeFormatter类" class="headerlink" title="DateTimeFormatter类"></a><code>DateTimeFormatter</code>类</h3><p><code>java.time.format.DateTimeFormatter</code>类：该类提供了三种格式化方法：</p><ul><li><p>预定义的标准格式。（不常用）</p><p>如：<code>ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_LOCAL_DATE_TIME</span><span class="token punctuation">;</span><span class="token comment">//为了显示出来，我们进行格式化</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> format <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-07T10:36:22.118</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时生成的是一个格式，将实现<code>java.time.temporal.TemporalAccessor</code>接口的时间对象放进它的<code>format()</code>方法就可以实例化一个标准格式的时间。</p></li><li><p>本地化相关的格式。如：<code>ofLocalizedDateTime(FormatStyle.LONG)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span><span class="token constant">LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> formated_time <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formated_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//February 7, 2023 11:01:28 AM CT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：使用<code>FormatStyle.LONG</code>格式时可能会碰到unchecked异常，加上时区即可。</p><p>根据<a href="https://stackoverflow.com/questions/48731863/datetimeexception-while-using-datetimeformatter-oflocalizedtimeformatstyle-full">社区中的回答</a>，这大概率是LONG格式在输出时需要时区信息，而formatter中默认没有这个信息，导致了错误。</p></li><li><p>自定义的格式。如：<code>ofPattern(“yyyy-MM-dd hh:mm:ss”)</code>（最常用）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> formated_time <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>formated_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2023-02-07 11:10:24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>方法列表：</p><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>ofPattern(String pattern)</code></td><td align="center">静 态 方 法 ， 返 回 一 个 指 定 <br/>字 符 串 格 式 的<code>DateTimeFormatter</code></td></tr><tr><td align="center"><code>format(TemporalAccessor t)</code></td><td align="center">格式化一个日期、时间，返回字符串</td></tr><tr><td align="center"><code>parse(CharSequence text)</code></td><td align="center">将指定格式的字符序列解析为一个日期、时间</td></tr></tbody></table><h3 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h3><ul><li><code>ZoneId</code>：该类中包含了所有的时区信息，一个时区的ID，如 <code>Europe/Paris</code></li><li><code>ZonedDateTime</code>：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe&#x2F;Paris。</li><li>其中每个时区都对应着ID，地区ID都为“{区域}&#x2F;{城市}”的格式，例如：Asia&#x2F;Shanghai等</li><li>Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</li><li>持续时间：Duration，用于计算两个“时间”间隔</li><li>日期间隔：Period，用于计算两个“日期”间隔</li><li><code>TemporalAdjuster</code> : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</li><li><code>TemporalAdjusters</code> : 该类通过静态方法<code>firstDayOfXxx()/lastDayOfXxx()/nextXxx()</code>提供了大量的常用<code>TemporalAdjuster</code>的实现。</li></ul><h4 id="参考：与传统日期处理的转换"><a href="#参考：与传统日期处理的转换" class="headerlink" title="参考：与传统日期处理的转换"></a>参考：与传统日期处理的转换</h4><table><thead><tr><th align="center">类</th><th align="right">To 遗留类</th><th align="left">From 遗留类</th></tr></thead><tbody><tr><td align="center"><code>java.time.Instant</code>与<code>java.util.Date</code></td><td align="right"><code>Date.from(instant)</code></td><td align="left"><code>Date.from(instant)</code></td></tr><tr><td align="center"><code>java.time.Instant</code>与<code> java.sql.Timestamp</code></td><td align="right"><code>Timestamp.from(instant)</code></td><td align="left"><code>timestamp.toInstant()</code></td></tr><tr><td align="center"><code>java.time.ZonedDateTime</code>与<code>java.util.GregorianCalendar</code></td><td align="right"><code>GregorianCalendar.from(zonedDateTime)</code></td><td align="left"><code>cal.toZonedDateTime()</code></td></tr><tr><td align="center"><code>java.time.LocalDate/LocalTime</code>与 <code>java.sql.Time</code></td><td align="right"><code>Date.valueOf(localDate)</code></td><td align="left"><code>date.toLocalDate()</code></td></tr><tr><td align="center"><code>java.time.LocalDateTime</code>与<code>java.sql.Timestamp</code></td><td align="right"><code>Timestamp.valueOf(localDateTime)</code></td><td align="left"><code>timestamp.toLocalDateTime()</code></td></tr><tr><td align="center"><code>java.time.ZoneId</code>与 <code>java.util.TimeZone</code></td><td align="right"><code>Timezone.getTimeZone(id)</code></td><td align="left"><code>timeZone.toZoneId()</code></td></tr><tr><td align="center"><code>java.time.format.DateTimeFormatter</code> 与<code>java.text.DateFormat</code></td><td align="right"><code>formatter.toFormat()</code></td><td align="left">无</td></tr></tbody></table><h1 id="比较类"><a href="#比较类" class="headerlink" title="比较类"></a>比较类</h1><p>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。</p><p>Java实现对象排序的方式有两种：</p><ul><li>自然排序：<code>java.lang.Comparable</code></li><li>定制排序：<code>java.util.Comparator</code></li></ul><h2 id="Comparable接口-自然排序"><a href="#Comparable接口-自然排序" class="headerlink" title="Comparable接口-自然排序"></a>Comparable接口-自然排序</h2><h3 id="对于String类、包装类"><a href="#对于String类、包装类" class="headerlink" title="对于String类、包装类"></a>对于String类、包装类</h3><p>像String、包装类等实现了<code>Comparable</code>接口，重写了<code>compareTo(obj)</code>方法，给出了比较两个对象大小的方式。重写<code>compareTo(obj)</code>方法以后，进行了从小到大的排列。我们直接使用即可</p><p>重写<code>compareTo(obj)</code>的规则：</p><blockquote><p>如果当前对象this大于形参对象obj，则返回正整数</p><p>如果当前对象this小于形参对象obj，则返回负整数</p><p>如果当前对象this等于形参对象obj，则返回零。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部调用了重写的compareTo(obj)方法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[AA, CC, DD, GG, JJ, KK, MM]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="对于自定义类"><a href="#对于自定义类" class="headerlink" title="对于自定义类"></a>对于自定义类</h3><p>对于自定义类来说，如果需要排序，我们可以让自定义类实现<code>Comparable</code>接口，重写<code>compareTo(obj)</code>方法。在<code>compareTo(obj)</code>方法中指明如何排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">/*    省略构造器，String等方法    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的类型不是Person！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">></span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> person<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年龄相同比较姓名</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以进行比较</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"恒星"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"芽衣"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"布洛尼亚"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"无量塔 姬子"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> people<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Person&#123;name='布洛尼亚', age=16&#125;Person&#123;name='琪亚娜', age=18&#125;Person&#123;name='芽衣', age=18&#125;Person&#123;name='恒星', age=22&#125;Person&#123;name='无量塔 姬子', age=22&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Comparator接口-定制排序"><a href="#Comparator接口-定制排序" class="headerlink" title="Comparator接口-定制排序"></a>Comparator接口-定制排序</h2><p>当元素的类型没有实现<code>java.lang.Comparable</code>接口而又不方便修改代码，或者实现了<code>java.lang.Comparable</code>接口的排序规则不适合当前的操作，那么可以考虑使用<code>Comparator</code>的对象来排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//自己定制一个排序方法，这个方法可能只是临时用一下</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的参数不是String类型。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从高到低排列</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于自定义对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"恒星"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"芽衣"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"琪亚娜"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"布洛尼亚"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    people<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"无量塔 姬子"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//之前的排序不符合我们的要求，我们自己重新定制一个</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span><span class="token comment">//先按照姓名升序排列，再按照年龄升序排列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的类型不是Person！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>        <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>        <span class="token comment">//方式一：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> person2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> person1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//方式二：这样似乎更好？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> person2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> person1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> person1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*[Person&#123;name='布洛尼亚', age=16&#125;,Person&#123;name='恒星', age=22&#125;,Person&#123;name='无量塔 姬子', age=22&#125;,Person&#123;name='琪亚娜', age=18&#125;,Person&#123;name='芽衣', age=18&#125;]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Comparable接口与Comparator的使用的对比"><a href="#Comparable接口与Comparator的使用的对比" class="headerlink" title="Comparable接口与Comparator的使用的对比"></a>Comparable接口与Comparator的使用的对比</h2><p>Comparable接口的方式一旦确定，保证Comparable接口实现类的对象在任何位置都可以比较大小。Comparator接口属于临时性的比较。</p><h1 id="其他类"><a href="#其他类" class="headerlink" title="其他类"></a>其他类</h1><h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p><ul><li><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实<br>例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便<br>的进行调用。</p></li><li><p>成员变量</p><ul><li>System类内部包含in、out和err三个成员变量，分别代表标准输入流<br>(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</li></ul></li><li><p>成员方法</p><ul><li><p><code>native long currentTimeMillis()</code>：<br>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时<br>间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。</p></li><li><p><code>void exit(int status)</code>：<br>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表<br>异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p></li><li><p><code>void gc()</code>：<br>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则<br>取决于系统中垃圾回收算法的实现以及系统执行时的情况。</p></li><li><p><code>String getProperty(String key)</code>：<br>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见<br>的属性名以及属性的作用如下表所示：</p><p><img src="https://s2.loli.net/2023/02/07/cVQHo9jSmXAzDdt.png" alt="image-20230207154150702"></p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> javaVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java的version:"</span> <span class="token operator">+</span> javaVersion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java的version:1.8.0_181</span><span class="token class-name">String</span> javaHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"java的home:"</span> <span class="token operator">+</span> javaHome<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//java的home:C:\Program Files\Java\jdk1.8.0_181\jre</span><span class="token class-name">String</span> osName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"os的name:"</span> <span class="token operator">+</span> osName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//os的name:Windows 10</span><span class="token class-name">String</span> osVersion <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"os的version:"</span> <span class="token operator">+</span> osVersion<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//os的version:10.0</span><span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的name:"</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user的name:HengxingStu</span><span class="token class-name">String</span> userHome <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的home:"</span> <span class="token operator">+</span> userHome<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user的home:C:\Users\HengxingStu</span><span class="token class-name">String</span> userDir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user的dir:"</span> <span class="token operator">+</span> userDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//user的dir:C:\Users\HengxingStu\Documents\CodeSpace\JavaSenior\day04</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p><table><thead><tr><th align="center">abs</th><th align="center">绝对值</th></tr></thead><tbody><tr><td align="center">acos,asin,atan,cos,sin,tan</td><td align="center">三角函数</td></tr><tr><td align="center">sqrt</td><td align="center">平方根</td></tr><tr><td align="center">pow(double a,doble b)</td><td align="center">a的b次幂</td></tr><tr><td align="center">log</td><td align="center">自然对数</td></tr><tr><td align="center">exp</td><td align="center">e为底指数</td></tr><tr><td align="center">max(double a,double b)<br/>min(double a,double b)<br/>random()</td><td align="center">返回0.0到1.0的随机数</td></tr><tr><td align="center">long round(double a)</td><td align="center">double型数据a转换为long型（四舍五入）</td></tr><tr><td align="center">toDegrees(double angrad)</td><td align="center">弧度—&gt;角度</td></tr><tr><td align="center">toRadians(double angdeg)</td><td align="center">角度—&gt;弧度</td></tr></tbody></table><p>​    </p><h2 id="BigInteger类-和-BigDecimal类"><a href="#BigInteger类-和-BigDecimal类" class="headerlink" title="BigInteger类 和 BigDecimal类"></a>BigInteger类 和 BigDecimal类</h2><p>Integer类作为int的包装类，能存储的最大整型值为(2^31) -1，Long类也是有限的，最大为(2^63) -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</p><ul><li><p><code>java.math</code>包的<code>BigInteger</code>可以表示不可变的任意精度的整数。BigInteger 提供<br>所有 Java 的基本整数操作符的对应物，并提供<code>java.lang.Math</code>的所有相关方法。<br>另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、<br>位操作以及一些其他操作。</p></li><li><p>构造器</p><ul><li><code>BigInteger(String val)</code>：根据字符串构建<code>BigInteger</code>对象</li></ul></li><li><p>常用方法</p><ul><li><code>public BigInteger abs()</code>：返回此BigInteger的绝对值的BigInteger。</li><li><code>BigInteger add(BigInteger val)</code> ：返回其值为 (this + val) 的 BigInteger</li><li><code>BigInteger subtract(BigInteger val)</code>：返回其值为 (this - val) 的 BigInteger</li><li><code>BigInteger multiply(BigInteger val)</code>：返回其值为 (this * val) 的 BigInteger</li><li><code>BigInteger divide(BigInteger val)</code>：返回其值为 (this &#x2F; val) 的 BigInteger。整数相除只保留整数部分。</li><li><code>BigInteger remainder(BigInteger val)</code>：返回其值为 (this % val) 的 BigInteger。</li><li><code>BigInteger[] divideAndRemainder(BigInteger val)</code>：返回包含 (this &#x2F; val) 后跟(this % val) 的两个 BigInteger 的数组。</li><li><code>BigInteger pow(int exponent)</code>：返回其值为 (this exponent ) 的 BigInteger。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级-多线程</title>
      <link href="/2023/01/30/code/Java/Java%E5%9F%BA%E7%A1%80/JavaThread/"/>
      <url>/2023/01/30/code/Java/Java%E5%9F%BA%E7%A1%80/JavaThread/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/31/TyPcrql46CJWB8D.jpg" alt="5aa1e6d795bbc"></p><p>本篇讲解java多线程</p><h1 id="基本概念：-程序、进程、线程"><a href="#基本概念：-程序、进程、线程" class="headerlink" title="基本概念： 程序、进程、线程"></a>基本概念： 程序、进程、线程</h1><p>**程序(program)**是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。  </p><p>**进程(process)**是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。 ——生命周期  </p><blockquote><ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li>进程作为资源分配的单位， 系统在运行时会为每个进程分配不同的内存区域</li></ul></blockquote><p>**线程(thread)**，进程可进一步细化为线程，是一个程序内部的一条执行路径。  </p><blockquote><p>若一个进程同一时间并行执行多个线程，就是支持多线程的</p><p>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</p><p>一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间 –&gt; 它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。  </p></blockquote><p><img src="https://s2.loli.net/2023/01/31/YzwK9qPVkHx2ru8.png" alt="进程与线程图解"></p><h2 id="单核CPU和多核CPU的理解"><a href="#单核CPU和多核CPU的理解" class="headerlink" title="单核CPU和多核CPU的理解"></a>单核CPU和多核CPU的理解</h2><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱， 那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费） 。 但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，才能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，其实至少有三个线程： <code>main()</code>主线程， <code>gc()</code>垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><h2 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h2><ul><li>并行： 多个CPU同时执行多个任务。比如：多个人同时做不同的事。</li><li>并发： 一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</li></ul><h2 id="使用多线程的优点"><a href="#使用多线程的优点" class="headerlink" title="使用多线程的优点"></a>使用多线程的优点</h2><ol><li><p>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</p></li><li><p>提高计算机系统CPU的利用率</p></li><li><p>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p></li></ol><h1 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h1><p>Java语言的JVM允许程序运行多个线程，它通过<code>java.lang.Thread</code>类来体现。  </p><ul><li><p>Thread类的特性</p><p>每个线程都是通过某个特定Thread对象的<code>run()</code>方法来完成操作的，经常把<code>run()</code>方法的主体称为线程体<br><strong>通过该Thread对象的<code>start()</code>方法来启动这个线程，而非直接调用<code>run()</code></strong></p></li></ul><h2 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h2><h3 id="Thread类的使用"><a href="#Thread类的使用" class="headerlink" title="Thread类的使用"></a>Thread类的使用</h3><ol><li>构造器</li></ol><p><code>Thread()</code>： 创建新的Thread对象</p><p><code>Thread(String threadname)</code>： 创建线程并指定线程实例名</p><p><code>Thread(Runnable target)</code>： 指定创建线程的目标对象，它实现了Runnable接口中的run方法</p><p><code>Thread(Runnable target, String name)</code>： 创建新的Thread对象  </p><ol start="2"><li><p>创建线程的两种方式  </p><p>JDK1.5之前创建新执行线程有两种方法：</p><ul><li><p>继承Thread类的方式</p><ol><li><p>定义子类继承Thread类。</p></li><li><p>子类中重写Thread类中的run方法。</p></li><li><p>创建Thread子类对象，即创建了线程对象。</p></li><li><p>调用线程对象<code>start()</code>方法：启动线程，调用run方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 创建一个继承于Thread类的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 重写Thread类的run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//另一个类中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 创建Thread类的子类的对象</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>调用<code>start()</code>方法，如果调用的是<code>run()</code>，并不会开启新的线程，而是当前线程直接执行内部的代码，和之前定义方法然后让对象调用是一样的。</li><li>如果想再生成一个线程，那就再new一个线程对象。不可以还让已经<code>start()</code>的线程去执行。会报<code>IllegalThreadStateException</code></li></ol><p>使用匿名子类简化创建方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>实现Runnable接口的方式</p><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：<code>run()</code></li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用<code>start()</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThreadObj</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span><span class="token comment">//1. 创建一个实现了Runnable接口的类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2.实现类去实现Runnable中的抽象方法：run()</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建实现类的对象</span>        <span class="token class-name">MyThreadObj</span> myThreadObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThreadObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myThreadObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.通过Thread类的对象调用`start()`</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>比较创建线程的两种方式</p><p>开发中：优先选择–&gt;实现Runnable接口的方式</p><p>原因：</p><ol><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况。</li></ol><p>联系：<code>public class Thread implements Runnable</code>thread其实也是实现了Runnable接口，实际上和第二种方式没区别</p><p>相同点：两种方式都需要重写<code>run()</code>，将线程要执行的逻辑声明在<code>run()</code>中。</p></li></ol><h3 id="Thread类的常用方法"><a href="#Thread类的常用方法" class="headerlink" title="Thread类的常用方法"></a>Thread类的常用方法</h3><table><thead><tr><th align="right">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="right"><code>void start()</code></td><td align="left">启动线程，并执行对象的<code>run()</code>方法</td></tr><tr><td align="right"><code>run()</code></td><td align="left">线程在被调度时执行的操作</td></tr><tr><td align="right"><code>String getName()</code></td><td align="left">返回线程的名称</td></tr><tr><td align="right"><code>void setName(String name)</code></td><td align="left">设置该线程名称</td></tr><tr><td align="right"><code>static Thread currentThread()</code></td><td align="left">返回当前线程。<br>在Thread子类中就是this，通常用于主线程和Runnable实现类</td></tr><tr><td align="right"><code>static void yield()</code></td><td align="left">线程让步<br>- 暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程<br/>- 若队列中没有同优先级的线程，忽略此方法</td></tr><tr><td align="right"><code>join()</code></td><td align="left">当某个程序执行流中调用其他线程的<code>join()</code>方法时， 调用线程将被阻塞，直到<code>join()</code>方法加入的 join 线程执行完为止<br/>低优先级的线程也可以获得执行<br><strong>但是要注意</strong>：执行前确保线程已被启动。这个方法是等待join的线程完成，但是你如果连线程都没有开始执行，那不就直接结束了吗？</td></tr><tr><td align="right"><code>static void sleep(long millis)</code></td><td align="left">令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。<br/>抛出<code>InterruptedException</code>异常</td></tr><tr><td align="right"><code>boolean isAlive()</code></td><td align="left">返回<code>boolean</code>，判断线程是否还活着</td></tr></tbody></table><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><h4 id="调度策略"><a href="#调度策略" class="headerlink" title="调度策略"></a>调度策略</h4><ul><li>时间片</li></ul><img src="https://s2.loli.net/2023/01/31/beAxhJLiEKcMHV1.png" alt="image-20230131153103245" style="zoom:33%;" /><ul><li>抢占式： 高优先级的线程抢占CPU</li></ul><h4 id="Java的调度方法"><a href="#Java的调度方法" class="headerlink" title="Java的调度方法"></a>Java的调度方法</h4><ul><li>同优先级线程组成先进先出队列（先到先服务），使用时间片策略</li><li>对高优先级，使用优先调度的抢占式策略</li></ul><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ul><li>MAX_PRIORITY： 10</li><li>MIN _PRIORITY： 1</li><li>NORM_PRIORITY： 5  –&gt;  默认优先级</li></ul><p>如何获取和设置当前线程的优先级：</p><p><code>getPriority()</code>: 获取线程的优先级</p><p><code>setPriority(int p)</code>: 设置线程的优先级</p><p>说明：</p><p>高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p><p>线程创建时继承父线程的优先级</p><h1 id="理解线程"><a href="#理解线程" class="headerlink" title="理解线程"></a>理解线程</h1><h2 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h2><p>Java中的线程分为两类：一种是<strong>守护线程</strong>，一种是<strong>用户线程</strong></p><ul><li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开</li><li>守护线程是用来服务用户线程的，通过在<code>start()</code>方法前调用<code>thread.setDaemon(true)</code>可以把一个用户线程变成一个守护线程</li><li>Java垃圾回收就是一个典型的守护线程</li><li>若JVM中都是守护线程，当前JVM将退出</li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>线程有五种状态：</p><ol><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪： 处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</li><li>运行： 当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能</li><li>阻塞： 在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li><li>死亡： 线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ol><p><img src="https://s2.loli.net/2023/02/01/C3wUSDyqZ1T2lin.png" alt="多线程"></p><ol><li><p>关于声明周期我们需要关注两个概念：</p><p>状态、相应方法</p><p>状态a –&gt; 状态b：哪些方法执行了（回调方法）</p><p>某个方法主动调用：状态a –&gt; 状态b （例如：<code>wait()</code>,<code>sleep()</code>）</p></li><li><p>阻塞只是临时状态，死亡才是最终状态。程序如果一直卡在阻塞状态，就是一种异常的状态。例如：死锁。</p></li></ol><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>同步是为了解决线程安全问题。先来看一个例子会更好理解：</p><p>创建三个窗口卖票，总票数为100张。使用实现<code>Runnable</code>接口的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> window <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票票号为；"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现，有重票的情况出现，这是因为在某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</p><p><img src="https://s2.loli.net/2023/02/01/gdCtpqJzh6e5oGR.png" alt="Runnable窗口买票"></p><p>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。这就是线程安全问题。</p><p>理想状态下，三个线程会同时进入判断语句，均判断票号为0，跳出循环</p><img src="https://s2.loli.net/2023/02/01/O8SyEg1CQIPZzGv.png" alt="理想状态" style="zoom:33%;" /><p>极端状态下，三个线程均进入阻塞状态，结束阻塞后，都执行后面的买票代码。后两个线程便会输出错票。</p><img src="https://s2.loli.net/2023/02/01/u39jrTAHeX7YSNO.png" alt="极端状态" style="zoom:33%;" /><p>所以我们使用同步代码块的方式解决这个问题。</p><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>先来介绍同步代码块：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//需要被同步的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>操作共享数据的代码，即为需要被同步的代码。  –&gt;不能包含代码多了，也不能包含代码少了。</p></li><li><p>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</p></li><li><p>同步监视器，俗称：<strong>锁</strong>。任何一个类的对象，都可以充当锁。</p><p>⭐要求：多个线程必须要共用同一把锁。</p></li></ol><p>在上面的例子中，我们需要在操作共享数据时使用同步锁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票票号为；"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如果时使用继承方式实现的线程，由于其生成了多个对象，所以不能使用this作为当前同步的锁，考虑使用<code>window.class</code>当前类名来作为锁（类在程序中只会加载一次，这个知识会在讲“反射”时提到。）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票票号为；"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>如果一整个方法都需要同步，那不妨将方法声明为同步方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票票号为；"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但如果是在使用继承Thread类方式实现的线程中，你会发现同步锁失效了。这就是我们的另一个知识点：</p><p>细心的你一定发现了，同步方法没有要求我们写同步监视器，那，他就不存在了吗？</p><p>不是的。它默认使用<code>this</code>代替。恰巧我们这种方式实现的线程又会生成多个对象，用当前对象肯定不行。</p><p><strong>解决方式就是将此同步方法声明为静态的</strong>，这时他会使用当前类来代替<code>this</code>–&gt;<code>window.class</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> window <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":买票票号为；"</span> <span class="token operator">+</span> ticket<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步的利弊"><a href="#同步的利弊" class="headerlink" title="同步的利弊"></a>同步的利弊</h3><p>同步的方式，解决了线程的安全问题。—好处</p><p>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。 —局限性</p><h3 id="懒汉式单例改进"><a href="#懒汉式单例改进" class="headerlink" title="懒汉式单例改进"></a>懒汉式单例改进</h3><p>之前我们写懒汉式单例提到，它是线程不安全的。现在进行改进</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方式一：只解决线程安全，效率低，所有</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bank <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//方式二：效率更高，之后的线程不必在同步锁外等待</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bank <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bank <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bank<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁  </p><p>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p><p>如何解决？</p><ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul><p>一个死锁的实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//同步监视器：A类的对象：a</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 进入了A实例的foo方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ①</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 企图调用B实例的last方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ③</span>b<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//同步监视器：A类的对象：a</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了A类的last方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//同步监视器：b</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 进入了B实例的bar方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ②</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名: "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">" 企图调用A实例的last方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ④</span>a<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//同步监视器：b</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了B类的last方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用a对象的foo方法</span>a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了主线程之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"副线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用b对象的bar方法</span>b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了副线程之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">DeadLock</span> dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//副线程启动</span>dl<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主线程启动</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock(锁)"></a>Lock(锁)</h3><p>从JDK 5.0开始， Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p><p><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。 锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p><p><code>ReentrantLock</code>类实现了 Lock ，它拥有与<code>synchronized</code>相同的并发性和内存语义， 在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>， 可以显式加锁、释放锁。</p><p><strong>注意</strong>：Lock方式中并没有同步监视器这个概念，但是我们可以把<code>private ReentrantLock lock = new ReentrantLock();</code>中的lock视为同步监视器，如果线程间没有使用同一个lock对象，就相当于没有使用同一把锁。lock不可调用<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>方法，但是可以通过相关的<code>Condition</code>对象来实现更多操作。</p><p>使用方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.实例化ReentrantLock</span><span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">//2.调用锁定方法lock()</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//需要同步的代码</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//3.调用解锁方法：unlock()</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为最后一步一定要解锁，所以使用<code>try--finally</code>的方式</p><h4 id="synchronized-与-Lock-的对比"><a href="#synchronized-与-Lock-的对比" class="headerlink" title="synchronized 与 Lock 的对比"></a>synchronized 与 Lock 的对比</h4><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）， synchronized是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁， synchronized有代码块锁和方法锁</li><li>使用Lock锁， JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ol><h3 id="推荐使用顺序"><a href="#推荐使用顺序" class="headerlink" title="推荐使用顺序"></a>推荐使用顺序</h3><p>优先使用顺序：</p><blockquote><p>Lock –&gt; 同步代码块（已经进入了方法体，分配了相应资源）–&gt; 同步方法（在方法体之外）  </p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>银行有一个账户。</p><p>有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。</p><ol><li>使用继承Thread方式，synchronized同步方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepositTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> awt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>awt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        balance <span class="token operator">+=</span> awt<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":sucessful deposit.The balance is "</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acct<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acct <span class="token operator">=</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        acct<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用继承Thread方式，lock同步</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> awt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>awt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        balance <span class="token operator">+=</span> awt<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":sucessful deposit.The balance is "</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用继承Runnable方式，synchronized同步方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepositTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> awt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>awt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        balance <span class="token operator">+=</span> awt<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":sucessful deposit.The balance is "</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acct<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acct <span class="token operator">=</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            acct<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用继承Runnable方式，lock同步</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepositTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> awt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>awt <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            balance <span class="token operator">+=</span> awt<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":sucessful deposit.The balance is "</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Account</span> acct<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acct <span class="token operator">=</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            acct<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>使用两个线程打印 1-100。线程1, 线程2 交替打印</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用两个线程打印 1-100。线程1, 线程2 交替打印 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将阻塞的进程唤醒</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//令当前进程阻塞，等待唤醒。</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>涉及到的三个方法：</p><p><code>wait()</code>：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</p><p><code>notify()</code>：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</p><p><code>notifyAll()</code>：一旦执行此方法，就会唤醒所有被wait的线程。</p><p>说明：</p><ol><li><p><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>三个方法<strong>必须使用在同步代码块或同步方法中</strong>，lock锁的方式都不可以。意味着这三个方法是依赖于同步监视器的。</p></li><li><p><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</p><p>否则，会出现<code>IllegalMonitorStateException</code>异常。</p></li><li><p><code>wait()</code>，<code>notify()</code>，<code>notifyAll()</code>三个方法三个方法是定义在<code>java.lang.Object</code>类中。</p></li></ol><h3 id="面试题：sleep-和-wait-的异同？"><a href="#面试题：sleep-和-wait-的异同？" class="headerlink" title="面试题：sleep() 和 wait()的异同？"></a>面试题：sleep() 和 wait()的异同？</h3><p>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</p><p>不同点：</p><ol><li><p>两个方法声明的位置不同：</p><p>Thread类中声明<code>sleep() </code></p><p>Object类中声明<code>wait()</code></p></li><li><p>调用的要求不同：<code>sleep()</code>可以在任何需要的场景下调用。 <code>wait()</code>必须使用在同步代码块或同步方法中</p></li><li><p>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，<code>sleep()</code>不会释放锁，<code>wait()</code>会释放锁。</p></li></ol><h3 id="线程通信的应用"><a href="#线程通信的应用" class="headerlink" title="线程通信的应用"></a>线程通信的应用</h3><p>经典例题：生产者&#x2F;消费者问题</p><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p>分析：</p><blockquote><ol><li>是否是多线程问题？是，生产者线程，消费者线程</li><li>是否有共享数据？是，店员（或产品）</li><li>如何解决线程的安全问题？同步机制,有三种方法</li><li>是否涉及线程的通信？是，生产者通知消费者进行消费，消费者通知生产者进行生产</li></ol></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Clerk</span> clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Productor</span> productor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productor<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"productor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//等待消费</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始生产第"</span> <span class="token operator">+</span> <span class="token operator">++</span>number <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生产后，唤醒消费者</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//等待生产</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始消费第"</span> <span class="token operator">+</span> number<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消费后，唤醒生产者</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Productor</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Productor</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            clerk<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            clerk<span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新增线程创建方式"><a href="#新增线程创建方式" class="headerlink" title="新增线程创建方式"></a>新增线程创建方式</h2><p><strong>JDK5.0 新增</strong></p><h3 id="新增方式一：实现Callable接口"><a href="#新增方式一：实现Callable接口" class="headerlink" title="新增方式一：实现Callable接口"></a>新增方式一：实现Callable接口</h3><p>与使用Runnable相比， Callable功能更强大些</p><ul><li>相比<code>run()</code>方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助<code>FutureTask</code>类，比如获取返回结果</li></ul><p>实现步骤为：</p><ol><li><p>创建一个实现<code>Callable</code>的实现类</p></li><li><p>实现call方法，将此线程需要执行的操作声明在<code>call()</code>中</p></li><li><p>创建<code>Callable</code>接口实现类的对象</p></li><li><p>将此<code>Callable</code>接口实现类的对象作为传递到<code>FutureTask</code>构造器中，创建<code>FutureTask</code>的对象</p></li><li><p>将<code>FutureTask</code>的对象作为参数传递到<code>Thread</code>类的构造器中，创建<code>Thread</code>对象，并调用<code>start()</code></p></li><li><p>获取<code>Callable</code>中call方法的返回值（可选）</p><p><code>get()</code>返回值即为<code>FutureTask</code>构造器参数<code>Callable</code>实现类重写的<code>call()</code>的返回值。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建一个实现`Callable`的实现类</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            count <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3.创建Callable接口实现类的对象</span>        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//6.获取Callable中call方法的返回值</span>        <span class="token comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p><ol><li><code>call()</code>可以有返回值的。</li><li><code>call()</code>可以抛出异常，被外面的操作捕获，获取异常的信息</li><li><code>Callable</code>是支持泛型的</li></ol><h3 id="新增方式二：使用线程池"><a href="#新增方式二：使用线程池" class="headerlink" title="新增方式二：使用线程池"></a>新增方式二：使用线程池</h3><p>背景： 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大  </p><p>思路： 提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具  </p><p>好处：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<ul><li><code>corePoolSize</code>：核心池的大小</li><li><code>maximumPoolSize</code>：最大线程数</li><li><code>keepAliveTime</code>：线程没有任务时最多保持多长时间后会终止</li><li>…</li></ul></li></ul><p>线程池相关API</p><p>JDK 5.0起提供了线程池相关API： <code>ExecutorService</code>和<code>Executors</code></p><p><code>ExecutorService</code>：真正的线程池接口。常见子类<code>ThreadPoolExecutor</code></p><ul><li><code>void execute(Runnable command) </code>：执行任务&#x2F;命令，没有返回值，一般用来执行<br><code>Runnable</code></li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般又来执行<br><code>Callable</code></li><li>&#96;&#96;void shutdown()&#96;：关闭连接池</li></ul><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><ul><li><code>Executors.newCachedThreadPool()</code>：创建一个可根据需要创建新线程的线程池</li><li><code>Executors.newFixedThreadPool(n)</code>; 创建一个可重用固定线程数的线程池</li><li><code>Executors.newSingleThreadExecutor()</code> ：创建一个只有一个线程的线程池</li><li><code>Executors.newScheduledThreadPool(n)</code>：创建一个线程池，它可安排在给定延迟后运<br>行命令或者定期地执行</li></ul><p>使用实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 创建线程池</span>    <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 放入线程并启动</span>    service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OddNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Runnable线程启动</span>    <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EvenNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Callable线程启动</span>    <span class="token comment">//3. 关闭线程池</span>    service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程管理</p><p>由于我们接收线程池对象时是使用多态方式接收的，我们可以查看<code>newFixedThreadPool</code>源码，看到它返回的是<code>ThreadPoolExecutor</code>，若想使用线程管理，就必须先进行强转。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * Creates a thread pool that reuses a fixed number of threads     * operating off a shared unbounded queue.  At any point, at most     * &#123;@code nThreads&#125; threads will be active processing tasks.     * If additional tasks are submitted when all threads are active,     * they will wait in the queue until a thread is available.     * If any thread terminates due to a failure during execution     * prior to shutdown, a new one will take its place if needed to     * execute subsequent tasks.  The threads in the pool will exist     * until it is explicitly &#123;@link ExecutorService#shutdown shutdown&#125;.     *     * @param nThreads the number of threads in the pool     * @return the newly created thread pool     * @throws IllegalArgumentException if &#123;@code nThreads &lt;= 0&#125;     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转换为<code>ThreadPoolExecutor</code>再进行管理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>service1<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//核心池的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的异常处理</title>
      <link href="/2023/01/26/code/Java/Java%E5%9F%BA%E7%A1%80/JavaException/"/>
      <url>/2023/01/26/code/Java/Java%E5%9F%BA%E7%A1%80/JavaException/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/26/TG4D6pZl3wYQ8by.jpg" alt="t656TWPNb10KQ0GT26iy"></p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常就是程序非正常运行时的报错，不正常就是异常。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>通常分为两类：</p><p><code>Error</code>：错误。通常是Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：<code>StackOverflowError</code>和<code>OOM--&gt;OutOfMemory</code>。</p><p>一般不编写针对性的代码进行处理。</p><p><code>Exception</code>：其它因编程错误或偶然的外在因素导致的一般性问题， 可以使用针对性的代码进行处理。  </p><h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><p>父类为<code>Throwable</code>。</p><p>图中蓝色的是非受检异常（unchecked）或称运行时异常。</p><p>红色是受检异常（checked）或称编译时异常，会在编译时进行报错。</p><img src="https://s2.loli.net/2023/01/26/wlfukF2CMeNdoR1.png" alt="异常体系架构" style="zoom: 33%;" /><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><h4 id="编译时异常-checked"><a href="#编译时异常-checked" class="headerlink" title="编译时异常(checked)"></a>编译时异常(checked)</h4><ul><li>IOException<ul><li>FileNotFoundException</li></ul></li><li>ClassNotFoundException</li></ul><h4 id="运行时异常-unchecked-RuntimeException"><a href="#运行时异常-unchecked-RuntimeException" class="headerlink" title="运行时异常(unchecked,RuntimeException)"></a>运行时异常(unchecked,RuntimeException)</h4><ul><li><p>NullPointerException–&gt;空指针异常</p></li><li><p>ArrayIndexOutOfBoundsException–&gt;数组越界异常</p></li><li><p>ClassCastException–&gt;类转换异常</p></li><li><p>NumberFormatException–&gt;数值格式异常</p></li><li><p>InputMismatchException–&gt;输入不匹配异常</p></li><li><p>ArithmeticException–&gt;算术异常</p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//NullPointerException</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//ArrayIndexOutOfBoundsException</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//ClassCastException</span>        <span class="token class-name">Object</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//NumberFormatException</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//InputMismatchException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"please input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//ArithmeticException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="抓抛模型"><a href="#抓抛模型" class="headerlink" title="抓抛模型"></a>抓抛模型</h3><p>过程一：”抛”：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。</p><p>一旦抛出对象以后，其后的代码就不再执行。</p><p>过程二：”抓”：可以理解为异常的处理方式：</p><ol><li><p>try-catch-finally</p></li><li><p>throws</p></li></ol><h3 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h3><p>这个结构可以抓住当前异常进行处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式1</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式2</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式3</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span><span class="token comment">//一定会执行的代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>finally是可选的。</p></li><li><p>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</p></li><li><p>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码</p></li><li><p>catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。</p><p>catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，会报错</p></li><li><p>常用的异常对象处理的方式：</p><ul><li><code>String  getMessage()</code></li><li><code>printStackTrace()</code></li></ul></li><li><p>在try结构中声明的变量，再出了try结构以后，就不能再被调用</p></li><li><p>try-catch-finally结构可以嵌套</p></li></ol><p><strong>体会</strong></p><ol><li><p>使用try-catch-finally处理编译时异常，使得程序在编译时不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</p></li><li><p>开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了</p></li></ol><p>​而针对于编译时异常，我们说一定要考虑异常的处理。（对于这一点，你可以先往下看，到finally结束时再次回顾。）</p><p><strong>finally的二三事</strong></p><ol><li><code>finally</code>中声明的是一定会被执行的代码。即使catch中又出现异常了，或者try中有return语句，catch中有return语句等情况下，也会被强制在方法返回前执行。</li><li>像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当文件存在，程序正常运行；文件不存在，打印异常，两种情况finally都会执行。</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data  <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束啦，现在finally。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果是异常到这里，fis应该是空的，所以要判断一下</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完这个程序你会发现，如果是编译时异常，我们使用try-catch将其延长到运行时才进行报错，或者说，程序强制要求我们进行处理，就拿文件处理来说，我们预见一定会有找不到文件的情况，并且要求处理。而如果是运行时异常，则程序并不报错，只有运行起来我们才知道有bug。</p><p>这种情况下，我们会发现，捕捉了运行时异常并进行报错，实际和程序自己进行报错没什么区别。所以我们才不针对运行时异常编写try-catch-finally（一般情况下）</p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p>这个结构只能将异常进行抛出。不能处理。</p><p><code>public void method() throws IOException&#123; &#125;</code></p><p>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</p><h3 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h3><p>try-catch-finally:真正的将异常给处理掉了。</p><p>throws的方式只是将异常抛给了方法的调用者。  并没有真正将异常处理掉。</p><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><ol><li><p>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</p></li><li><p>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</p></li></ol><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><h3 id="生成官方异常对象"><a href="#生成官方异常对象" class="headerlink" title="生成官方异常对象"></a>生成官方异常对象</h3><p><code>throw</code>关键字生成异常对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regester</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"您输入的数据非法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//自己抛出一个异常，并且传入错误信息</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">regester</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义异常类型"><a href="#自定义异常类型" class="headerlink" title="自定义异常类型"></a>自定义异常类型</h3><p>分三步：</p><ol><li>继承异常体系</li><li>给出唯一标识<code>serialVersionUID</code></li><li>提供重载的构造器</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">338751699363429948L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后当作正常的异常进行抛出就行了</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。</p><p>对数据类型不一致<code>NumberFormatException</code>、缺少命令行参数<code>ArrayIndexOutOfBoundsException</code>、除0<code>ArithmeticException</code>及输入负数<code>EcDef 自定义的异常</code>进行异常处理。</p><p>提示： </p><ol><li>在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</li><li>在main()方法中使用异常处理语句进行异常处理。</li><li>在程序中，自定义对应输入负数的异常类(EcDef)。</li><li>运行时接受参数 java EcmDef 20 10  &#x2F;&#x2F;args[0]&#x3D;“20” args[1]&#x3D;“10”</li><li>Interger类的static方法<code>parseInt(String s)</code>将s转换成对应的int值。</li></ol><p>如：<code>int a=Interger.parseInt(“314”);  //a=314;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EcmDef</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">ecm</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数值转换异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"缺少参数！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"除零！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EcDef</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果是编译时异常，就要加上处理语句</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ecm</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加上throws EcDef</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">|</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token string">"请不要输入负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token operator">/</span>j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EcDef</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span><span class="token comment">//若继承Exception，就是编译时异常</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">70348972321766939L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">EcDef</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我这里写的是一个运行时异常，所以没有进行异常处理。</p><p>但如果你写的是编译时异常，就要选择进行处理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="https://s2.loli.net/2023/01/28/Ti3cEoLGQO4CaPZ.png" alt="image-20230128142744628" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加Live2D看板娘</title>
      <link href="/2023/01/20/webConstruct/live2d/"/>
      <url>/2023/01/20/webConstruct/live2d/</url>
      
        <content type="html"><![CDATA[<h1 id="看板娘预览"><a href="#看板娘预览" class="headerlink" title="看板娘预览"></a>看板娘预览</h1><p>看下面这个网址</p><p><a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装过程看这个网址</p><p><a href="https://www.jianshu.com/p/3a6342e16e57">hexo 添加live2d看板动画</a></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p><a href="https://augu1sto.gitee.io/ee36c104ddd2/">Hexo美化|站宠？看板娘？live2d配置（附魔改插件和新模型）</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的面向对象笔记（下）</title>
      <link href="/2023/01/19/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A15/"/>
      <url>/2023/01/19/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A15/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/01/19/dEVGMa2iJgZwApv.jpg" alt="9Gpdc0l3yAIYn0LrW36F"></p><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>static 静态</p><h2 id="什么是静态"><a href="#什么是静态" class="headerlink" title="什么是静态"></a>什么是静态</h2><p>主要意义是在于创建独立于具体对象的域变量或者方法。<strong>以致于即使没有创建对象，也能使用属性和调用方法</strong>！</p><p>static关键字还有一个比较关键的作用就是<strong>用来形成静态代码块以优化程序性能</strong>。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><h2 id="怎么使用static"><a href="#怎么使用static" class="headerlink" title="怎么使用static"></a>怎么使用static</h2><p>static可以用来修饰：属性、方法、代码块、内部类</p><p><em>使用static修饰属性：静态变量（或类变量）</em></p><ol><li><p>属性，按是否使用static修饰，又分为：静态属性 vs 非静态属性(实例变量)</p><ul><li><p>实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</p></li><li><p>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</p></li></ul></li></ol><h3 id="静态变量说明"><a href="#静态变量说明" class="headerlink" title="静态变量说明"></a>静态变量说明</h3><ol><li><p>静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</p></li><li><p>静态变量的加载要早于对象的创建。</p></li><li><p>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</p></li><li><p>不能通过类直接调用对象中的实例变量，因为这时候对象还没有生成。</p></li></ol><table><thead><tr><th align="center">谁来调用\调用谁</th><th align="center">类变量</th><th align="center">实例变量</th></tr></thead><tbody><tr><td align="center">类</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">对象</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><h3 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h3><img src="https://s2.loli.net/2023/01/19/8LrVQcDEMgkZ1Tz.png" alt="静态属性内存解析" style="zoom: 33%;" /><h3 id="静态方法说明"><a href="#静态方法说明" class="headerlink" title="静态方法说明"></a>静态方法说明</h3><p>在静态的方法内，不能使用this关键字、super关键字</p><p>静态方法随着类的加载而加载，可以通过<code>类.静态方法</code>的方式进行调用</p><p>静态方法中，只能调用静态的方法或属性，非静态（即对象的）方法无法调用。</p><p>比如：<code>Chinese.eat();</code>在静态方法中调用<code>Chinese</code>类的非静态方法<code>eat()</code>是无法通过编译的</p><table><thead><tr><th align="center">谁来调用\调用谁</th><th align="center">静态方法</th><th align="center">非静态方法</th></tr></thead><tbody><tr><td align="center"><code>类.方法</code></td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center"><code>对象.方法</code></td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><p>非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chinese</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类调用静态方法</span>        <span class="token comment">// Chinese.eat();//不能调用非静态方法</span>        <span class="token comment">//对象调用</span>        <span class="token class-name">Chinese</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am walking...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am eating....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">I am walking<span class="token punctuation">..</span><span class="token punctuation">..</span>I am walking<span class="token punctuation">..</span><span class="token punctuation">..</span>I am eating<span class="token punctuation">..</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于静态属性和静态方法的使用，要从生命周期的角度去理解。</p><h2 id="什么时候用static"><a href="#什么时候用static" class="headerlink" title="什么时候用static"></a>什么时候用static</h2><p>开发中，如何确定一个属性是否要声明为static的？</p><ul><li><p>属性是可以被多个对象所共享的，不会随着对象的不同而不同的。</p></li><li><p>类中的常量也常常声明为static</p></li></ul><p>开发中，如何确定一个方法是否要声明为static的？</p><ul><li>操作静态属性的方法，通常设置为static的</li><li>工具类中的方法，习惯上声明为static的。 比如：<code>Math、Arrays、Collections</code></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>圆的练习</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Circle</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c1 id is:"</span> <span class="token operator">+</span> c1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c2 id is:"</span> <span class="token operator">+</span> c2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c3 id is:"</span> <span class="token operator">+</span> c3<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"c3 area is:"</span> <span class="token operator">+</span> c3<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number of circle:"</span> <span class="token operator">+</span> <span class="token class-name">Circle</span><span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token comment">//统计对象圆的个数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//初始值</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//自动赋值</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//计算面积</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//getters</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> init<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。账号要自动生成。编写主类，使用银行账户类，输入、输出3个储户的上述信息。</p><p>考虑：哪些属性可以设计成static属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token comment">//存款余额</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> interestRate<span class="token punctuation">;</span><span class="token comment">//利率</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> minMoney<span class="token punctuation">;</span><span class="token comment">//最小余额</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//自动生成的初始值</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span>        minMoney <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> password<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token keyword">int</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> interestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInterestRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> interestRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span>interestRate <span class="token operator">=</span> interestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getMinMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> minMoney<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMinMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> minMoney<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span>minMoney <span class="token operator">=</span> minMoney<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Account [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", password="</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">", balance="</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式(Singleton)"></a>单例模式(Singleton)</h1><p>Point : 必须掌握，当前阶段要能够手写饿汉式</p><h2 id="为什么需要单例模式"><a href="#为什么需要单例模式" class="headerlink" title="为什么需要单例模式"></a>为什么需要单例模式</h2><p>由于单例模式只生成一个实例， 减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。  </p><p>应用场景：</p><ul><li><p>网站的计数器，一般也是单例模式实现，否则难以同步。</p></li><li><p>应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志<br>文件一直处于打开状态，因为只能有一个实例去操作， 否则内容不好追加。</p></li><li><p>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库<br>资源。</p></li><li><p>项目中， 读取配置文件的类，一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。</p></li><li><p>Application 也是单例的典型应用</p></li><li><p>Windows的Task Manager (任务管理器)就是很典型的单例模式</p></li><li><p>Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</p></li></ul><h2 id="饿汉式实现"><a href="#饿汉式实现" class="headerlink" title="饿汉式实现"></a>饿汉式实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只能通过公共方法来获取实例</span>        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//2.类内部生成私有对象</span>    <span class="token comment">//4.静态化对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.公共方法返回对象,要想在静态方法中调用，必须是静态的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> bank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="懒汉式实现"><a href="#懒汉式实现" class="headerlink" title="懒汉式实现"></a>懒汉式实现</h2><p>目前阶段的实现还有待优化。请看二者对比</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只能通过公共方法来获取实例</span>        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//2.类内部生成私有对象</span>    <span class="token comment">//4.静态化对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//3.公共方法返回对象,要想在静态方法中调用，必须是静态的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bank <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二者的对比"><a href="#二者的对比" class="headerlink" title="二者的对比"></a>二者的对比</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>坏处：对象加载时间过长</p><p>好处：线程安全</p><h3 id="懒汉式（目前的写法）"><a href="#懒汉式（目前的写法）" class="headerlink" title="懒汉式（目前的写法）"></a>懒汉式（目前的写法）</h3><p>好处：延迟对象创建</p><p>坏处：线程不安全，若两个线程同时在if判断中，且<code>instance</code>为空，会创建两个对象。—&gt;到 <em>多线程</em> 内容时再修改</p><h1 id="Main方法"><a href="#Main方法" class="headerlink" title="Main方法"></a>Main方法</h1><p>main()方法的使用说明：</p><ol><li><p>main()方法作为程序的入口</p></li><li><p>main()方法也是一个普通的静态方法</p></li><li><p>main()方法可以作为我们与控制台交互的方式。（之前：使用Scanner）</p></li></ol><h1 id="方法块（初始化块）"><a href="#方法块（初始化块）" class="headerlink" title="方法块（初始化块）"></a>方法块（初始化块）</h1><h2 id="代码块的作用"><a href="#代码块的作用" class="headerlink" title="代码块的作用"></a>代码块的作用</h2><p>用来初始化类</p><p>代码块如果有修饰的话，只能使用static.</p><p>分类：静态代码块  vs 非静态代码块</p><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>内部可以有输出语句</p><ul><li>随着类的加载而执行,而且只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul><h2 id="非静态代码块"><a href="#非静态代码块" class="headerlink" title="非静态代码块"></a>非静态代码块</h2><p>内部可以有输出语句</p><ul><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li><strong>作用</strong>：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul><h2 id="回顾属性赋值的位置"><a href="#回顾属性赋值的位置" class="headerlink" title="回顾属性赋值的位置"></a>回顾属性赋值的位置</h2><p>按初始化顺序排列</p><ol><li><p>默认初始化</p></li><li><p>显示初始化</p><p>在代码块中赋值（此两部分按编写时先后顺序排列）</p></li><li><p>构造器中初始化</p></li><li><p>有对象后，用<code>Object.field</code>和<code>Object.method()</code>等方式赋值</p></li></ol><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p><code>final</code>：最终的</p><p><code>final</code>可以用来修饰的结构：类、方法、变量</p><ol><li><p>final 用来修饰一个类:此类不能被其他类所继承。</p><p>比如：String类、System类、StringBuffer类</p></li><li><p>final 用来修饰方法：表明此方法不可以被重写</p><p>比如：Object类中<code>getClass();</code></p></li><li><p>final 用来修饰变量：此时的”变量”就称为是一个常量</p></li></ol><ul><li>final 修饰属性：</li></ul><p>  可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化</p><ul><li>final 修饰局部变量：</li></ul><p>  尤其是使用final 修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。</p><p>  一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</p><p><code>static final</code> 用来修饰属性：全局常量</p><h1 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字"></a>abstract关键字</h1><p><code>abstract</code> 抽象的</p><p><code>abstract</code> 可以用来修饰的结构：类、方法</p><h2 id="abstract修饰类：抽象类"><a href="#abstract修饰类：抽象类" class="headerlink" title="abstract修饰类：抽象类"></a>abstract修饰类：抽象类</h2><p>此类不能实例化</p><p>抽象类中<strong>一定有构造器</strong>，便于子类实例化时调用（涉及：子类对象实例化的全过程）</p><p>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作</p><h2 id="abstract修饰方法：抽象方法"><a href="#abstract修饰方法：抽象方法" class="headerlink" title="abstract修饰方法：抽象方法"></a>abstract修饰方法：抽象方法</h2><p>抽象方法只有方法的声明，没有方法体</p><p>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</p><p>若子类重写了父类中的所有的抽象方法后，此子类方可实例化</p><p>若子类没有重写父类中的所有的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><code>abstract</code>使用上的注意点：</p><ol><li><p><code>abstract</code>不能用来修饰：属性、构造器等结构</p></li><li><p><code>abstract</code>不能用来修饰私有方法、静态方法、final的方法、final的类</p></li></ol><h2 id="抽象类的匿名子类"><a href="#抽象类的匿名子类" class="headerlink" title="抽象类的匿名子类"></a>抽象类的匿名子类</h2><p>先来回顾一下匿名对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不起名了，直接丢进去</span>    <span class="token comment">//输出：Manager is working!</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Manager类中重写了work()方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其称之为非匿名类的匿名对象，非匿名类指通过<code>Manager</code>类创建对象</p><p>我们更进一步，把类名也匿名了，在创建对象时，直接使用抽象的父类代替，然后把需要重写的方法重写之后，放进形参中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"临时工来工作啦！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临时工来工作啦！！！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是匿名类的匿名对象</p><h1 id="模板方法的设计模式"><a href="#模板方法的设计模式" class="headerlink" title="模板方法的设计模式"></a>模板方法的设计模式</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SubTemplate</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span><span class="token comment">//计算某段代码执行所需要花费的时间</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不确定的部分、易变的部分</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例参考：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象类的应用：模板方法的设计模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">BankTemplateMethod</span> btm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要取钱就用取钱类</span>btm<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BankTemplateMethod</span> btm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManageMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要理财就用理财类</span>btm2<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token comment">// 具体方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取号排队"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 办理具体的业务 //钩子方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反馈评分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要取款！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ManageMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要理财！我这里有2000万美元!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="项目练习"><a href="#项目练习" class="headerlink" title="项目练习"></a>项目练习</h1><p>编写工资系统， 实现不同类型员工(多态)的按月发放工资。 如果当月出现某个<br>Employee对象的生日， 则将该雇员的工资增加100元。<br>实验说明：</p><ol><li><p>定义一个Employee类，该类包含：<br>private成员变量name,number,birthday，其中birthday 为MyDate类的对象；<br>abstract方法earnings()；<br>toString()方法输出对象的name,number和birthday。</p></li><li><p>MyDate类包含:<br>private成员变量year,month,day ；<br>toDateString()方法返回日期对应的字符串： xxxx年xx月xx日</p></li><li><p>定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处<br>理。该类包括： private成员变量monthlySalary；<br>实现父类的抽象方法earnings(),该方法返回monthlySalary值； toString()方法输<br>出员工类型信息及员工的name， number,birthday。  </p></li><li><p>参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的<br>员工处理。该类包括：<br>private成员变量wage和hour；<br>实现父类的抽象方法earnings(),该方法返回wage*hour值；<br>toString()方法输出员工类型信息及员工的name， number,birthday。</p></li><li><p>定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各<br>类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类<br>型,name,number,birthday,以及该对象生日。当键盘输入本月月份值时，如果本<br>月是某个Employee对象的生日，还要输出增加工资信息。</p></li></ol><p>提示：</p><blockquote><p>&#x2F;&#x2F;定义People类型的数组People c1[]&#x3D;new People[10];</p><p>&#x2F;&#x2F;数组元素赋值<br>c1[0]&#x3D;new People(“John”,”0001”,20);<br>c1[1]&#x3D;new People(“Bob”,”0002”,19);<br>&#x2F;&#x2F;若People有两个子类Student和Officer， 则数组元素赋值时， 可以使父类类型的数组元素指向子类。<br>c1[0]&#x3D;new Student(“John”,”0001”,20,85.0);<br>c1[1]&#x3D;new Officer(“Bob”,”0002”,19,90.5);  </p></blockquote><p>实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", number="</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">MyDate</span> <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> birthday<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HourlyEmployee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> wage<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> hour<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token keyword">double</span> wage<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> hour<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">,</span> <span class="token keyword">double</span> wage<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wage <span class="token operator">=</span> wage<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> hour<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> wage <span class="token operator">*</span> hour<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"HourlyEmployee ["</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", wage="</span> <span class="token operator">+</span> wage <span class="token operator">+</span> <span class="token string">", hour="</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalariedEmployee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> monthlySalary<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">,</span> <span class="token keyword">double</span> monthlySalary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monthlySalary <span class="token operator">=</span> monthlySalary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> monthlySalary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"SalariedEmployee ["</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", monthlySalary="</span> <span class="token operator">+</span> monthlySalary <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayrollSystem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        emps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token string">"Cloud"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token string">"Tifa"</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span><span class="token number">06</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emps<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token string">"Arith"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emps<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token string">"Barit"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">1987</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式一：手动获取</span>        <span class="token comment">// Scanner scan = new Scanner(System.in);</span>        <span class="token comment">// int month = scan.nextInt();</span>        <span class="token comment">//方式二：自动提取</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> emps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是"</span> <span class="token operator">+</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"的生日，工资加倍！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月工资为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月工资为："</span> <span class="token operator">+</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="接口interface"><a href="#接口interface" class="headerlink" title="接口interface"></a>接口interface</h1><h2 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h2><p>抽象类是从多个类中抽象出来的模板，如果将这种抽象进行的更彻底，则可以提炼出一种更加特殊的“抽象类”——接口（Interface）。接口是Java中最重要的概念之一，它可以被理解为一种<strong>特殊的类</strong>，不同的是<strong>接口的成员没有执行体，是由全局常量和公共的抽象方法所组成。</strong></p><h2 id="为什么需要接口"><a href="#为什么需要接口" class="headerlink" title="为什么需要接口"></a>为什么需要接口</h2><p>一方面， 有时必须从几个类中派生出一个子类， 继承它们所有的属性和方法。 但是， Java不支持多重继承。 有了接口， 就可以得到多重继承的效果。</p><img src="https://s2.loli.net/2023/01/21/cX8IKH51y7oYF2L.png" alt="接口举例" style="zoom: 25%;" /><p>另一方面， 有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、 MP3机、手机、数码相机、移动硬盘等都支持USB连接。</p><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。 继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</p><p>接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都要遵守。  </p><h2 id="怎么使用接口"><a href="#怎么使用接口" class="headerlink" title="怎么使用接口"></a>怎么使用接口</h2><ol><li><p>接口使用interface来定义</p></li><li><p>Java中，接口和类是并列的两个结构</p></li><li><p>如何定义接口：定义接口中的成员</p><ul><li><p>JDK7及以前：只能定义全局常量和抽象方法</p><p>全局常量：public static final的.但是书写时，可以省略不写</p><p>抽象方法：public abstract的</p></li><li><p>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略）</p></li></ul></li><li><p>接口中不能定义构造器！意味着<strong>接口不可以实例化</strong></p></li><li><p>Java开发中，接口通过让类去实现<code>implements</code>的方式来使用。</p><p>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</p><p>如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</p></li><li><p>Java类可以实现多个接口  —&gt;<strong>弥补了Java单继承性的局限性</strong></p><p>格式：<code>class AA extends BB implements CC,DD,EE</code></p></li></ol><h3 id="接口的匿名"><a href="#接口的匿名" class="headerlink" title="接口的匿名"></a>接口的匿名</h3><ol><li><p>接口使用上也满足多态性</p></li><li><p>接口，实际上就是定义了一种规范</p></li></ol><p>在开发中，体会面向接口编程！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Computer</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1.创建了接口的非匿名实现类的非匿名对象</span>    <span class="token class-name">Flash</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 创建了接口的非匿名实现类的匿名对象</span>    com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 创建了接口的匿名实现类的非匿名对象</span>    <span class="token class-name">USB</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4. 创建了接口的匿名实现类的匿名对象</span>    com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//USB usb = new Flash();</span>usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体传输数据的细节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">USB</span><span class="token punctuation">&#123;</span><span class="token comment">//常量：定义了长、宽、最大最小的传输速度等</span><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新特性：默认方法与静态方法"><a href="#新特性：默认方法与静态方法" class="headerlink" title="新特性：默认方法与静态方法"></a>新特性：默认方法与静态方法</h3><p>JDK8中新增：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span><span class="token comment">//静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//默认方法</span><span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//省略权限符，但是会自动补足</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>怎么使用？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SubClass</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//s.method1();</span><span class="token comment">//SubClass.method1();</span><span class="token comment">//知识点1：接口中定义的静态方法，只能通过接口来调用。</span><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span><span class="token comment">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span>s<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span><span class="token comment">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则</span><span class="token comment">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span><span class="token comment">//那么在实现类没有重写此方法的情况下，报错。-->接口冲突。</span><span class="token comment">//这就需要我们必须在实现类中重写此方法</span>s<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass：上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass：深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//知识点5：如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自己定义的重写的方法</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是父类中声明的</span><span class="token comment">//调用接口中的默认方法</span><span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认方法与静态方法让接口变得更像类了</p><h3 id="新特性的应用"><a href="#新特性的应用" class="headerlink" title="新特性的应用"></a>新特性的应用</h3><p>可以来看一个有趣的例子，妈妈和老婆同时掉水里，你救谁？</p><p>一个人如果同时继承孝顺的和痴情的两个接口，自己却不重写，那就会出错。</p><p>但是此时你爸爸发话了：“救你老妈！”子类继承了父类的方法，<strong>类优先</strong>，所以你听你爸的。</p><p>通过<code>接口名.super.方法名();</code>这种方式调用接口中的默认方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Filial</span> <span class="token punctuation">&#123;</span><span class="token comment">// 孝顺的</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老妈，我来救你了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Spoony</span> <span class="token punctuation">&#123;</span><span class="token comment">// 痴情的</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"媳妇，别怕，我来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"儿子，救我媳妇！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token keyword">implements</span> <span class="token class-name">Filial</span><span class="token punctuation">,</span> <span class="token class-name">Spoony</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我该救谁呢？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Filial</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Spoony</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="什么是内部类"><a href="#什么是内部类" class="headerlink" title="什么是内部类"></a>什么是内部类</h2><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p><p>内部类分两种：</p><p>成员内部类（静态、非静态）  <em>vs</em>  局部内部类（方法内、代码块内、构造器内）</p><h2 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h2><p>有时候我们需要描述一个类中的属性，但这个属性有点复杂，一个变量不够描述。就需要一个类作为它的属性，单独再划分一个类出去没有必要，这只是我的一个属性，别人没有。比如，人有<code>看书</code>这个爱好，但是其他任何类都不需要这个属性。</p><h2 id="怎么使用内部类"><a href="#怎么使用内部类" class="headerlink" title="怎么使用内部类"></a>怎么使用内部类</h2><p>回顾外部类的成员，它可以：</p><ul><li>调用外部类结构</li><li>被static修饰</li><li>被4种不同的权限修饰</li></ul><p>作为一个类：</p><ul><li>类内可以定义属性、方法、构造器等</li><li>被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>被abstract修饰</li></ul><p>如何在<strong>成员内部类</strong>中区分<strong>调用外部类的结构</strong>？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建实例(静态的成员内部类):</span><span class="token class-name">TV</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tv<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建非静态成员的内部类</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ball ball <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token function">ball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法的形参</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类的属性</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类的属性</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>本文参考：</p><p><a href="http://c.biancheng.net/view/6540.html">Java接口（Interface）的定义和实现</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的面向对象笔记（中）(二)</title>
      <link href="/2023/01/15/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A14/"/>
      <url>/2023/01/15/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A14/</url>
      
        <content type="html"><![CDATA[<h1 id="继承再续"><a href="#继承再续" class="headerlink" title="继承再续"></a>继承再续</h1><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>super理解为：父类的</p><p>super可以用来调用：属性<code>super.attr</code>、方法<code>super.method()</code>、构造器<code>super()</code></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>我们可以在子类的方法或构造器中。通过使用<code>super.attr</code>或<code>super.method()</code>的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略<code>super.</code></li><li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用<code>super.attr</code>的方式，表明调用的是父类中声明的属性。</li><li>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用<code>super.method()</code>的方式，表明调用的是父类中被重写的方法。</li></ul><h4 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h4><ul><li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器<br><code>super(形参列表)</code>的使用，必须声明在子类构造器的首行！</li><li>我们在类的构造器中，针对于<code>this(形参列表)</code>或<code>super(形参列表)</code>只能二选一，不能同时出现⭐</li><li>在构造器的首行，没有显式的声明<code>this(形参列表)</code>或<code>super(形参列表)</code>，则<strong>默认调用的是父类中空参的构造器</strong>：<code>super()</code></li><li>在类的多个构造器中，至少有一个类的构造器中使用了<code>super(形参列表)</code>，调用父类中的构造器</li></ul><h1 id="子类对象实例化的全过程"><a href="#子类对象实例化的全过程" class="headerlink" title="子类对象实例化的全过程"></a>子类对象实例化的全过程</h1><p>从结果上来看：（继承性）</p><ul><li><p>子类继承父类以后，就获取了父类中声明的属性或方法。</p></li><li><p>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</p></li></ul><p>从过程上来看：</p><ul><li>当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，…</li><li>直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有</li><li>父类中的结构，子类对象才可以考虑进行调用。</li></ul><p>明确：虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p><h1 id="多态性-Polymorphism"><a href="#多态性-Polymorphism" class="headerlink" title="多态性 Polymorphism"></a>多态性 Polymorphism</h1><p>多态性较难理解，请仔细思考辨析。</p><h2 id="哲学三问"><a href="#哲学三问" class="headerlink" title="哲学三问"></a>哲学三问</h2><p>这三个问题，请在第一遍时<strong>只看序号1</strong>的内容，第二遍再看序号2的内容</p><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h3><ol><li><p>父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><p>可以理解为一个事物的多种形态</p><p>引用Charlie Calverts的对多态的描述</p><blockquote><p>多态性是允许你将父对象设置成为和一个或更多的“相当于他的子对象的对象”的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作（摘自《Delphi4 编程技术内幕》）</p></blockquote></li><li><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>Java引用变量有两个类型： 编译时类型和运行时类型。 编译时类型由声明该变量时使用的类型决定， 运行时类型由实际赋给该变量的对象决定。 简称： <strong>编译时， 看左边；运行时， 看右边。</strong></p></li></ol><h3 id="为什么要有多态"><a href="#为什么要有多态" class="headerlink" title="为什么要有多态"></a>为什么要有多态</h3><ol><li><p>比如你是一个酒神，对酒情有独钟。某日回家发现桌上有几个杯子里面都装了白酒，从外面看我们是不可能知道这是些什么酒，只有喝了之后才能够猜出来是何种酒。你一喝，这是剑南春、再喝这是五粮液、再喝这是酒鬼酒….在这里我们可以描述成如下：</p><p>   酒 a &#x3D; 剑南春</p><p>   酒 b &#x3D; 五粮液</p><p>   酒 c &#x3D; 酒鬼酒</p><p>   …</p><p>   这里所表现的的就是多态。剑南春、五粮液、酒鬼酒都是酒的子类，我们<strong>只是通过酒这一个父类就能够引用不同的子类</strong>，这就是多态——我们<strong>只有在运行的时候才会知道引用变量所指向的具体实例对象</strong>。</p></li><li><p>因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p></li></ol><h3 id="怎么使用多态"><a href="#怎么使用多态" class="headerlink" title="怎么使用多态"></a>怎么使用多态</h3><ol><li>虚拟方法调用–比如我现在定义了两个类<code>Person</code>和<code>Man</code>，<code>Man</code>继承自<code>Person</code>并重写了父类中的<code>eat()</code>和<code>walk()</code>方法  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对象的多态性：将子类对象赋给父类变量</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态的使用</span>p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>  当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法。这被称为<strong>虚拟方法调用</strong>。你想想，程序在编译时一位p2是<code>Person</code>对象，但在执行过程中才发现p2是子类对象，进而调用子类重写的方法。利用这一特性，我们可以在某些无法确定具体对象类型的场合，先使用父类对象代替，程序在执行时才决定具体是哪个子类对象类型。</p><ol start="2"><li><p>开发环境中我们经常会这样用：比如我有一个<code>Animal</code>类，并中定义<code>shout()</code>方法，再定义子类<code>Cat</code>、<code>Dog</code>两个类，分别重写<code>shout()</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物：叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪！汪！汪！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵！喵！喵！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再在测试类中定义一个方法func，接收父类作为参数，我希望在接收到Dog对象时，会根据dog重写的方法来反应</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AnimalTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//汪！汪！汪！</span>test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//喵！喵！喵！</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Animal animal = new Dog();</span>    animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试，当向方法中传入dog对象，结果是<code>汪！汪！汪！</code></p></li></ol><h2 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h2><p> Java实现多态有三个必要条件：继承、重写、向上转型。</p><blockquote><p>继承：在多态中必须存在有继承关系的子类和父类。</p><p>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</p><p>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</p></blockquote><h1 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h1><p>对象的多态性，<strong>只适用于方法</strong>，不适用于属性（编译和运行都看左边）</p><h1 id="再次区分重载与重写"><a href="#再次区分重载与重写" class="headerlink" title="再次区分重载与重写"></a>再次区分重载与重写</h1><p>之前我们是从定义方面描述</p><blockquote><p><strong>重载，是一种语言特性</strong>，是同一方法在面对不同参数时有不同的方法对应。记住“两同一不同”：相同类，相同方法名，不同形参。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</p><p><strong>重写，多态性的一种表现</strong>，是子类对父类方法相同方法的覆盖，子类重写的是父类中同名同参数的方法。也就是相同参数时，子类使用不同的方法来对应。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。</p></blockquote><p>现在从编译运行的角度来看：</p><blockquote><p>重载，是指允许存在多个同名方法，而这些方法的参数不同。 编译器根据方法不同的参数表， 对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。 它们的调用地址在编译期就绑定了。 Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</p><p>所以： 对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定” </p><p>而对于多态，只有等到方法调用的那一刻， 解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定” 。</p><p>引用一句Bruce Eckel的话： “不要犯傻，如果它不是晚绑定， 它就不是多态。”  </p></blockquote><p>其中，易错点是：重载只是一种语言特性，与多态无关，与面向对象也无关！ </p><h1 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h1><h2 id="强制类型转换符"><a href="#强制类型转换符" class="headerlink" title="强制类型转换符"></a>强制类型转换符</h2><p>在基本数据类型中，我们使用强制类型转换符，可以将double类型强行转换为int类型，代价是损失精度。</p><p>在类中我们也可以强制从父类转换成子类，这样就可以使用子类的特有方法，代价就是，有可能转换失败。比如你本来是<code>new Man()</code>，但在强转时却转成了Woman类型，此时编译可以通过，但运行不成功。会出现<code>ClassCastException</code>的异常。</p><p><img src="https://s2.loli.net/2023/01/17/zsIRmxJqBLDATcC.png" alt="Java转型对比"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//强行向下转型</span><span class="token class-name">Man</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><p>为了避免转型失败造成程序中止，我们可以先判断</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Woman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//new Man(),所以结果应为false</span>    <span class="token class-name">Woman</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>    m1<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并且，如果判断的是父类，也会返回true</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h2><ol><li><p>这里所说的向下转型，一定是先由子类构造器生成了子类对象，但由于多态性被转成父类对象。此时的父类对象才能够被转型，因为其拥有子类对象的所有特性。但若直接是父类构造器生成的，它便没有子类的特性，也就无法转型。</p><p>这一点要与基本类型的转换做区分。</p></li><li><p>若子类重写了父类方法，就意味着<strong>子类里定义的方法彻底覆盖了父类里的同名方法</strong>，系统将不可能把父类里的方法转移到子类中：编译看左边，运行看右边</p></li><li><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然<strong>不可能覆盖父类中定义的实例变量</strong>：编译运行都看左边</p></li></ol><h1 id="Object类介绍"><a href="#Object类介绍" class="headerlink" title="Object类介绍"></a>Object类介绍</h1><p>java.lang.Object类</p><h2 id="所有Java类的根父类"><a href="#所有Java类的根父类" class="headerlink" title="所有Java类的根父类"></a>所有Java类的根父类</h2><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</p><p>Object类中的功能(属性、方法)具有通用性。</p><ul><li><p>属性：无</p></li><li><p>方法：equals() 、toString()、getClass()、hashCode()、clone()、finalize()、wait() 、 notify()、notifyAll()</p></li></ul><p>Object类只声明了一个空参的构造器</p><h2 id="运算符的回顾"><a href="#运算符的回顾" class="headerlink" title="运算符的回顾"></a>运算符的回顾</h2><p>面试题： &#x3D;&#x3D; 和 equals() 区别</p><h3 id="回顾-x3D-x3D-的使用："><a href="#回顾-x3D-x3D-的使用：" class="headerlink" title="回顾 &#x3D;&#x3D; 的使用："></a>回顾 &#x3D;&#x3D; 的使用：</h3><p>可以使用在基本数据类型变量和引用数据类型变量中</p><ol><li><p>如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。（不一定类型要相同）</p></li><li><p>如果比较的是引用数据类型变量：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p><p>补充： &#x3D;&#x3D; 符号使用时，必须保证符号左右两边的变量类型一致。</p></li></ol><h3 id="equals-方法的使用："><a href="#equals-方法的使用：" class="headerlink" title="equals()方法的使用："></a>equals()方法的使用：</h3><p>只能适用于引用数据类型</p><ol><li><p>是一个方法，而非运算符</p></li><li><p>Object类中equals()的定义：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public boolean equals(Object obj) &#123;return (this &#x3D;&#x3D; obj);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：Object类中定义的<code>equals()</code>和<code>==</code>的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p></li><li><p>像String、Date、File、包装类等都重写了<code>Object</code>类中的<code>equals()</code>方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</p></li><li><p>通常情况下，我们自定义的类如果使用<code>equals()</code>的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对<code>Object</code>类中的<code>equals()</code>进行重写。</p><p>重写的原则：比较两个对象的实体内容是否相同.</p></li></ol><blockquote><p>实际开发中，我们通常使用IDE自动生成<code>equals()</code>方法</p></blockquote><p>如果自己重写<code>equals()</code>方法，可以这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">MyDate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">MyDate</span> myDate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyDate</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token comment">//强转是为了调用子类的属性。</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>myDate<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>myDate<span class="token punctuation">.</span>month<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>day<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>myDate<span class="token punctuation">.</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//在这里如果比较基本数据类型，用==；比较引用数据类型用对象自己的equals，另外，你自己定义的类记得重写</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><p>当我们输出一个对象的引用时，实际上就是调用当前对象的toString()</p><p>Object类中<code>toString()</code>的定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>像String、Date、File、包装类等都重写了Object类中的<code>toString()</code>方法。使得在调用对象的<code>toString()</code>时，返回”实体内容”信息。</p><p>自定义类也可以重写toString()方法，当调用此方法时，返回对象的”实体内容”，这个技术含量不高，用IDE自动生成吧。</p><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><p>使用<code>Junit</code>进行单元测试</p><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><ol><li><p>给当前项目的<code>libraries</code>中添加<code>junit</code>包</p></li><li><p>创建Java类，进行单元测试。</p><p>此时的Java类要求：</p><ul><li>此类是public的</li><li>此类提供公共的无参的构造器</li></ul></li><li><p>此类中声明单元测试方法。</p><p>方法的权限是public，没有返回值，没有形参</p><p><code>@Test</code></p><p>并在单元测试类中导入：<code>import org.junit.Test;</code></p></li><li><p>此单元测试方法上需要声明注解</p></li></ol><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>如果方法没有异常</p><img src="https://s2.loli.net/2023/01/18/rdH1CD2SVg3RK4j.png" alt="正常界面" style="zoom:67%;" /><p>如果方法有异常</p><img src="https://s2.loli.net/2023/01/18/bxXtQkZjKJ8BMy1.png" alt="异常界面" style="zoom:67%;" /><h1 id="包装类-Wrapper"><a href="#包装类-Wrapper" class="headerlink" title="包装类(Wrapper)"></a>包装类(Wrapper)</h1><h2 id="哲学三问-1"><a href="#哲学三问-1" class="headerlink" title="哲学三问"></a>哲学三问</h2><h3 id="什么是包装类"><a href="#什么是包装类" class="headerlink" title="什么是包装类"></a>什么是包装类</h3><p>包装类，顾名思义就是将什么经过包装的类，那么是将什么包装起来的呢？显然这里是将基本类型包装起来的类。包装类的作用就是将基本类型转成对象，将基本类型作为对象来处理。</p><h3 id="为什么需要包装类"><a href="#为什么需要包装类" class="headerlink" title="为什么需要包装类"></a>为什么需要包装类</h3><p>Java 语言是一个面向对象的编程语言，但是 Java 中的基本数据类型却不是面向对象的，但是我们在实际使用中经常需要将基本数据类型转换成对象，便于操作。</p><p>比如，集合的操作中，我们就需要将基本类型数据转化成对象，所以就出现了包装类。</p><h3 id="怎么使用包装类"><a href="#怎么使用包装类" class="headerlink" title="怎么使用包装类"></a>怎么使用包装类</h3><p><code>Integer number = new Integer(123);</code></p><h2 id="包装类的种类"><a href="#包装类的种类" class="headerlink" title="包装类的种类"></a>包装类的种类</h2><img src="https://s2.loli.net/2023/01/18/KrPLmXCjthDTJ74.png" alt="包装类" style="zoom: 50%;" /><p>此图中标红的名称并不是将首字母大写的来的，方框内的类都有一个父类<code>Number</code></p><p>继承关系可看下图</p><img src="https://s2.loli.net/2023/01/18/wGsYk6FJXONp8lx.png" alt="包装类的继承关系" style="zoom:50%;" /><h2 id="拆装箱详解"><a href="#拆装箱详解" class="headerlink" title="拆装箱详解"></a>拆装箱详解</h2><p>在了解自动拆装箱之前，我们得先知道什么是拆箱和装箱。其实拆装箱主要应对基本类型与包装类型的相互转换问题。</p><ul><li>装箱：将基本类型转换成包装类型的过程叫做装箱。</li><li>拆箱：将包装类型转换成基本类型的过程叫做拆箱。</li></ul><p><img src="https://s2.loli.net/2023/01/18/xswGO4yV53jHDNA.png" alt="拆装箱详解"></p><p>其实，在<code>JDK1.5</code>版本之前，是没有自动拆装箱的，开发人员要手动进行装拆箱：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//手动装箱，也就是将基本类型10转换为引用类型</span><span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或者</span><span class="token class-name">Integer</span> integer1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动拆箱，也就是将引用类型转换为基本类型</span><span class="token keyword">int</span> num <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//num==10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在在 JDK1.5 版本之后，为了减少开发人员的工作，提供了自动装箱与自动拆箱的功能。如下方代码所示：</p><p>只需要像基本数据类型一样用就行了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自动装箱</span><span class="token class-name">Integer</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//自动拆箱</span><span class="token keyword">int</span> two <span class="token operator">=</span> one <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本数据类型、包装类与String类之间转化"><a href="#基本数据类型、包装类与String类之间转化" class="headerlink" title="基本数据类型、包装类与String类之间转化"></a>基本数据类型、包装类与String类之间转化</h2><h3 id="由基本数据类型、包装类向String类"><a href="#由基本数据类型、包装类向String类" class="headerlink" title="由基本数据类型、包装类向String类"></a>由基本数据类型、包装类向String类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">//方式一：直接拼接</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//方式二：用valueOf()</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由String类向基本数据类型、包装类"><a href="#由String类向基本数据类型、包装类" class="headerlink" title="由String类向基本数据类型、包装类"></a>由String类向基本数据类型、包装类</h3><p>通过<code>parseInt()</code>等方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意的是，如果数据不干净，会报错：<code>NumberFormatException</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"trUe"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只有<code>Boolean</code>类特殊，不会报错</p><blockquote><p>Parses the string argument as a boolean. The <code>boolean</code> returned represents the value <code>true</code> if the string argument is not <code>null</code> and is equal, ignoring case, to the string <code>&quot;true&quot;</code>.</p><p>把字符串参数解析为一个布尔值。如果字符串不为空并且等于true（忽略大小写）布尔值返回true。</p></blockquote><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//三元运算符会自动将两个表达式的值平衡</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1.0</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> o2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span><span class="token comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span><span class="token comment">//-128~127范围内时，可以直接使用数组中的元素，不用再去new了。目的：提高效率</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于test3的调试图</p><p><img src="https://s2.loli.net/2023/01/18/cawts79kRzqN8Oi.png" alt="test3"></p><p>我们可以看到i3,i4的地址不同。</p><p>或许你还有疑问，我们之前不是在输出时使用表达式计算吗？<code>System.out.println(i1 + i2);</code>这个时候它怎么自动拆箱然后算出了值。</p><p>问题在于<code>i1 == i2</code>这是一个布尔值表达式。这会使得<code>println()</code>调用</p><blockquote><p><em>void</em> java.io.PrintStream.println(<em>boolean</em> x)</p><p>Prints a boolean and then terminate the line. This method behaves as though it invokes <code>print(boolean)</code> and then <code>println()</code>.</p></blockquote><p>然而<code>i1 + i2</code>是一个int值的表达式。他会调用</p><blockquote><p><em>void</em> java.io.PrintStream.println(<em>int</em> x)</p><p>Prints an integer and then terminate the line. This method behaves as though it invokes <code>print(int)</code> and then <code>println()</code>.</p><p>在print时会自动调用valueOf方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>所以会自动拆箱取值。</p><hr><p>本文参考：</p><p><a href="https://www.cnblogs.com/chenssy/p/3372798.html">java提高篇(四)—–理解java的三大特性之多态</a></p><p><a href="https://nicrosoft.net/10/">浅谈多态——概念描述</a></p><p><a href="https://www.cnblogs.com/yychuyu/p/13263216.html">Java工具类——包装类</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的面向对象笔记（中）</title>
      <link href="/2023/01/15/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/"/>
      <url>/2023/01/15/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A13/</url>
      
        <content type="html"><![CDATA[<h1 id="继承性基础"><a href="#继承性基础" class="headerlink" title="继承性基础"></a>继承性基础</h1><h2 id="哲学三问"><a href="#哲学三问" class="headerlink" title="哲学三问"></a>哲学三问</h2><h3 id="什么是继承性"><a href="#什么是继承性" class="headerlink" title="什么是继承性"></a>什么是继承性</h3><p>银行卡有很多种，有借记卡、信用卡、亲情卡、工资卡等等，他们各有不同，但都具有相同的银行卡特征，即余额、卡号等共有的属性，如果每定义一个类都需要写一次，那就太麻烦了。有没有什么办法抽取出相同特征呢？</p><p>利用继承性，我们可以在银行卡类中定义共同特征，然后将单独的特征再定义。</p><blockquote><p>在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”</p></blockquote><h3 id="为什么需要继承性（优点）"><a href="#为什么需要继承性（优点）" class="headerlink" title="为什么需要继承性（优点）"></a>为什么需要继承性（优点）</h3><ol><li><p>减少代码冗余，提高代码复用性</p></li><li><p>便于功能拓展</p><p>如果现在所有的银行卡都需要添加实名登记功能，那么我们就可以在父类中直接写，通过继承，其他子类自然可以获得这个功能，不必每个都写一遍。</p></li><li><p>为多态性提供了基础</p></li></ol><h3 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h3><p><code>extends</code>关键字</p><p><code>class A extends B&#123;&#125;</code></p><ul><li><p>A: 子类、派生类、subclass</p></li><li><p>B: 父类、超类、基类、superclass</p></li></ul><p>例如现在要让Student类继承Person类</p><p><code>public class Student extends Person&#123;&#125;</code></p><p>调用时可以直接当作自己的来用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stu<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old, and his/her major is "</span> <span class="token operator">+</span> stu<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时此刻我想起一句歌词。<code>哦~~爸爸妈妈给我的不少不多~~~~</code></p><p>一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。不过，如果是父类中的<code>private</code>私有属性和方法呢？</p><h2 id="私有属性、方法继承"><a href="#私有属性、方法继承" class="headerlink" title="私有属性、方法继承"></a>私有属性、方法继承</h2><p>一般地，我们可以浅显地理解为：继承了。但是不能直接使用，必须通过共有方法来操作。私有方法也是，必须通过共有方法来进行调用。</p><p><img src="https://s2.loli.net/2023/01/15/x7nRmiDG4Ovlaru.png" alt="继承规则"></p><p>但是这只是表象，如果你深入理解，会发现完全不是这样，并且这个理解在逻辑上有漏洞：既然继承了这个属性和方法，就应该能够在自己的类中进行调用，你父类的私有属性和方法自己都可以调用，为什么我子类的私有方法就不行，天生低人一等？现在这个情况即使使用封装性来解释也是差强人意。</p><p>来看官方的解释：</p><blockquote><h2 id="Private-Members-in-a-Superclass"><a href="#Private-Members-in-a-Superclass" class="headerlink" title="Private Members in a Superclass"></a>Private Members in a Superclass</h2><p>A subclass does not inherit the <code>private</code> members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass.</p><p>A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.</p></blockquote><p>翻译一下：（第二句话涉及内部类，如果没接触过可以先忽略）</p><blockquote><p><strong>父类中的私有成员</strong></p><p>子类不会继承父类的<code>private</code>私有成员。然而，如果父类有<code>public</code>或<code>protected </code>方法能够访问它的私有属性，那这些属性就可以被子类使用。</p><p>内部类可以访问其外部类的所有私有成员，包括属性和方法。因此，由子类继承的<code>public</code>或<code>protected </code>的内部类可以间接访问父类的所有私有成员。</p></blockquote><p>也就是说，子类会继承<code>public</code>或<code>protected </code>的成员。</p><p>分析内存后，会发现，当一个子类被实例化的时候，默认会先调用父类的构造方法对父类进行初始化，即在内存中创建一个父类对象，然后再父类对象的外部放上子类独有的属性，两者合起来成为一个子类的对象。</p><p>说人话就是：</p><blockquote><p>实际上并没有被继承，但是，子类在创建时会附带着创建父类对象，因此父类对象中的private属性虽然对我来说不可见，但是我拥有你的公共方法，通过公共方法可以来对你进行操作。</p></blockquote><p>为什么要这样做呢？</p><blockquote><p>这样的设计的意义就是我们可以用这个方法将我们的成员保护得更好，让子类的设计者也只能通过父类指定的方法修改父类的私有成员，这样将能把类保护得更好，这对一个完整的继承体系是尤为可贵的。</p></blockquote><h2 id="关于继承性的规定"><a href="#关于继承性的规定" class="headerlink" title="关于继承性的规定"></a>关于继承性的规定</h2><ol><li>一个类可以被多个子类继承。</li><li>Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</li></ol><p><img src="https://s2.loli.net/2023/01/15/YVvg79h8wyXJTzr.png" alt="多层继承" style="zoom:50%;" /><img src="https://s2.loli.net/2023/01/15/LKd6cyCAWBR4jSQ.png" alt="image-20230115150903755" style="zoom:50%;" /></p><h2 id="所有类的父类Object"><a href="#所有类的父类Object" class="headerlink" title="所有类的父类Object"></a>所有类的父类Object</h2><ol><li><p>如果我们没有显式的声明一个类的父类的话，则此类继承于<code>java.lang.Object</code>类</p></li><li><p>所有的java类（除<code>java.lang.Object</code>类之外）都直接或间接的继承于<code>java.lang.Object</code>类</p></li><li><p>意味着，所有的java类具有<code>java.lang.Object</code>类声明的功能。</p></li></ol><img src="https://s2.loli.net/2023/01/15/CPS8KXeuy3UQLpR.png" alt="Object" style="zoom: 50%;" /><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li>根据下图实现类。在<code>CylinderTest</code>类中创建<code>Cylinder</code>类的对象，设置圆柱的底面半径和高，并输出圆柱的体积。</li></ol><img src="https://s2.loli.net/2023/01/15/IfUuva1w5j6qzCF.png" alt="image-20230115170913977" style="zoom:50%;" /><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cylinder</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        length <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是测试方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Cylinder</span> cylinder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       cylinder<span class="token punctuation">.</span><span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       cylinder<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">double</span> volume <span class="token operator">=</span> cylinder<span class="token punctuation">.</span><span class="token function">findVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"底面半径为"</span> <span class="token operator">+</span> cylinder<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，高为"</span> <span class="token operator">+</span>       cylinder<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的圆柱，它的体积为："</span> <span class="token operator">+</span> cylinder<span class="token punctuation">.</span><span class="token function">findVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h1><p>方法的重写(override &#x2F; overwrite)</p><h2 id="什么是重写"><a href="#什么是重写" class="headerlink" title="什么是重写"></a>什么是重写</h2><p>子类继承父类以后，可以对父类中<strong>同名同参数</strong>的方法，进行覆盖操作</p><h2 id="为什么要重写"><a href="#为什么要重写" class="headerlink" title="为什么要重写"></a>为什么要重写</h2><p>有时父类的方法并不适合子类，需要重写修改方法体。</p><h2 id="怎么重写"><a href="#怎么重写" class="headerlink" title="怎么重写"></a>怎么重写</h2><h3 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h3><p><code>权限修饰符</code> <code> 返回值类型</code>  <code>方法名(形参列表)</code> <code>throws</code> <code>异常的类型</code> <code>&#123;</code><br>        <code>//方法体</code><br>        <code>&#125;</code></p><p>约定俗成：子类中的叫重写的方法，父类中的叫被重写的方法</p><ul><li>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</li></ul><h3 id="重写方法的权限"><a href="#重写方法的权限" class="headerlink" title="重写方法的权限"></a>重写方法的权限</h3><p><code>子类</code>重写的方法的权限修饰符<strong>大于等于</strong><code>父类</code>被重写的方法的权限修饰符</p><ul><li>特殊地：子类不能重写父类中声明为<code>private</code>权限的方法</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li><p>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</p></li><li><p>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是<strong>A类或A类的子类</strong></p></li><li><p>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)</p></li></ul><h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><p>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲）</p><h3 id="例外：静态方法"><a href="#例外：静态方法" class="headerlink" title="例外：静态方法"></a>例外：静态方法</h3><p>子类和父类中的同名同参数的方法要么都声明为非static的（这时候是重写），要么都声明为static的（不是重写）。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个<code>Cylinder</code>类，重写<code>findArea()</code>计算圆柱表面积</p><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cylinder</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        length <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//计算体积</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return findArea() * length;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>         <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="protected修饰符"><a href="#protected修饰符" class="headerlink" title="protected修饰符"></a>protected修饰符</h1><p>还记得我们学修饰符时省略了<code>protected</code>吗？现在是时候去验证一下了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token class-name">String</span> major<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在另一个包下创建新的类，试试调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Doctor</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> work<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Doctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//这时会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会报错呢？protected的描述是不同包下子类，原来是没有加继承关键字，加上后就可以了。提醒自己不要忘记哦~~</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Doctor</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> work<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Doctor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p>面试题：区分方法的重载与重写</p><p>答案：</p><blockquote><p>重载，是一种语言特性，是同一方法在面对不同参数时有不同的方法对应。记住“两同一不同”：相同类，相同方法名，不同形参。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。</p><p>重写，多态性的一种表现，是子类对父类方法相同方法的覆盖，子类重写的是父类中同名同参数的方法。也就是相同参数时，子类使用不同的方法来对应。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被”屏蔽”了。</p></blockquote><p>本文参考：</p><p><a href="https://juejin.cn/post/7023580206099071007">子类到底能不能继承父类的私有属性？</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的面向对象笔记（上）（二）</title>
      <link href="/2023/01/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/"/>
      <url>/2023/01/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A12/</url>
      
        <content type="html"><![CDATA[<h1 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h1><h2 id="Overload-重载"><a href="#Overload-重载" class="headerlink" title="Overload 重载"></a>Overload 重载</h2><ol><li>定义：在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</li></ol><blockquote><p>两同一不同</p><ul><li>同一个类、相同方法名</li><li>参数列表不同：参数个数不同，参数类型不同，参数顺序不同</li></ul></blockquote><ol start="2"><li>判断是否是重载：</li></ol><blockquote><p>跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系！</p></blockquote><ol start="3"><li>在通过对象调用方法时，如何确定某一个指定的方法：</li></ol><ul><li>方法名 —&gt; 参数列表</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>编写程序，定义三个重载方法并调用。方法名为<code>mOL</code>。</p><ol><li>三个方法分别接收一个<code>int</code>参数、两个<code>int</code>参数、一个字符串参数。</li></ol><p>  分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。</p><p>  在主类的<code>main ()</code>方法中分别用参数区别调用三个方法。<br>2. 定义三个重载方法max()，<br>    第一个方法求两个<code>int</code>值中的最大值，<br>    第二个方法求两个<code>double</code>值中的最大值，<br>    第三个方法求三个<code>double</code>值中的最大值，<br>    并分别调用三个方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverloadExer</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OverloadExer</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverloadExer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------第一题---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">mOL</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//25</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">mOL</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span>        test<span class="token punctuation">.</span><span class="token function">mOL</span><span class="token punctuation">(</span><span class="token string">"我爱你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我爱你</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------第二题---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">4.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5.6</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5.6</span><span class="token punctuation">&#125;</span><span class="token comment">//1.</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mOL</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token operator">*</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mOL</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token operator">*</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mOL</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token operator">?</span> i<span class="token operator">:</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token operator">?</span> i<span class="token operator">:</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token punctuation">,</span> <span class="token keyword">double</span> j<span class="token punctuation">,</span><span class="token keyword">double</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span><span class="token operator">?</span> i<span class="token operator">:</span>j<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>max <span class="token operator">></span> k<span class="token punctuation">)</span><span class="token operator">?</span> max<span class="token operator">:</span>k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可变个数形参"><a href="#可变个数形参" class="headerlink" title="可变个数形参"></a>可变个数形参</h2><p><code>JDK5.0</code>增加</p><ol><li><p>可变个数形参的格式：（用三个点来表示可变）</p><p><code>数据类型 ... 变量名</code></p></li><li><p>当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个，2个。。。</p></li><li><p>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载</p></li><li><p>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载。换句话说，二者不能共存。</p><blockquote><p>关于这点，是java的历史原因。在<code>JDK5.0</code>之前，我们想要传入可变参数需要使用数组，像这样：</p><p><code>public void show(String[] *strs*)&#123;方法体&#125;</code></p><p>其实这和可变参数实际是一样的，只是数组用起来麻烦点，证据就是，你甚至可以使用可变参数的方式声明方法，但是用数组的方式在方法中进行调用。</p></blockquote></li><li><p>可变个数形参在方法的形参中，必须声明在末尾</p><blockquote><p>The variable argument type String of the method show must be the last parameter</p></blockquote><p>很好理解，如果把可变形参放在前面，编译器如果碰到多个参数<code>public void show(String ...strs,int i)</code>，接收参数时，就不知道到底哪个是可变形参，哪个是具体的形参了，别忘了有些参数之间是有类型转换的，万一是double和int就头疼了。</p></li><li><p>可变个数形参在方法的形参中，最多只能声明一个可变形参。</p><p>可以用数组声明多个，但是没必要，根据实际情况来。</p></li></ol><h2 id="值传递机制"><a href="#值传递机制" class="headerlink" title="值传递机制"></a>值传递机制</h2><ol><li><p>关于变量的赋值：</p><ul><li>如果变量是基本数据类型，此时赋值的是变量所保存的数据值。</li><li>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。</li></ul></li><li><p>区分形参实参</p><ul><li>形参：方法定义时，声明的小括号内的参数</li><li>实参：方法调用时，实际传递给形参的数据</li></ul></li></ol><p>重点：</p><p>如果参数是基本数据类型，此时<strong>实参赋给形参</strong>的是实参真实存储的数据值。</p><p>如果参数是引用数据类型，此时<strong>实参赋给形参</strong>的是实参存储数据的地址值。</p><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p><img src="https://s2.loli.net/2023/01/12/mDo8hvnpFbj9PUA.png" alt="image-20230112000607131"></p><p>引出一个不是太靠谱的结论：</p><p>如果你想在方法中对某对象的属性进行修改，一定要将整个对象传进去。</p><p>但是在你明白这句话之前，请一定记住</p><blockquote><p>如果变量是<strong>基本</strong>数据类型，此时赋值的是变量真实存储的<strong>数据值</strong>。</p><p>如果变量是<strong>引用</strong>数据类型，此时赋值的是变量存储数据的<strong>地址值</strong>。</p></blockquote><p>String就是一个特殊的反例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">ValueTransferTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hi~~</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>s <span class="token operator">=</span> <span class="token string">"hi~~"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你在<code>change</code>方法中修改字符串的值时，你会认为，我传进去的是一个对象，对这个对象进行修改，那方法外再次调用字符串，也应该是修改后的字符串值<code>hi~~</code>。但并不是这样，String很特殊，它是存储在常量池里的char型数组，数组有什么特性？<strong>长度不可变。</strong>如果我们进行修改，那就只能重新写一个char型数组然后赋值地址给<code>s</code>，可是s1变量并没有被修改，里面还是之前的地址。</p><p>所以本质上，还是传递了地址值，根据情况不同，有不同表现。当你没有完全理解传值的本质时，就不要记这个结论了。</p><h3 id="进阶的例子"><a href="#进阶的例子" class="headerlink" title="进阶的例子"></a>进阶的例子</h3><p><img src="https://s2.loli.net/2023/01/12/5wIdPopSuqBf6aW.png" alt="image-20230112100944571"></p><p>把握上文的重点是你理解值传递机制的关键。</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><ol><li><p>定义一个Circle类， 包含一个double型的radius属性代表圆的半径， 一个<code>findArea()</code>方法返回圆的面积。</p></li><li><p>定义一个类<code>PassObject</code>， 在类中定义一个方法<code>printAreas()</code>， 该方法的定义<br>如下： <code>public void printAreas(Circle c, int time)</code><br>在<code>printAreas</code>方法中打印输出1到time之间的每个整数半径值， 以及对应的面积。<br>例如， times为5， 则输出半径1， 2， 3， 4， 5， 以及对应的圆面积。</p></li><li><p>在main方法中调用<code>printAreas()</code>方法， 调<br>用完毕后输出当前半径值。 程序运行结果如图<br>所示。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PassObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PassObject</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PassObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">printAreas</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"now radius is "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printAreas</span><span class="token punctuation">(</span><span class="token class-name">Circle</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"radius\t\tArea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span>radius <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>radius <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        c<span class="token punctuation">.</span>radius <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h2><p>递归方法：一个方法体内调用它自身。</p><p>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 计算1-100之间所有自然数的和</span><span class="token comment">// 方式一（我们最开始使用的方法）：</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方式二：</span><span class="token class-name">RecursionTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecursionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算1-n之间所有自然数的和</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 3</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="封装和隐藏"><a href="#封装和隐藏" class="headerlink" title="封装和隐藏"></a>封装和隐藏</h1><p>为什么需要封装？封装的作用和含义？</p><p>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</p><p>我们程序设计追求<strong>“高内聚，低耦合”</strong>。</p><ul><li>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合 ： 仅对外暴露少量的方法用于使用。</li></ul><p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露<br>的暴露出来。 这就是封装性的设计思想。  </p><h2 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h2><p>当我们创建一个类的对象以后，我们可以通过”对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是，在实际问题中，我们往往需要给属性赋值加入额外的限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行限制条件的添加。（比如：<code>setLegs()</code>）同时，我们需要避免用户再使用<code>对象.属性</code>的方式对属性进行赋值。则需要将属性声明为私有的(private).</p><blockquote><p>此时，针对于属性就体现了封装性。</p></blockquote><h3 id="getter-setter方法"><a href="#getter-setter方法" class="headerlink" title="getter\setter方法"></a>getter\setter方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//private保证无法通过“对象.属性”方式调用</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//set传参进去，设置属性，无需返回值</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//get无需传参，返回属性值即可</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装的体现"><a href="#封装的体现" class="headerlink" title="封装的体现"></a>封装的体现</h2><p>我们将类的属性xxx私有化<code>private</code>，同时，提供公共的<code>public</code>方法来获取<code>getXxx</code>和设置<code>setXxx</code>此属性的值</p><p>还体现在： ①如上  ② 不对外暴露的私有的方法  ③ 单例模式  …</p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>封装性的体现，需要权限修饰符来配合。</p><p>Java规定的4种权限（从小到大排列）：private、缺省、protected 、public</p><table><thead><tr><th align="center">修饰符</th><th align="center">类内部</th><th align="center">同一个包</th><th align="center">不同包子类</th><th align="center">同一工程</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">yes</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">（缺省）</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr></tbody></table><blockquote><p>对于类的权限修饰只能用public和缺省</p></blockquote><p>4种权限可以用来修饰类及类的内部结构：属性、方法、构造器、内部类</p><p>这四种权限中protected涉及继承，等学过继承之后再来验证。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java提供了4种权限修饰符来修饰类及类的内部结构，体现类及类的内部结构在被调用时的可见性的大小。</p><p><img src="https://s2.loli.net/2023/01/12/95fiCwvWGbTrYag.png" alt="image-20230112234306916"></p><h1 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h1><p>构造器（或构造方法、constructor）</p><h2 id="构造器的作用"><a href="#构造器的作用" class="headerlink" title="构造器的作用"></a>构造器的作用</h2><ol><li><p>创建对象</p></li><li><p>初始化对象的信息</p></li></ol><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li><li>定义构造器的格式：<code>权限修饰符  类名(形参列表)&#123;&#125;</code></li><li>一个类中定义的多个构造器，彼此构成<strong>重载</strong></li><li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li><li>一个类中，至少会有一个构造器。</li></ol><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><p>编写两个类，<code>TriAngle</code>和<code>TriAngleTest</code>，其中<code>TriAngle</code>类中声明私有的底边长<code>base</code>和高<code>height</code>，同时声明公共方法访问私有变量。</p><p>此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TriAngle</span> <span class="token punctuation">&#123;</span> <span class="token comment">//angle:角    angel:天使</span><span class="token keyword">private</span> <span class="token keyword">double</span> base<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>    <span class="token comment">//构造器，无参、有参</span><span class="token keyword">public</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token keyword">double</span> b<span class="token punctuation">,</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>base <span class="token operator">=</span> b<span class="token punctuation">;</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//getter、setter方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBase</span><span class="token punctuation">(</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>base <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> height<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TriAngleTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TriAngle</span> triAngle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TriAngle</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三角形面积为"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>triAngle<span class="token punctuation">.</span><span class="token function">getBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> triAngle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性赋值的先后顺序"><a href="#属性赋值的先后顺序" class="headerlink" title="属性赋值的先后顺序"></a>属性赋值的先后顺序</h3><p>简单了解即可，个人觉得作用不是很大，实际开发过程中这几个不会混着用。</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> LRid<span class="token text string">[默认初始化]</span> <span class="token arrow operator">--></span> id2<span class="token text string">[显式初始化]</span> <span class="token arrow operator">--></span> id3<span class="token text string">[构造器中赋值]</span> <span class="token arrow operator">--></span> id4<span class="token text string">[对象.属性]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>是一种Java语言写成的可重用组件</p><p>所谓JavaBean，是指符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>this可以用来修饰、调用：属性、方法、构造器</p><p>this可以理解为：当前对象  或 当前正在创建的对象</p><h2 id="为什么要用"><a href="#为什么要用" class="headerlink" title="为什么要用"></a>为什么要用</h2><p>如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</p><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。</p><h3 id="this调用构造器"><a href="#this调用构造器" class="headerlink" title="this调用构造器"></a>this调用构造器</h3><ul><li>我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li><li>构造器中不能通过”this(形参列表)”方式调用自己</li><li>如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行</li><li>构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"Person初始化时，需要考虑如下的1,2,3,4...(共40行代码)"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//this.age = age;//上面的fan</span><span class="token comment">//Person初始化时，需要考虑如下的1,2,3,4...(共40行代码)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><ol><li>按照下面的UML图写两个类，添加必要的构造器，综合应用构造器的重载，this关键字。</li></ol><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">classDiagram</span>    <span class="token keyword">class</span> Boy<span class="token punctuation">&#123;</span>      -String name      -int age      +setname<span class="token text string">(String name)</span>      +getName<span class="token punctuation">(</span><span class="token punctuation">)</span> String      +setAge<span class="token text string">(int age)</span>      +getAge<span class="token punctuation">(</span><span class="token punctuation">)</span> int      +marry<span class="token text string">(Girl girl)</span>      +shout<span class="token punctuation">(</span><span class="token punctuation">)</span> void    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> Girl<span class="token punctuation">&#123;</span>        -Sting name        -int age        +setName<span class="token text string">(String name)</span>        +getName<span class="token punctuation">(</span><span class="token punctuation">)</span> String        +marry<span class="token text string">(Boy boy)</span>        +compare<span class="token text string">(Girl girl)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想娶"</span> <span class="token operator">+</span> girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先谈谈恋爱吧~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以合法登记结婚。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> boy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想嫁给"</span> <span class="token operator">+</span> boy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>boy<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可以喝喜酒了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 对比当前对象和形参对象的年龄 * @param girl * @return 返回正数说明形参对象大，返回负数说明当前对象大，0一样大 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> girl<span class="token punctuation">.</span>age <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyGirlTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"罗密欧"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>boy<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"朱丽叶"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>girl<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Girl</span> girl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"祝英台"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> compare <span class="token operator">=</span> girl<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>girl1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>compare <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一样大"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>写一个名为 Account 的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：<br>账号<code>id</code>，余额<code>balance</code>，年利率<code>annualInterestRate</code>；包含的方法：访问器方法（getter 和 setter<br>方法），取款方法<code>withdraw()</code>，存款方法<code>deposit()</code>。  </p><p>创建 Customer 类  </p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">classDiagram</span><span class="token keyword">class</span> Account<span class="token punctuation">&#123;</span>-int id-double balance-double annualInterestRate+Account<span class="token text string">(int id, double balance, double annualInterestRate )</span>+getId<span class="token punctuation">(</span><span class="token punctuation">)</span> int+getBalance<span class="token punctuation">(</span><span class="token punctuation">)</span> double+getAnnualInterestRate<span class="token punctuation">(</span><span class="token punctuation">)</span> double+setId<span class="token text string">( int id)</span>+setBalance<span class="token text string">(double balance)</span>+setAnnualInterestRate<span class="token text string">(double annualInterestRate)</span>+withdraw <span class="token text string">(double amount)</span>//取钱+deposit <span class="token text string">(double amount)</span>//存钱<span class="token punctuation">&#125;</span><span class="token keyword">class</span> Customer<span class="token punctuation">&#123;</span>-String firstName-String lastName- Account account+Customer<span class="token text string">(String f,String l)</span>+getFirstName<span class="token punctuation">(</span><span class="token punctuation">)</span> String+getLastName<span class="token punctuation">(</span><span class="token punctuation">)</span> String+getAccount<span class="token punctuation">(</span><span class="token punctuation">)</span> Account+setAccount<span class="token text string">(Account account)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示： 在提款方法 <code>withdraw</code>中，需要判断用户余额是否能够满足提款数额的要求，如果不<br>能，应给出提示。  </p><p>a. 声明三个私有对象属性： firstName、 lastName 和 account。<br>b. 声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f 和 l）<br>c. 声明两个公有存取器来访问该对象属性，方法 <code>getFirstName</code> 和 <code>getLastName</code> 返回相应的属<br>性。<br>d. 声明 <code>setAccount</code> 方法来对 <code>account</code> 属性赋值。<br>e. 声明 <code>getAccount</code> 方法以获取 <code>account</code> 属性。<br>3.写一个测试程序。<br>（1） 创建一个 Customer ，名字叫 Jane Smith, 他有一个账号为 1000，余额为 2000 元，<br>年利率为 1.23％ 的账户。<br>（2） 对 Jane Smith 操作。<br>存入 100 元，再取出 960 元。 再取出 2000 元。<br>打印出 Jane Smith 的基本信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">成功存入 ： <span class="token number">100.0</span>成功取出： <span class="token number">960.0</span>余额不足，取款失败Customer <span class="token punctuation">[</span>Smith, Jane<span class="token punctuation">]</span> has a account: <span class="token function">id</span> is <span class="token number">1000</span>, annualInterestRate is <span class="token number">1.23</span>％, balance is<span class="token number">1140.0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> annualInterestRate<span class="token punctuation">;</span><span class="token comment">//年利率</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">,</span> <span class="token keyword">double</span> annualInterestRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> annualInterestRate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAnnualInterestRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> annualInterestRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 取钱     * @param amount 数额     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，取款失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功取出："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"\n现在余额为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 存钱     * @param amount 数额     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功存入："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"\n现在余额为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存款失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Customer</span> jane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jane<span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Customer ["</span> <span class="token operator">+</span> jane<span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span>        <span class="token operator">+</span> jane<span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] has an account: id is "</span>        <span class="token operator">+</span> jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", annualInterestRate is "</span>        <span class="token operator">+</span> jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%,balance is "</span>        <span class="token operator">+</span> jane<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>按照如下的 UML 类图，创建相应的类，提供必要的结构</li></ol><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">classDiagram</span>    <span class="token keyword">class</span> Account<span class="token punctuation">&#123;</span>        -double balance        +Account<span class="token text string">(double init_balance)</span>        +getBalance<span class="token punctuation">(</span><span class="token punctuation">)</span> double        +deposit<span class="token text string">(double amount)</span>        +withdraw<span class="token text string">(double amount)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> Customer<span class="token punctuation">&#123;</span>        -String firstName        -String lastName        -Account account        +Customer<span class="token text string">(String f,String l)</span>        +getFirstName<span class="token punctuation">(</span><span class="token punctuation">)</span> String        +getLastName<span class="token punctuation">(</span><span class="token punctuation">)</span> String        +getAccount<span class="token punctuation">(</span><span class="token punctuation">)</span> Account        +setAccount<span class="token text string">(Account account)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> Bank<span class="token punctuation">&#123;</span>        -Customer[] customers        -int numberOfCustomer        +Bank<span class="token punctuation">(</span><span class="token punctuation">)</span>        +addCustomer<span class="token text string">(String f,String l)</span>        +getNumberOfCustomers<span class="token punctuation">(</span><span class="token punctuation">)</span> int        +getCustomer<span class="token text string">(int index)</span> Customer    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在提款方法<code>withdraw()</code>中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。<code>deposit()</code>方法表示存款。  </p><p><code>addCustomer</code>方法必须依照参数（姓，名）构造一个新的<code>Customer</code>对象，然后把它放到<code>customer</code>数组中。还必须把<code>numberOfCustomer</code>属性的值加 1。</p><ul><li><code>getNumOfCustomers</code>方法返回<code>numberofCustomers</code>属性值。</li><li><code>getCustomer</code>方法返回与给出的<code>index</code>参数相关的客户。<br>创建<code>BankTest</code>类，进行测试</li></ul><p>答案：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token keyword">double</span> init_balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> init_balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 取钱     * @param amount 数额     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，取款失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功取出："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"\n现在余额为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 存钱     * @param amount 数额     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功存入："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"\n现在余额为："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存款失败。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span> <span class="token class-name">String</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Customer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> customers<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numberOfCustomer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span><span class="token class-name">String</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>customers<span class="token punctuation">[</span>numberOfCustomer<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumberOfCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> numberOfCustomer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">></span> numberOfCustomer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有这么多客户啦。只有"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numberOfCustomer <span class="token operator">+</span> <span class="token string">"个客户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> customers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>yuan2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BankTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bank<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token string">"June"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAccount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer <span class="token operator">=</span> bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取用户对象</span>        customer<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存款</span>        customer<span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取款</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment">//获取余额</span>        bank<span class="token punctuation">.</span><span class="token function">addCustomer</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token string">"Angel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加用户</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在有"</span> <span class="token operator">+</span> bank<span class="token punctuation">.</span><span class="token function">getNumberOfCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个用户。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查看用户数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取第二个用户的名字</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="package关键字"><a href="#package关键字" class="headerlink" title="package关键字"></a>package关键字</h1><ol><li><p>为了更好的实现项目中类的管理，提供包的概念</p></li><li><p>使用package声明类或接口所属的包，声明在源文件的首行</p></li><li><p>包，属于标识符，遵循标识符的命名规则、规范<code>xxxyyyzzz</code>、“见名知意”</p></li><li><p>每<code>.</code>一次，就代表一层文件目录。</p></li></ol><p>补充：</p><blockquote><p>同一个包下，不能命名同名的接口、类。</p><p>不同的包下，可以命名同名的接口、类。</p></blockquote><h1 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a>import关键字</h1><p>import:导入</p><ol><li><p>在源文件中显式的使用import结构导入指定包下的类、接口</p></li><li><p>声明在包的声明和类的声明之间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2<span class="token punctuation">.</span>java3<span class="token punctuation">.</span></span><span class="token class-name">Dog</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageImportTest</span> <span class="token punctuation">&#123;</span><span class="token comment">//类声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要导入多个结构，则并列写出即可</p></li><li><p>可以使用”xxx.<em>“的方式，表示可以导入xxx包下的所有结构</em></p><p><code>import static java.lang.Math.*;</code></p></li><li><p>如果使用的类或接口是<code>java.lang</code>包下定义的，则可以省略<code>import</code>结构</p><p>例如常用类String就是<code>java.lang</code>下的，我们使用的时候就没有<code>import</code></p></li><li><p>如果使用的类或接口是本包下定义的，则可以省略import结构</p></li><li><p>如果在源文件中，使用了不同包下的同名的类，则必须至少有一个类需要以全类名的方式显示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer4<span class="token punctuation">.</span></span><span class="token class-name">Account</span></span><span class="token punctuation">;</span><span class="token comment">//引入的是exer4下的Account</span><span class="token comment">//下面是方法中的声明</span><span class="token class-name">Account</span> acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引入包的直接可以用</span><span class="token comment">//同名的就用全类名的方式显示</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3<span class="token punctuation">.</span></span>Account</span> acct1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer3<span class="token punctuation">.</span></span>Account</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">0.0123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用”xxx.*”方式表明可以调用xxx包下的所有结构。但是如果使用的是xxx子包下的结构，则仍需要显式导入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token comment">//java.lang是默认导入的，但是它的子包内容需要导入才行</span><span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>import static:导入指定类或接口中的静态结构:属性或方法。 </p><p>例如，<code>System.out.println();</code>这句语句其实是调用<code>java.lang.System</code>包内关键字<code>out</code>，我们可以显式导入，就可以在下次直接使用<code>out</code>调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p>直接上链接</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的面向对象笔记（上）</title>
      <link href="/2023/01/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/01/10/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/02/08/jWNelFA4c7BGkTw.jpg" alt="232351333ba0aa7b0700c2b1b67fc3482"></p><h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><h2 id="主线"><a href="#主线" class="headerlink" title="主线"></a>主线</h2><ol><li><p>类及类的成员</p><p>属性、方法、构造器；</p><p>代码块，内部类</p></li><li><p>面向对象三大特征</p><p>继承、封装、多态</p></li><li><p>其他关键字</p><p><code>this</code>,<code>super</code>,<code>static</code>,<code>final</code>,<code>abstract</code>,<code>interface</code>等</p></li></ol><h2 id="面向对象的两个要素"><a href="#面向对象的两个要素" class="headerlink" title="面向对象的两个要素"></a>面向对象的两个要素</h2><p>一、是什么</p><p>类：对一类事物的描述，是抽象的、概念上的定义</p><p>对象：是实际存在的该类事物的每个个体，因而也称为实例(instance)</p><ul><li><p>面向对象程序设计的重点是类的设计</p></li><li><p>设计类，就是设计类的成员。(这个设计是动词)</p></li></ul><p>二、类和对象的使用（面向对象思想落地的实现）：</p><ol><li>创建类，设计类的成员</li><li>创建类的对象</li><li>通过<code>对象.属性</code>或<code>对象.方法</code>调用对象的结构</li></ol><p>三、如果创建了一个类的多个对象，则每个对象都独立的拥有一套类的属性。（非static的）</p><p>意味着：如果我们修改一个对象的属性a，则不影响另外一个对象属性a的值。</p><h2 id="对象的内存解析"><a href="#对象的内存解析" class="headerlink" title="对象的内存解析"></a>对象的内存解析</h2><p><img src="C:\Users\HengxingStu\OneDrive\桌面\对象内存解析.png" alt="对象的内存解析"></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//2. 创建Person类的对象</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和这个一样Scanner scanner = new Scanner(System.in);</span><span class="token comment">//调用对象的结构：属性、方法</span><span class="token comment">//调用属性：“对象.属性”</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法：“对象.方法”</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*******************************</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//*******************************</span><span class="token comment">//将p1变量保存的对象地址值赋给p3,导致p1和p3指向了堆空间中的同一个对象实体。</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tom</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//1.创建类，设计类的成员</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话,使用的是："</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p> 属性（成员变量）   vs  局部变量</p><ol><li><p>相同点：</p><ul><li>定义变量的格式：数据类型  变量名 &#x3D; 变量值</li><li>先声明，后使用</li><li>变量都有其对应的作用域</li></ul></li><li><p>不同点：</p><ol><li><p>在类中声明的位置的不同<br> 属性：直接定义在类的一对<code>&#123;&#125;</code>内<br> 局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</p></li><li><p>关于权限修饰符的不同<br>属性：可以在声明属性时，指明其权限，使用权限修饰符。<br>常用的权限修饰符：缺省(不写时默认)、private、public、protected  —&gt;详细在封装性中</p><blockquote><p>目前，大家声明属性时，都使用缺省就可以了。</p></blockquote><p>⭐局部变量：不可以使用权限修饰符。也可以理解为，方法的权限就相当于局部变量的权限了。</p></li><li><p>默认初始化值的情况：</p><ul><li>属性：类的属性，根据其类型，都有默认初始化值。<br>整型（byte、short、int、long）：0<br>浮点型（float、double）：0.0<br> 字符型（char）：0  （或’\u0000’）<br> 布尔型（boolean）：false<br> 引用数据类型（类、数组、接口）：null<br> ​    </li><li>局部变量：没有默认初始化值。<br>意味着，我们在调用局部变量之前，一定要显式赋值。<br>特别地：形参在调用时，我们赋值即可。</li></ul></li></ol></li><li><p>在内存中加载的位置：<br> 属性：加载到堆空间中   （非static）<br> 局部变量：加载到栈空间</p></li><li><p>总结</p></li></ol><table><thead><tr><th align="center"></th><th align="center">成员变量</th><th align="center">局部变量</th></tr></thead><tbody><tr><td align="center">声明的位置</td><td align="center">直接声明在类中</td><td align="center">方法形参或内部、代码块内、构造器内等</td></tr><tr><td align="center">修饰符</td><td align="center">private、public、static、final等</td><td align="center">不能用权限修饰符修饰，可以用final修饰</td></tr><tr><td align="center">初始化值</td><td align="center">有默认初始化值</td><td align="center">没有默认初始化值，必须显式赋值，方可使用</td></tr><tr><td align="center">内存加载位置</td><td align="center">堆空间 或 静态域内</td><td align="center">栈空间</td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>方法的声明格式：</p><p><img src="https://s2.loli.net/2023/01/10/KVSlunGp7wmQsMB.png" alt="image-20230110125550880"></p><p>注意：static、final、abstract 来修饰的方法，后面再讲。</p><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>关于权限修饰符：默认方法的权限修饰符先都使用public<br> Java规定的4种权限修饰符：private、public、缺省、protected  –&gt;封装性再细说</li><li>返回值类型： 有返回值  vs 没有返回值<ul><li>如果方法<strong>有返回值</strong>，则必须在方法声明时，<strong>指定返回值的类型</strong>。同时，方法中，需要使用return关键字来返回指定类型的变量或常量：“return 数据”。</li><li>如果方法<strong>没有返回值</strong>，则方法声明时，<strong>使用void来表示</strong>。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。</li><li>我们定义方法该不该有返回值？<br> ① 题目要求<br> ② 凭经验：具体问题具体分析</li></ul></li><li>方法名：属于标识符，遵循标识符的规则和规范，“见名知意”</li><li>形参列表： 方法可以声明0个，1个，或多个形参。<ul><li>格式：数据类型1 形参1,数据类型2 形参2,…</li><li>我们定义方法时，该不该定义形参？<br> ① 题目要求<br> ② 凭经验：具体问题具体分析</li></ul></li><li>方法体：方法功能的体现。</li></ol><h3 id="return关键字的使用："><a href="#return关键字的使用：" class="headerlink" title="return关键字的使用："></a>return关键字的使用：</h3><ol><li>使用范围：使用在方法体中</li><li>作用：<br> ① 结束方法<br> ② 针对于有返回值类型的方法，使用”return 数据”方法返回所要的数据。</li><li>注意点：return关键字后面不可以声明执行语句。</li></ol><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><ul><li><p>方法的使用中，可以调用当前类的属性或方法</p><p>特殊的：方法A中又调用了方法A：递归方法。</p></li><li><p>方法中，不可以定义方法。⭐</p></li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ol><li>利用面向对象的编程方法，设计类Circle计算圆的面积。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>circle<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//半径</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//圆</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span><span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>编写程序，声明一个<code>printMatrix</code>方法，在方法中打印一个4行3列的<code>*</code>型矩形，在main方法中调用该方法。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Exer3Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exer3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改上一个程序，在<code>printMatrix</code>方法中，除打印一个4行3列的<code>*</code>型矩形外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Exer3Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exer3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面积是："</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//返回矩形面积</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改上一个程序，在<code>printMatrix</code>方法提供<code>row</code>和<code>column</code>两个参数，方法中打印一个<code>m*n</code>的<code>*</code>型矩形，并计算该矩形的面积， 将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Exer3Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exer3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面积是："</span> <span class="token operator">+</span> test<span class="token punctuation">.</span><span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">printMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> column<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> row <span class="token operator">*</span> column<span class="token punctuation">;</span><span class="token comment">//返回矩形面积</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对象数组题目：</li></ol><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><ul><li><p>问题一：打印出3年级(state值为3）的学生信息。</p></li><li><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p></li></ul><p>提示：</p><ol><li><p>生成随机数：<code>Math.random()</code>，返回值类型double;  </p></li><li><p>四舍五入取整：<code>Math.round(double d)</code>，返回值类型long。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对象数组,当作引用数据类型即可</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值（对象）</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出成绩:打印出3年级(state值为3）的学生信息</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Student</span> temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Student */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"学号："</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"，年级："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">"，成绩："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进，将其中的方法进行封装。优雅！！！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//对象数组,当作引用数据类型即可</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值（对象）</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出成绩:打印出3年级(state值为3）的学生信息</span><span class="token class-name">Exer3Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exer3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">searchState</span><span class="token punctuation">(</span>stus<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用冒泡排序按学生成绩排序，并遍历所有学生信息</span>test<span class="token punctuation">.</span><span class="token function">bobuleSort</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 查找指定年级的学生并输出 * @param stus 要查找的学生数组 * @param state 要查找的年级 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchState</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">,</span> <span class="token keyword">int</span> state<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 冒泡排序数组 * @param stus 要排序的数组 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bobuleSort</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Student</span> temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 遍历输出数组 * @param stus要遍历的数组 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Student */</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token keyword">int</span> state<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"学号："</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"，年级："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">"，成绩："</span> <span class="token operator">+</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>声明一个日期类型<code>Date</code>：有属性：年year,月month，日day。 创建2个日期对象，分别赋值为：你的出生日期，你对象的出生日期， 并显示信息。</p><p>“没有对象，我很抱歉。”–鲁迅</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exer3Test</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Date</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> exDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的生日"</span> <span class="token operator">+</span> myDate<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前任生日"</span> <span class="token operator">+</span> exDate<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"生日为："</span> <span class="token operator">+</span> year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="理解“万事万物皆对象”"><a href="#理解“万事万物皆对象”" class="headerlink" title="理解“万事万物皆对象”"></a>理解“万事万物皆对象”</h2><ol><li>在Java语言范畴中，我们都将功能、结构等封装到类中，通过类的实例化，来调用具体的功能结构</li></ol><ul><li>Scanner,String等</li><li>文件：File</li><li>网络资源：URL</li></ul><ol start="2"><li>涉及到Java语言与前端Html、后端的数据库交互时，前后端的结构在Java层面交互时，都体现为类、对象。</li></ol><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>我们创建的对象，没有显式的赋给一个变量名。即为匿名对象</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>类中的方法仅被对象调用一次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正常的对象</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只调用一次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>匿名对象做实参传递</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//匿名对象做实际参数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>错误的使用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Food</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大饼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不可以在创建的同时赋值，所以要么做实参，要么调方法fu'z。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="区别及内存分析"><a href="#区别及内存分析" class="headerlink" title="区别及内存分析"></a>区别及内存分析</h3><p>除了做实参，你只能调用一次。例如下面的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//正常对象</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"yuan"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token comment">//匿名对象</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"yuan"</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是正常对象在内存的映射</p><img src="https://s2.loli.net/2023/01/11/wzlrsjCD596eM7S.png" alt="正常对象" style="zoom:67%;" /><p>这是匿名对象在内存的映射，它不会在占空间中占据内存，并且每new一次，就是一个新的匿名对象。</p><img src="https://s2.loli.net/2023/01/11/l91CIBeamXO8t4U.png" alt="匿名对象" style="zoom: 67%;" /><p>这部分的参考：</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的复制、反转、查找、排序</title>
      <link href="/2023/01/08/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84/"/>
      <url>/2023/01/08/code/Java/Java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的复制、反转、查找、排序"><a href="#数组的复制、反转、查找、排序" class="headerlink" title="数组的复制、反转、查找、排序"></a>数组的复制、反转、查找、排序</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>其中最关键的一点是搞清楚为什么数组复制和基本数据类型复制不同，是什么导致了这样的不同？<br>先来看例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//新建arr数组并输出</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arr数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//虚假的数组复制</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">;</span>        arr1 <span class="token operator">=</span> arr<span class="token punctuation">;</span>                <span class="token comment">//真实的数组的复制</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 修改一下arr里面的值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"修改后的arr1数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"修改后的arr2数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后输出的结果是：</p><pre class="line-numbers language-none"><code class="language-none">arr数组：60 56 78 24 90 63修改后的arr1数组0 56 2 24 4 63----------------修改后的arr2数组60 56 78 24 90 63----------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们会发现通过<code>=</code>赋值来进行复制的操作让arr1在arr内值变化的同时也跟着变化，相当于一个快捷方式arr1指向了arr数组的真实数据，实际上在内存中也是这样，下面这张图就是相似的情况，两个变量名指向了同一片地址的内容。<br><img src="https://img-blog.csdnimg.cn/a47575fdfd244391b14d6d4b315c7dfb.png" alt="内存解析" style="zoom: 33%;" /><br>到这里你已经理解为什么修改arr1，arr也会跟着变了。因为他们根本就是同一个数组。<br>那么，我们不妨进一步进行总结，为什么int型、double型、Boolean型这些变量通过<code>=</code>来复制就没有问题？</p><blockquote><p>答案是：数据类型不同</p></blockquote><p>Java的8种基本数据类型，<code>byte,short,int,Long,flout,double,boolean,char</code>它们在声明和初始化时，都是存储在栈内存中的，相当于变量内直接就是值，那么，通过<code>=</code>来进行赋值就理所当然，也很直观。<br>而引用数据类型，例如<code>String、数组</code>等 <del>这里的String是一个例外，虽然他也是存储的地址，但是对两个指向同一地址的变量之一进行修改时，会创建新的变量，有待后续研究</del>，以及需要<code>new</code>关键字来声明的对象，是存放在其他内存中的，所以变量中存储的，只是一个地址值，如果这时候我们通过<code>=</code>来进行赋值，相当于只对地址进行了复制，而地址相同，指向的内存也当然相同了。相当于对同一对象进行操作，并没有真正创建一个新的数组。</p><h2 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h2><p>两种方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//求数组</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"我"</span><span class="token punctuation">,</span><span class="token string">"是"</span><span class="token punctuation">,</span><span class="token string">"恒"</span><span class="token punctuation">,</span><span class="token string">"星"</span><span class="token punctuation">,</span><span class="token string">"同"</span><span class="token punctuation">,</span><span class="token string">"学"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arr数组："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数组的反转：</span>        <span class="token comment">// 方式一：</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过方式一反转："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式二</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过方式二反转："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为：</p><pre class="line-numbers language-none"><code class="language-none">arr数组：我 是 恒 星 同 学通过方式一反转：学 同 星 恒 是 我通过方式二反转：我 是 恒 星 同 学----------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>查找刚刚的数组，线性查找只是依次比对每个元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//线性查找</span>        <span class="token class-name">String</span> dest <span class="token operator">=</span> <span class="token string">"星"</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了，是索引为"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"的元素。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没找到。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">arr数组：我 是 恒 星 同 学找到了，是索引为3的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>前提：数组中元素有序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//二分查找</span>        <span class="token keyword">int</span> dest <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始的首索引</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//找到了吗？</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//等于的情况也要考虑</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了！索引为："</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>                isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"很遗憾，没找到你想要的。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>面向工资的话，需要至少掌握冒泡排序和快速排序。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>可以点这里查看<a href="https://visualgo.net/zh/sorting">冒泡排序动画</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//冒泡排序</span><span class="token comment">//这是一个最简单的，不考虑优化的实现，即：每次都把所有数据比对一遍</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面可以解释一下为什么第二个循环是结束条件是<code>j &lt; arr.length - 1 - i</code>。</p><p>首先第一层循环条件是这个算法总共遍历多少轮，我们来看下面这张图，数组中有8个元素，这是第一轮遍历已经完成的结果，最后一个元素已经是最大。那么下一次我们只需要比对前7个元素，再比对6轮即可（共计7轮），因为比对到最后一轮时，第二个元素的位置已经确定，只剩下最后一个元素，他的位置不会再变了。所以第一个for循环结束条件是<code>i &lt; arr.length - 1</code>。</p><p><img src="https://s2.loli.net/2023/01/08/rk19my6HRIsg2lv.png" alt="image-20230108171615769"></p><p>其次，第二层是从第一个元素对比到当前无序的最后一个元素，拿上面这张图的例子来说，现在第二轮是比对从1到7这7个元素，<code>arr.length - 1</code>是当前数组的长度，显然还不够，还要再减去已经排好顺序的元素个数<code>i</code>，就变成了<code>j &lt; arr.length - 1 - i</code>。</p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>如果在某一步执行完时所有元素已经全部有序，那么下一步便不会再有数据交换发生 。抓住这一特点，我们可以让冒泡排序在检测到当前没有发生元素交换时主动结束。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//冒泡排序</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Boolean</span> swap <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            swap <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>swap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>日后再说。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot2学习笔记</title>
      <link href="/2023/01/01/code/Java/spring/Springboot%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/01/code/Java/spring/Springboot%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><h3 id="官方提供的自定义方式"><a href="#官方提供的自定义方式" class="headerlink" title="官方提供的自定义方式"></a>官方提供的自定义方式</h3><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p></blockquote><ol><li><strong>不用<code>@EnableWebMvc</code>注解。使用</strong> <code>@Configuration</code> <strong>+</strong> <code>WebMvcConfigurer</code> <strong>自定义规则</strong></li></ol><blockquote><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p></blockquote><ol start="2"><li><strong>声明</strong> <code>WebMvcRegistrations</code> <strong>改变默认底层组件</strong></li></ol><blockquote><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p></blockquote><ol start="3"><li><strong>使用</strong> <code>@EnableWebMvc</code>+<code>@Configuration</code>+<code>DelegatingWebMvcConfiguration</code> 全面接管SpringMVC</li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">依赖管理    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>他的父项目是 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>几乎声明了所有开发中常用的依赖的版本号,“自动版本仲裁机制”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>对提供的默认版本不满意，可以修改默认版本号</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。2、在当前项目里面重写配置    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>springboot提供的场景启动器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1、见到很多 spring-boot-starter-* ： *就是某种场景2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入3、SpringBoot所有支持的场景https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter4、见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。5、所有场景启动器最底层的依赖<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="容器功能"><a href="#容器功能" class="headerlink" title="容器功能"></a>容器功能</h2><h3 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h3><h4 id="Configuration及其对应两种加载模式"><a href="#Configuration及其对应两种加载模式" class="headerlink" title="@Configuration及其对应两种加载模式"></a>@Configuration及其对应两种加载模式</h4><p>现在有如下实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token comment">//getter、setter等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要将其作为组件添加入程序中，如果是在spring中，我们需要在xml文件中对bean进行注册，现在不需要了</p><p>我们直接在config包中创建Myconfig类（类名无所谓）对bean进行注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//告诉SpringBoot这是一个配置类 == 配置文件 &amp;&amp; (proxyBeanMethods = true)是否对bean进行代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Bean给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类中写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableApplicationContext</span> run <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MainApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===========================通过容器获取==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pet</span> tomcat01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">,</span><span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pet</span> tomcat02 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">,</span><span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这两个bean相等吗？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>tomcat01 <span class="token operator">==</span> tomcat02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyConfig</span> bean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"现在使用的对象是："</span><span class="token operator">+</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------调用两次注册方法获取--------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user01 <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user02 <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这两个bean相等吗？"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>user01 <span class="token operator">==</span> user02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是控制台输出的结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>分割线<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这两个bean相等吗？true现在使用的对象是：com.hengxing.boot.config.MyConfig<span class="token variable">$$</span>EnhancerBySpringCGLIB<span class="token variable">$$</span>f289fa12@5488b5c5---------------------调用两次注册方法--------------------------------------这两个bean相等吗？true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于结果中的信息有三点要解释：</p><ol><li><p>单实例属性</p><p>在启动类<code>MainApplication</code>第一部分我们获取了两次<code>tomcat01</code>，并进行比对。他们是完全一致的，说明</p><blockquote><p>配置类里面使用<code>@Bean</code>标注在方法上给容器注册组件，默认是单实例的。</p></blockquote><p>另外我们在第二部分打印出了bean的组件名，说明</p><blockquote><p>配置类本身也是组件</p></blockquote></li><li><p>配置类注解中的<code>proxyBeanMethods</code></p><p>关注bean的组件名，其中<code>EnhancerBySpringCGLIB</code>表明是被springboot增强过的对象。&#x3D;&#x3D;如何增强呢？&#x3D;&#x3D;每次你调用构造方法时，springboot会检查容器中是否有当前对象，若有就不再新建，直接使用已有的对象，即&#x3D;&#x3D;保持组件单实例属性&#x3D;&#x3D;。</p><p>来看第三部分，我们通过直接调用bean对象的构造方法，对比他们发现在</p><p><code>(proxyBeanMethods = true) </code>的情况下，也就是默认情况下，答案是<code>true</code>。而<code>(proxyBeanMethods = false) </code>的情况下，不进行代理，答案是<code>false</code>。也就是两次取出的对象都是新生成的，而不是容器中的单实例对象。</p><p>而对于第一部分，我们是通过<code>getbean</code>方法从容器中获取的，所以不论是否使用代理，结果都是相同的，因为容器中对象的单实例属性不会改变。</p><p>这里是当<code>(proxyBeanMethods = false) </code>的情况下控制台的输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>通过容器获取<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>这两个bean相等吗？true现在使用的对象是：com.hengxing.boot.config.MyConfig@30b9eadd---------------------调用两次注册方法获取--------------------------------------这两个bean相等吗？false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外你看，这里的bean组件名就不再是增强过的对象了</p><p>这里的true和false分别对应两个模式：</p><blockquote><p>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</p><p> Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</p></blockquote></li></ol><h5 id="什么场景下使用这两个模式呢？"><a href="#什么场景下使用这两个模式呢？" class="headerlink" title="什么场景下使用这两个模式呢？"></a>什么场景下使用这两个模式呢？</h5><blockquote><ul><li>配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断<ul><li>配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</li></ul></li></ul></blockquote><ol start="3"><li><p>组件依赖</p><p>在实例类中添加Pet属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span><span class="token comment">//getter、setter等属性，注意构造方法不要直接把pet属性写进去，要和之前一样</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改MyConfig类中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">User</span> hengxing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//当开启代理时，User组件依赖了Pet组件</span>       hengxing<span class="token punctuation">.</span><span class="token function">setPet</span><span class="token punctuation">(</span><span class="token function">tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> hengxing<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后启动类中编写方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------检查依赖-----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">User</span> hengxing <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user01"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Pet</span> pet <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的对象这个bean中的Pet，是否为容器中的Pet:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>hengxing<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>pet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，如果开启代理，那么答案就是true</p></li></ol><blockquote><p>你可以这样理解这个过程，<code>@Configuration</code>这个注释将你的配置类生效并告诉springboot这是个配置类，这个类现在就变成了一个容器。再使用<code>@Bean</code>向这个类中添加组件，定义一个一个Bean方法的过程，就是添加组件的过程。</p></blockquote><h4 id="Bean、-Component、-Controller、-Service、-Repository"><a href="#Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="@Bean、@Component、@Controller、@Service、@Repository"></a>@Bean、@Component、@Controller、@Service、@Repository</h4><p>这些和spring中的用法相同</p><h4 id="ComponentScan、-Import"><a href="#ComponentScan、-Import" class="headerlink" title="@ComponentScan、@Import"></a>@ComponentScan、@Import</h4><p><code>@ComponentScan</code>用来确定组件的扫描路径，也就是去哪里找组件的定义类。</p><p><code>@Import</code>用来导入外部类</p><blockquote><p>这个注解可以给容器中自动创建出所声明的类型的组件、默认组件的名字就是全类名</p></blockquote><p>例如，在配置类中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DBHelper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在启动类中</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Import检查&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);String[] names &#x3D; run.getBeanNamesForType(User.class);&#x2F;&#x2F;获取所有User类组件的名字for (String name : names) &#123;    System.out.println(name);&#125;DBHelper bean1 &#x3D; run.getBean(DBHelper.class);System.out.println(bean1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Import检查<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>com.hengxing.boot.bean.Useruser01ch.qos.logback.core.db.DBHelper@5300f14a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一行输出的是导入的User组件，默认是全类名</p><p>第二行user01是@bean方法注入的组件</p><p>第三行也是导入的DBHelper组件</p><h4 id="Conditional条件装配"><a href="#Conditional条件装配" class="headerlink" title="@Conditional条件装配"></a>@Conditional条件装配</h4><blockquote><p>条件装配：满足Conditional指定的条件，则进行组件注入</p></blockquote><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_17%2Ctext_YXRndWlndS5jb20g5bCa56GF6LC3%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10" alt="Conditional组件" style="zoom: 50%;" /><p>我们以<code>@ConditionalOnBean</code>为例，这个注解的作用是当容器中有某个组件时加载当前组件。例如：</p><p>在配置类中，将user01类设置为容器中有tomcat01这个组件注册时才会注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tomcat01"</span><span class="token punctuation">)</span>  <span class="token comment">//这一句</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> hengxing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"hengxing"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hengxing<span class="token punctuation">.</span><span class="token function">setPet</span><span class="token punctuation">(</span><span class="token function">tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hengxing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在启动类中接着写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================检查容器中是否有组件==================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器中有tomcat01吗？"</span><span class="token operator">+</span>run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"tomcat01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器中有user01吗？"</span><span class="token operator">+</span>run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"user01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按照我们当前的理解，加了条件装配后，由于tomcat01存在，所以结果应该是两个true。我们来看一下控制台</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>检查容器中是否有组件<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>容器中有tomcat01吗？true容器中有user01吗？false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>怎么不对？这就引出了条件装配的另一个特性：<strong>时序性或称顺序性</strong>（官方并没有对这个有定义，我自己便于理解起的名字）。其实很好理解，根据代码顺序执行的特性，在向容器中注册user01这个组件时tomcat01这个组件还没有被注册，所以就不会被注册进容器中，所以user01不存在。而之后tomcat01根据<code>@bean</code>注释被注册进容器中，所以tomcat01存在。</p><p>如果我们将tomcat01放在user01前进行注册，结果就会是两个true了。</p><p>现在，请尝试不断调换两个组件的注册顺序和修改条件装配的语句，加深理解。</p><h4 id="原生配置文件引入"><a href="#原生配置文件引入" class="headerlink" title="原生配置文件引入"></a>原生配置文件引入</h4><p>我们有这样的spring配置文件，他是通过xml文件进行注入的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.boot.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hehe<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.boot.bean.Pet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想在springboot中引入这样的配置，可以通过<code>@ImportResource</code>进行配置</p><p>在配置类中添加注释<code>@ImportResource(&quot;classpath:beans.xml&quot;)</code>，文件路径是resources文件夹。</p><img src="https://s2.loli.net/2023/01/01/d1ST7ghyEbRPrWV.png" alt="image-20230101114614861" style="zoom:50%;" /><h4 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h4><p>如何使用springboot读取到properties文件中的内容，并且把它封装Bean中，以供随时使用；</p><p>配置文件中我们要有相关记录：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#properties.yml</span><span class="token key atrule">car</span><span class="token punctuation">:</span>  <span class="token key atrule">brand</span><span class="token punctuation">:</span> BYD  <span class="token key atrule">color</span><span class="token punctuation">:</span> red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有两种方式：</p><h5 id="1-Component-ConfigurationProperties"><a href="#1-Component-ConfigurationProperties" class="headerlink" title="1.@Component + @ConfigurationProperties"></a>1.@Component + @ConfigurationProperties</h5><p>生成bean类文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"car"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token comment">//getter、setter等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ConfigurationProperties(prefix = &quot;car&quot;)</code>是告诉springboot配置文件中前缀为car的设置，对应文件中的各种属性。<code>Component</code>是声明为一个组件，也就是注入容器中，只有在容器中的组件，才会拥有SpringBoot提供的强大功能。</p><p>再写一个controller来拦截访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/car"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">recar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Autowired</code>可以将容器中的组件引入controller里，下面的就是简单的再页面返回信息而已。这样，你就可以在浏览器中看到返回的结果<code>&#123;&quot;brand&quot;:&quot;BYD&quot;,&quot;color&quot;:&quot;red&quot;&#125;</code></p><h5 id="2-EnableConfigurationProperties-ConfigurationProperties"><a href="#2-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="2.@EnableConfigurationProperties + @ConfigurationProperties"></a>2.@EnableConfigurationProperties + @ConfigurationProperties</h5><p>类文件去掉<code>@Component</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"car"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token comment">//getter、setter等方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在配置类中加入这句注释<code>@EnableConfigurationProperties(Car.class)</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//内容和之前一样</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个注解的作用是：</p><ol><li>开启Car配置绑定功能，这样<code>@ConfigurationProperties</code>就可以发挥作用了</li><li>把这个Car这个组件自动注册到容器中，也就是添加到了配置类所注册的容器中</li></ol><h4 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h4><h5 id="自动配置类"><a href="#自动配置类" class="headerlink" title="自动配置类"></a>自动配置类</h5><p><code>@SpringBootApplication</code>我们知道他是自动为springboot注册启动类的，通过查看源码我们可以了解到，他是一个复合注解，其结构是这样的</p><img src="https://s2.loli.net/2023/01/01/ACP82GEIg95iadk.png" alt="image-20230101145224478" style="zoom:50%;" /><p>其实相当于三个注解合并，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中第一个是<code>@SpringBootConfiguration</code>，里面是@Configuration。代表当前是一个配置类。</p><p>第三个是<code>@ComponentScan</code>，指定扫描哪里，Spring注解；</p><p>第二个是重点，<code>@EnableAutoConfiguration</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p><code>@AutoConfigurationPackage</code></p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationPackages<span class="token punctuation">.</span>Registrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//给容器中导入一个组件</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//利用Registrar给容器中导入一系列组件</span><span class="token comment">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>@Import(AutoConfigurationImportSelector.class)</code></p><blockquote><p>1、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件<br>2、调用List<String> configurations &#x3D; getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类<br>3、利用工厂加载 Map&lt;String, List<String>&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；得到所有的组件<br>4、从META-INF&#x2F;spring.factories位置来加载一个文件。<br>    默认扫描我们当前系统里面所有META-INF&#x2F;spring.factories位置的文件<br>    例如：spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF&#x2F;spring.factories</p></blockquote></li></ol><p><img src="https://s2.loli.net/2023/01/01/WUwE3LSshmierOg.png" alt="configurations"></p><p>文件里面写死了spring-boot一启动就要给容器中加载的所有配置类<br>spring-boot-autoconfigure-2.3.4.RELEASE.jar&#x2F;META-INF&#x2F;spring.factories</p><p>你可以打开这个包查看</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># <span class="token class-name">Auto</span> <span class="token class-name">Configure</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span>EnableAutoConfiguration</span><span class="token operator">=</span>\<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>admin<span class="token punctuation">.</span></span>SpringApplicationAdminJmxAutoConfiguration</span><span class="token punctuation">,</span>\<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    省略很多行，一共是从<span class="token number">22</span>行到<span class="token number">148</span>行，刚好一共<span class="token number">127</span>个包<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>webservices<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>WebServiceTemplateAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h5><p>但是springboot真的加载了这么多包吗？并没有。我们在启动类中测试一下到底容器中注册了多少bean，来看控制台结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>一共有多少bean被注册？<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token number">132</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果127个包全部被注入容器中，再加上我们刚刚配置的那么多bean肯定会更多的，所以很明显这127个包中有没有被加载的。springboot如何确定这些包不被注入容器呢？</p><p>答案是：&#x3D;&#x3D;利用条件装配机制&#x3D;&#x3D;</p><p>现在我们随便打开一个springboot的组件包，能够在注释中找到类似这样的一句：</p><p><code>@ConditionalOnClass(&#123;JobLauncher.class, DataSource.class&#125;)</code>，也就是说，如果我们没有注册相应的类进入容器，springboot也不会加载对应的组件。很棒的想法！！！</p><h5 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//容器中有这个类型组件</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token constant">MULTIPART_RESOLVER_BEAN_NAME</span><span class="token punctuation">)</span> <span class="token comment">//容器中没有这个名字 multipartResolver 的组件</span><span class="token keyword">public</span> <span class="token class-name">MultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token class-name">MultipartResolver</span> resolver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span>    <span class="token comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span>    <span class="token comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span>    <span class="token keyword">return</span> resolver<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>给容器中加入了文件上传解析器；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><ul><li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p></li><li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置</p></li><li><ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ul><blockquote><p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p></blockquote><h4 id="开发窍门"><a href="#开发窍门" class="headerlink" title="开发窍门"></a>开发窍门</h4><h5 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h5><ol><li>简化JavaBean开发</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>idea中搜索安装lombok插件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在类中直接添加注释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token comment">//声明这是数据</span><span class="token annotation punctuation">@ToString</span> <span class="token comment">//ToString方法</span><span class="token comment">//@AllArgsConstructor //全参构造</span><span class="token annotation punctuation">@NoArgsConstructor</span>  <span class="token comment">//无参构造</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>简化日志开发</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token comment">//添加这个注释来进行日志开发</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> worldController <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/w"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">world666</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求进来了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在这里输出日志</span>        <span class="token keyword">return</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会在日志中看到：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2023</span>-01-01 <span class="token number">17</span>:36:38.994  INFO <span class="token number">24308</span> --- <span class="token punctuation">[</span>nio-8888-exec-2<span class="token punctuation">]</span> com.hengxing.boot.worldController        <span class="token builtin class-name">:</span> 请求进来了。。。。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>默认使用的是application.porperties，这个东西经常出问题，而且写的东西多了非常杂乱。</p><p>推荐使用YAML格式</p><blockquote><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p><p>非常适合用来做以数据为中心的配置文件</p></blockquote><p>需要注意的是：</p><ul><li>字符串无需加引号，如果要加，<code>&#39; &#39; </code>与<code>&quot; &quot;</code>表示字符串内容会被 转义&#x2F;不转义</li></ul><h2 id="Web开发"><a href="#Web开发" class="headerlink" title="Web开发"></a>Web开发</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>)</p><p>访问 ： 当前项目根路径&#x2F; + 静态资源名。就可以访问到静态资源</p><p><strong>原理： 静态映射&#x2F;</strong>**</p><p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p><h4 id="改变静态资源访问前缀"><a href="#改变静态资源访问前缀" class="headerlink" title="改变静态资源访问前缀"></a>改变静态资源访问前缀</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样，以后所有访问静态资源的链接必须前缀<code>/res/静态资源名</code>，例如：<code>http://localhost:8080/res/2.jpg</code></p><h4 id="改变静态资源存储路径"><a href="#改变静态资源存储路径" class="headerlink" title="改变静态资源存储路径"></a>改变静态资源存储路径</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样静态资源的路径就要在根目录下的haha文件夹下</p><h4 id="欢迎页支持"><a href="#欢迎页支持" class="headerlink" title="欢迎页支持"></a>欢迎页支持</h4><ol><li>静态资源路径下  index.html</li></ol><ul><li><ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token comment">#  mvc:</span><span class="token comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>controller能处理&#x2F;index</li></ol><h4 id="静态资源配置原理"><a href="#静态资源配置原理" class="headerlink" title="静态资源配置原理"></a>静态资源配置原理</h4><ul><li><p>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</p></li><li><p>SpringMVC功能的自动配置类 WebMvcAutoConfiguration（在自动配置类中的web场景下），生效。下面是它的源码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//如果想全面接管webmvc，就自定义这个类</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483638</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给容器中配了什么？</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>EnableWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">WebMvcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> <span class="token class-name">ServletContextAware</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>  配置文件的相关属性和xxx进行了绑定。WebMvcProperties绑定**spring.mvc**、ResourceProperties绑定**spring.resources**</code></pre></li></ul><h5 id="配置类只有一个有参构造器"><a href="#配置类只有一个有参构造器" class="headerlink" title="配置类只有一个有参构造器"></a>配置类只有一个有参构造器</h5><p>此时，有参构造器所有参数的值都会从容器中确定</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span><span class="token comment">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span><span class="token comment">//ListableBeanFactory beanFactory Spring的beanFactory</span><span class="token comment">//HttpMessageConverters 找到所有的HttpMessageConverters</span><span class="token comment">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span><span class="token comment">//DispatcherServletPath  </span><span class="token comment">//ServletRegistrationBean   给应用注册Servlet、Filter....</span><span class="token keyword">public</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span><span class="token punctuation">(</span><span class="token class-name">ResourceProperties</span> resourceProperties<span class="token punctuation">,</span> <span class="token class-name">WebMvcProperties</span> mvcProperties<span class="token punctuation">,</span><span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">></span></span> messageConvertersProvider<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">></span></span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DispatcherServletPath</span><span class="token punctuation">></span></span> dispatcherServletPath<span class="token punctuation">,</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> servletRegistrations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> resourceProperties<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties <span class="token operator">=</span> mvcProperties<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConvertersProvider <span class="token operator">=</span> messageConvertersProvider<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceHandlerRegistrationCustomizer <span class="token operator">=</span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath <span class="token operator">=</span> dispatcherServletPath<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletRegistrations <span class="token operator">=</span> servletRegistrations<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>默认静态资源配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"/webjars/**"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//webjars的规则</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">ServletContextResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>resource<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，如果你设置add-mappings为false，就可以禁用所有静态资源规则</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">add-mappings</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="欢迎页的处理规则"><a href="#欢迎页的处理规则" class="headerlink" title="欢迎页的处理规则"></a>欢迎页的处理规则</h4><blockquote><p>HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span><span class="token class-name">FormattingConversionService</span> mvcConversionService<span class="token punctuation">,</span> <span class="token class-name">ResourceUrlProvider</span> mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">WelcomePageHandlerMapping</span> welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setCorsConfigurations</span><span class="token punctuation">(</span><span class="token function">getCorsConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">TemplateAvailabilityProviders</span> templateAvailabilityProviders<span class="token punctuation">,</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span><span class="token punctuation">></span></span> welcomePage<span class="token punctuation">,</span> <span class="token class-name">String</span> staticPathPattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>welcomePage<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"/**"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//要用欢迎页功能，必须是/**</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Adding welcome page: "</span> <span class="token operator">+</span> welcomePage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">"forward:index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">welcomeTemplateExists</span><span class="token punctuation">(</span>templateAvailabilityProviders<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 调用Controller  /index</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Adding welcome page template: index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里也解释了为什么我们之前在设置静态资源前缀后欢迎页会失效的原因。底端已经写死了，算是个小BUG。</p><h3 id="请求处理-Rest映射"><a href="#请求处理-Rest映射" class="headerlink" title="请求处理-Rest映射"></a>请求处理-Rest映射</h3><ul><li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p></li><li><ul><li><em>以前：</em><em>&#x2F;getUser</em>  <em>获取用户</em>    <em>&#x2F;deleteUser</em> <em>删除用户</em>   <em>&#x2F;editUser</em>  <em>修改用户</em>      <em>&#x2F;saveUser</em> <em>保存用户</em></li><li><em>现在： &#x2F;user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li><li>核心Filter；HiddenHttpMethodFilter<ul><li>由于一些历史原因，html表单只能传get、post请求，而这个方法会把我们表单传来的post请求进行解析，如果其中有隐藏信息表示它是put、或delete请求就重新封装这个请求</li></ul></li></ul></li><li><ul><li><ul><li>用法： 表单method&#x3D;post，隐藏域 _method&#x3D;put</li><li>SpringBoot中手动开启</li></ul></li></ul></li><li><ul><li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li></ul></li></ul><p>我们先来看一下请求是如何过滤的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>        prefix <span class="token operator">=</span> <span class="token string">"spring.mvc.hiddenmethod.filter"</span><span class="token punctuation">,</span>        name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"enabled"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//OrderedHiddenHttpMethodFilter()又继承了这个下面方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token constant">ALLOWED_METHODS</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_METHOD_PARAM</span> <span class="token operator">=</span> <span class="token string">"_method"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> methodParam <span class="token operator">=</span> <span class="token string">"_method"</span><span class="token punctuation">;</span>        <span class="token comment">//这里还提供了设置参数名的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> methodParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>methodParam<span class="token punctuation">,</span> <span class="token string">"'methodParam' must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>methodParam <span class="token operator">=</span> methodParam<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hiddenHttpMethodFilter() </code>这是隐藏http方法过滤器，在我们没有<code>HiddenHttpMethodFilter.class</code>这个类，并且配置文件中没有配置或<code>enabled</code>值为false时会帮我们生成过滤器。其次，我们看生成方法中有<code>methodParam</code>参数，默认为<code>&quot;_method&quot;</code>。所以，我们只需要修改这个参数就行了，上面的<code>DEFAULT_METHOD_PARAM</code>是final值不可修改。</p><p>实现方法很简单，自己注册一个配置类，调用<code>setMethodParam</code>方法修改即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HiddenHttpMethodFilter</span> hiddenHttpMethodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hiddenHttpMethodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">"_m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里修改</span>        <span class="token keyword">return</span> hiddenHttpMethodFilter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求处理源码分析"><a href="#请求处理源码分析" class="headerlink" title="请求处理源码分析"></a>请求处理源码分析</h4><p>现在研究一下整个请求处理过程</p><img src="https://s2.loli.net/2023/01/02/V16v7MRuydWP5U3.png" alt="image-20230102202410094" style="zoom: 50%;" /><p>我们知道所有的请求都会通过<code>DispatcherServlet</code>进行拦截，所以我们打开继承树，看到继承自<code>HttpServlet</code>，那么<code>HttpServlet</code>的子类必须重写doget等一系列方法，但<code>HttpServletBean</code>里面没有，那就在<code>FrameworkServlet</code>里，最终发现了重写的doget等方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//无论是doget还是do其他，都使用了这个方法</span>    <span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//省略一系列初始化方法</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ServletException</span> var16<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略。。。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//但在FrameworkServlet中它只是一个抽象类，所以子类中必然重写</span><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于我们在子类<code>DispatcherServlet</code>中看到<code>doService</code>的具体实现，发现其中真正有用的是<code>doDispatch</code>做分发，接下来，重点分析这个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一系列初始化方法</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">//初始化视图</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    processedRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                    multipartRequestParsed <span class="token operator">=</span> processedRequest <span class="token operator">!=</span> request<span class="token punctuation">;</span>                    mappedHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取handler</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>。。。。。。。。。。。。。。省略。。。。。。。。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入<code>getHandler</code>方法，大概是遍历所有<code>HandlerMapping</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">HandlerMapping</span> mapping <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HandlerExecutionChain</span> handler <span class="token operator">=</span> mapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> handler<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打上断点分析，可以看到<strong>HandlerMapping</strong>：保存了所有<code>@RequestMapping</code>和<code>handler</code>的映射规则，打开第一个查看，内部的mappingRegistry保存了五个mapping信息</p><img src="https://s2.loli.net/2023/01/02/CGWiRQoI7uHsMNz.png" alt="image-20230102211025852" style="zoom:50%;" /><p>这里和旧版略有不同，但是大致是一致的</p><p><img src="https://s2.loli.net/2023/01/02/yNaXgY47t8oG5he.png" alt="image-20230102211821287"></p><p>内部保存了对应链接的handler处理器信息，这样我们就能知道是谁来处理这个请求</p><p><img src="https://s2.loli.net/2023/01/03/KTEJrzV8Cqe2wul.png" alt="image-20230103092424511"></p><p>总结一下具体过程：</p><p><code>DispatcherServlet</code>拦截到请求之后，会调用<code>doService</code>开始响应，内部使用<code>doDispatch</code>做分发，决定谁来处理信息。该方法中<code>getHandler</code>保存了所有映射规则，根据我们定义好的mapping来返回<code>handler</code>。</p><h3 id="请求处理-常用参数注解"><a href="#请求处理-常用参数注解" class="headerlink" title="请求处理-常用参数注解"></a>请求处理-常用参数注解</h3><ul><li><code>@PathVariable</code> 路径变量(REST风格的变量&#x2F;id&#x2F;{id})</li><li><code>@RequestHeader</code> 获取请求头（不指定参数就全部获取）</li><li><code>@RequestParam</code> 获取请求参数（指问号后的参数，url?a&#x3D;1&amp;b&#x3D;2）</li><li><code>@CookieValue</code> 获取Cookie值</li><li><code>@RequestAttribute</code> 获取request域属性</li><li><code>@RequestBody</code> 获取请求体[POST]</li><li><code>@MatrixVariable</code> 矩阵变量</li><li><code>@ModelAttribute</code></li></ul><p>用例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">@RequestMapping(<span class="token string">"/id/&#123;id&#125;/ower/&#123;user&#125;"</span>)    public Map&lt;String<span class="token punctuation">,</span>Object> getCar(@PathVariable(<span class="token string">"id"</span>) Integer id<span class="token punctuation">,</span>                                     @PathVariable(<span class="token string">"user"</span>) String user<span class="token punctuation">,</span>                                     @PathVariable Map&lt;String<span class="token punctuation">,</span>String> pv<span class="token punctuation">,</span>                                     @RequestHeader(<span class="token string">"User-Agent"</span>) String userAgent<span class="token punctuation">,</span>                                     @RequestHeader Map&lt;String<span class="token punctuation">,</span>String> header<span class="token punctuation">,</span>                                     @RequestParam(<span class="token string">"age"</span>) Integer age<span class="token punctuation">,</span>                                     @RequestParam(<span class="token string">"inters"</span>) List&lt;String> inters<span class="token punctuation">,</span>                                     @RequestParam MultiValueMap&lt;String<span class="token punctuation">,</span>Object> params)<span class="token punctuation">&#123;</span>        HashMap&lt;String<span class="token punctuation">,</span> Object> map = new HashMap&lt;>();        map.put(<span class="token string">"id"</span><span class="token punctuation">,</span>id);        map.put(<span class="token string">"user"</span><span class="token punctuation">,</span>user);        map.put(<span class="token string">"pv"</span><span class="token punctuation">,</span>pv);        map.put(<span class="token string">"User-Agent"</span><span class="token punctuation">,</span>userAgent);        map.put(<span class="token string">"header"</span><span class="token punctuation">,</span>header);        map.put(<span class="token string">"age"</span><span class="token punctuation">,</span>age);        map.put(<span class="token string">"inters"</span><span class="token punctuation">,</span>inters);        map.put(<span class="token string">"params"</span><span class="token punctuation">,</span>params);        return map;    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"pv"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"李明"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"inters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"basketball"</span><span class="token punctuation">,</span>        <span class="token string">"game"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"User-Agent"</span><span class="token operator">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token property">"header"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"localhost:8080"</span><span class="token punctuation">,</span>        <span class="token property">"connection"</span><span class="token operator">:</span> <span class="token string">"keep-alive"</span><span class="token punctuation">,</span>        <span class="token property">"sec-ch-ua"</span><span class="token operator">:</span> <span class="token string">"\"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"108\", \"Google Chrome\";v=\"108\""</span><span class="token punctuation">,</span>        <span class="token property">"sec-ch-ua-mobile"</span><span class="token operator">:</span> <span class="token string">"?0"</span><span class="token punctuation">,</span>        <span class="token property">"sec-ch-ua-platform"</span><span class="token operator">:</span> <span class="token string">"\"Windows\""</span><span class="token punctuation">,</span>        <span class="token property">"upgrade-insecure-requests"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"user-agent"</span><span class="token operator">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36"</span><span class="token punctuation">,</span>        <span class="token property">"accept"</span><span class="token operator">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">,</span>        <span class="token property">"sec-fetch-site"</span><span class="token operator">:</span> <span class="token string">"same-origin"</span><span class="token punctuation">,</span>        <span class="token property">"sec-fetch-mode"</span><span class="token operator">:</span> <span class="token string">"navigate"</span><span class="token punctuation">,</span>        <span class="token property">"sec-fetch-user"</span><span class="token operator">:</span> <span class="token string">"?1"</span><span class="token punctuation">,</span>        <span class="token property">"sec-fetch-dest"</span><span class="token operator">:</span> <span class="token string">"document"</span><span class="token punctuation">,</span>        <span class="token property">"referer"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/"</span><span class="token punctuation">,</span>        <span class="token property">"accept-encoding"</span><span class="token operator">:</span> <span class="token string">"gzip, deflate, br"</span><span class="token punctuation">,</span>        <span class="token property">"accept-language"</span><span class="token operator">:</span> <span class="token string">"en,zh-CN;q=0.9,zh;q=0.8,en-CN;q=0.7"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"18"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"inters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"basketball"</span><span class="token punctuation">,</span>            <span class="token string">"game"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"李明"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="cookie获取"><a href="#cookie获取" class="headerlink" title="cookie获取"></a>cookie获取</h4><p>cookie获取，这里的cookie值要根据浏览器中显示出来的自己修改名称，我在chrome浏览器的控制台没找到，在edge中看到了拿来用的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/id/&#123;id&#125;/ower/&#123;user&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getCar</span><span class="token punctuation">(</span>                            <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"Idea-b43889ba"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> idea<span class="token punctuation">,</span>                                     <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">"Idea-b43889ba"</span><span class="token punctuation">)</span> <span class="token class-name">Cookie</span> cookie<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"idea"</span><span class="token punctuation">,</span>idea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"==>"</span><span class="token operator">+</span>cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台会打印<code>Idea-b43889ba==&gt;a5a1a191-6883-4b3a-b3d7-c55ca6204e64</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"idea"</span><span class="token operator">:</span><span class="token string">"a5a1a191-6883-4b3a-b3d7-c55ca6204e64"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求体获取"><a href="#请求体获取" class="headerlink" title="请求体获取"></a>请求体获取</h4><p>测试<code>@RequestBody</code>接收请求体</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/save<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    测试@RequestBody数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">postMapping</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="请求域数据获取"><a href="#请求域数据获取" class="headerlink" title="请求域数据获取"></a>请求域数据获取</h4><p><code>@RequestAttribute</code>测试，之所以这么写，是因为我们要取出请求域中的数据，这个数据必须通过转发才能取得，这里<code>forward:/success</code>就是在进行转发。</p><ul><li>虽然这个注解很好用，但是个人觉得，还是通过<code>HttpServletRequest</code>直接获取整个request请求，然后调用方法更省事</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/goto"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">gotoPage</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"成功了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"forward:/success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> code<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> msg1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"reqMethod"</span><span class="token punctuation">,</span>msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Annotation"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩阵变量"><a href="#矩阵变量" class="headerlink" title="矩阵变量"></a>矩阵变量</h4><ul><li><p>什么是矩阵变量</p><p><code>/cars/&#123;path;low=34;brand=byd,audi,yd&#125;</code>这样用<code>;</code>隔开的变量就是矩阵变量</p></li><li><p>有什么用途</p><p>比如在页面开发中，cookie被禁用了，session中的内容要怎么取用？</p><p>例如给session存一个值<code>session.set(a,b)</code>会有一个jsessionid，统一放在cookie中，每次发送请求时携带。现在cookie被禁用我们就没办法读取session的信息了。</p><p>这个时候就可以用矩阵变量解决，这种行为被称为路径重写：<code>/abc;jsessionid=xxx</code></p></li></ul><p>会看到报错</p><blockquote><p>Resolved [org.springframework.web.bind.MissingMatrixVariableException: Required matrix variable ‘low’ for method parameter type Integer is not present]</p></blockquote><p>这是因为系统会屏蔽掉分号后的内容，所以找不到变量，我们需要把屏蔽分号这个步骤关掉</p><p><strong>关键点在这里</strong>，<code>webMvc</code>自动配置方法中通过实现自动配置类的接口方法<code>configurePathMatch</code></p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> <span class="token class-name">ServletContextAware</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//省略不重要部分</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>servletUrlMapping<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">singleDispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlPathHelper<span class="token punctuation">.</span><span class="token function">setAlwaysUseFullPath</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>urlPathHelper</code>类中有<code>setRemoveSemicolonContent</code>方法会移除分号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Set if ";" (semicolon) content should be stripped from the request URI. * &lt;p>Default is "true". */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> removeSemicolonContent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">checkReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>removeSemicolonContent <span class="token operator">=</span> removeSemicolonContent<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法一，重写一个路径匹配器，记得我们第一种自定义自动配置的方法吗</p><blockquote><p><strong>不用<code>@EnableWebMvc</code>注解。使用</strong> <code>@Configuration</code> <strong>+</strong> <code>WebMvcConfigurer</code> <strong>自定义规则</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//所以配置类也要继承WebMvcConfigurer</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span><span class="token comment">/**省略一些方法*/</span><span class="token comment">//重写路径匹配器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urlPathHelper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二，不用继承，我们自己new一个<code>WebMvcConfigurer</code>，不过要记得注册为Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlPathHelper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里是你controller的写法，注意写在<code>@RestController</code>的方法中，因为这个东西是用json传参的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/car/&#123;path&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token class-name">MatrixTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">"low"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> low<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> brand<span class="token punctuation">,</span>                          <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"low"</span><span class="token punctuation">,</span>low<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">,</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>请求是这样的<code>http://localhost:8080/car/sell;low=29;brand=byd,yd,BMW</code></p></li><li><p>返回是这样的<code>&#123;&quot;path&quot;:&quot;sell&quot;,&quot;low&quot;:29,&quot;brand&quot;:[&quot;byd&quot;,&quot;yd&quot;,&quot;BMW&quot;]&#125;</code></p></li></ul><p>从这我们可以看出<code>/car/</code>后的<code>sell</code>会被看作是路径，分号后的内容会被当作矩阵变量</p><h4 id="一种麻烦的请求"><a href="#一种麻烦的请求" class="headerlink" title="一种麻烦的请求"></a>一种麻烦的请求</h4><p><code>/boss/1;age=20/2;age=23</code>这样的请求，当path&#x3D;1时（boos年龄）age为20，path&#x3D;2时（emp年龄）age为23</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/boss/&#123;bossId&#125;/&#123;empId&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">boss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> pathVar <span class="token operator">=</span> <span class="token string">"empId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> empAge<span class="token punctuation">,</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> pathVar <span class="token operator">=</span> <span class="token string">"bossId"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> bossAge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"empAge"</span><span class="token punctuation">,</span>empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bossAge"</span><span class="token punctuation">,</span>bossAge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//得到的结果：&#123;"bossAge":20,"empAge":23&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>value = &quot;age&quot;</code>，值</p><p><code>pathVar = &quot;empId&quot;</code>，path变量</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular学习记录</title>
      <link href="/2022/09/19/code/Angular%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/09/19/code/Angular%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="angular学习记录"><a href="#angular学习记录" class="headerlink" title="angular学习记录"></a>angular学习记录</h3><p><strong>数据绑定</strong></p><blockquote><p>[]表示绑定属性，()表示绑定事件，[()]表示双向绑定</p></blockquote><h4 id="服务-持久化要点"><a href="#服务-持久化要点" class="headerlink" title="服务-持久化要点"></a>服务-持久化要点</h4><ul><li><p>组件之间无法相互调用，如果想要相互调用的话，需要使用服务，服务是公共化的【具体组件间的关系请看后面<a href="#_%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%8F%8A%E5%85%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E9%80%9A%E4%BF%A1">父子组件的交互</a>】</p></li><li><p>组件可以调用服务的方法，但服务不能调用组件的方法，并且组件之间不能相互调用</p></li><li><p>服务之间可以相互调用</p></li></ul><p><img src="https://s2.loli.net/2022/04/23/H2bQRDCJ1M4KSom.png" alt="image-20220423101829641"></p><p>创建服务的命令</p><p><code>&gt; ng g service services/storage</code></p><p>引入服务组件</p><p>在app.module.ts中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//引入并配置服务</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StorageService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./services/storage.service"</span><span class="token punctuation">;</span><span class="token comment">//providers里添加</span> providers<span class="token operator">:</span> <span class="token punctuation">[</span>StorageService<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们就可以在storage.service.ts中写一些方法</p><p> <img src="C:\Users\HengxingStu\AppData\Roaming\Typora\typora-user-images\image-20220423101947453.png" alt="image-20220423101947453"></p><p>&#x3D;&#x3D;服务定义好了，谁要用，谁引入，然后调用&#x3D;&#x3D;</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//例如，我在search组件中引入</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> StorageService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../services/storage.service"</span><span class="token punctuation">;</span><span class="token comment">//接着实例化该方法，在构造函数中添加该参数，类似于java中的实例化new（其实实例化也可以用，但是不推荐）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://s2.loli.net/2022/04/23/xsfiySEZPGObFuL.png" alt="image-20220423102049383"></p><p>接下来就可以随时调用，这里我在构造方法中就直接调用了，他会在控制台输出这一句</p><p> <img src="https://s2.loli.net/2022/04/23/E39F8a5mxhqnfW4.png" alt="image-20220423102056973"></p><p>【Tips】<code>JSON.parse error:“Type ‘null‘ is not assignable to type ‘string‘“</code></p><p>使用localStorage将Vue3中data声明的一个数组进行解析时。由于定义如下：</p><p>JSON.parse(localStorage.getItem(‘notFinish’)),</p><p>出现了如下错误：<code>Type &#39;null&#39; is not assignable to type &#39;string&#39;</code></p><p>解决方法：</p><p>可以“或”一个空数组字符串，即改成如下形式：</p><p><code>notFinish: JSON.parse(localStorage.getItem(&#39;notFinish&#39;)) || &#39;[]&#39;,</code></p><p>​    一共定义如下三个方法：</p><p> <img src="https://s2.loli.net/2022/04/23/dvUuiNplbFT8I6a.png" alt="image-20220423102216411"></p><p>每次刷新界面都会触发<code>OnInit()</code>函数</p><p> <img src="https://s2.loli.net/2022/04/23/gnpch4rNZi6JxsL.png" alt="image-20220423102220832"></p><h4 id="Angular中的Dom操作"><a href="#Angular中的Dom操作" class="headerlink" title="Angular中的Dom操作"></a>Angular中的Dom操作</h4><blockquote><p>DOM就是文档对象模型，基本可以理解为原生代码</p></blockquote><p> <img src="https://s2.loli.net/2022/04/23/m46cYtGb3uoxq7l.png" alt="image-20220423102256784"></p><p>1、  原生js方法，这里<code>afterviewInit</code>会失败，引入的包似乎没有被使用，不知道什么原因，但是反正这种方法也不推荐，不深究了</p><p> <img src="https://s2.loli.net/2022/04/23/AirdY4LbtpkaIlT.png" alt="image-20220423102316453"></p> <img src="https://s2.loli.net/2022/04/23/sbCiYOXEhHaD9Tm.png" alt="image-20220423102320575"  /><p>修改浏览器标签的方法</p><p><a href="https://blog.csdn.net/a1056244734/article/details/108239165">Angular Javascript修改浏览器title方法 JS动态修改浏览器标题</a></p><ol start="2"><li>注解方式</li></ol><ul><li><p>模板中给dom起一个名字</p>  <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">#myBox</span><span class="token punctuation">></span></span>  this is box  这也是个dom节点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在业务逻辑中引入ViewChild</p><p><code>import &#123; Component, OnInit,ViewChild &#125; from &#39;@angular/core&#39;;</code></p></li><li><p>写在类里面（声明）</p><p><code>@ViewChild(&#39;myBox&#39;) myBox:any;</code></p></li><li><p>ngAfterViewInit生命周期函数中获取dom</p><p><code>this.myBox.nativeElement</code></p></li></ul><p>3、  在父组件中通过ViewChild调用子组件的方法</p><ul><li><p>为子组件起名</p><p><code>&lt;app-header #header&gt;&lt;/app-header&gt;</code></p></li><li><p>在父组件中声明</p><p><code>@ViewChild(&#39;header&#39;) header:any;</code></p></li><li><p>接下来可以直接按照属性调用</p><p><code>this.header.run();</code></p></li></ul><h4 id="父子组件及其之间的交互通信"><a href="#父子组件及其之间的交互通信" class="headerlink" title="父子组件及其之间的交互通信"></a>父子组件及其之间的交互通信</h4><p> <img src="https://s2.loli.net/2022/04/23/vGV4ulWkJT9d6tr.png" alt="image-20220423102854428"></p><p>4、  子组件调用父组件属性方法，父传值给子@input<strong>（主要使用）</strong></p><p>父组件不但可以简单的传数据，还可以把自己的方法传给子组件，甚至是整个父组件</p><p>1、 父组件调用时，可以绑定一个属性，用它来传值（确认你的父组件有这个属性）</p><p><code>&lt;app-header [title]=&quot;title&quot;&gt;&lt;/app-header&gt;</code></p><p>2、 子组件引入input模块</p><p><code>import &#123; Component, OnInit, Input &#125; from &#39;@angular/core&#39;;</code></p><p>3、 子组件中用@Input接收父组件传来的数据</p><p><code>@Input() title:any;</code></p><p>4、 此时可以在子组件中使用这个参数了</p><header>angular学习记录</header> <p>注意方法传值时不要带括号，（）代表执行方法，你直接按照属性的书写格式即可，input时可以设置为any类型</p><p><code>@Input() run:any;</code></p><p>实例；实现下面的功能</p><p>当头部组件在首页时，显示首页字样，在新闻页面时，显示新闻字样</p><p>5、  父组件调用&#x2F;获得子组件方法&#x2F;参数，子向父传值</p><p>一、使用Viewchild注释引入子组件，请看前面关于Dom操作-注解方式：<a href="#_Angular%E4%B8%AD%E7%9A%84Dom%E6%93%8D%E4%BD%9C">ViewChild的内容</a><strong>（主要使用）</strong></p><p>二、子组件通过@Output调用父组件的方法（了解）</p><p>1、在子组件中引入Output和EventEmitter（事件驱动，可以实现广播和接听广播）</p><p>非父子组件，毫无关联的组件间交互</p><p>1、  service服务</p><p>2、  localstorage</p><h4 id="Angular中的生命周期函数"><a href="#Angular中的生命周期函数" class="headerlink" title="Angular中的生命周期函数"></a>Angular中的生命周期函数</h4><p>通俗讲，就是组件创建、组件更新、组件销毁时会触发的一系列方法。</p><p>请查看官网的<a href="https://angular.cn/guide/lifecycle-hooks">生命周期钩子函数</a>介绍</p><p>这其中，你需要记住的有这么几个：</p><p>1、constructor()  构造函数     他其实并非生命周期函数，除了对局部值进行初始化，什么都不应该做</p><p>2、ngOnInit()    一般做数据的初始化，和对数据的请求，不要做DOM操作</p><p>3、ngAfterViewInit()      DOM操作</p><p>4、ngOnDestory()    </p><h4 id="Rxjs异步数据流编程"><a href="#Rxjs异步数据流编程" class="headerlink" title="Rxjs异步数据流编程"></a>Rxjs异步数据流编程</h4><p>针对异步数据流的编程，通常有以下几种方法</p><p>1、 回调函数</p><p>2、 promise处理</p><p>3、 Rxjs</p><p>Observable发出数据，subscirbe接收数据</p><p>首先在服务组件中引入rxjs对象</p><p><code>import &#123; Observable &#125; from &quot;rxjs&quot;;</code></p><p>在服务中写好调用异步数据的方法</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">getRxjsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>​    <span class="token keyword">var</span> username<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>​    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用它来发布成功数据</span>​    <span class="token comment">// observer.error()</span>​    <span class="token comment">// 用它来返回失败数据</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要调用数据的组件中，第一步写服务的调用</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> RequestService <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../service/request.service"</span><span class="token punctuation">;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> request<span class="token operator">:</span>RequestService<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二步在构造方法中继续获取数据</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> rxjsData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rxjsData<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以在控制台看到数据被打印</p><p>Rxjs还提供了更多的方法，比如可以取消订阅</p><p>  &#x2F;&#x2F;过一秒后，撤回刚才的操作</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> stream <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> d <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   d<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取消订阅</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者多次执行订阅</p><p>在request.service.ts中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 多次执行</span><span class="token function">getRxjsIntervalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   count<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> username<span class="token operator">=</span><span class="token string">'张三--interval'</span> <span class="token operator">+</span> count<span class="token punctuation">;</span>   observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// observer.error()</span>   <span class="token comment">// 用它来返回失败数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">//多次执行</span>  <span class="token keyword">var</span> streaminterval <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsIntervalData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  streaminterval<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rxjs还有许多工具函数，以map和filter为例</p><p>在用到的组件中引入</p><p><code>import &#123; map, filter &#125; from &quot;rxjs/operators&quot;;</code></p><p>在组件方法中</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 用工具方法对返回的数据进行处理</span>  <span class="token keyword">var</span> streamNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsIntervalNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  streamNum<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>   <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>​    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>​     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>​    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的filter中一定要声明value是any类型，否则会报错</p><p>map方法的例子</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> streamNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsIntervalNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  streamNum<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>   <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>​    <span class="token keyword">return</span> value<span class="token operator">*</span>value<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以用在一起(通过pipe管道流水线处理)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">var</span> streamNum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getRxjsIntervalNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  streamNum<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>   <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>​    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>​     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>​    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>​    <span class="token keyword">return</span> value<span class="token operator">*</span>value<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="angular中的数据请求"><a href="#angular中的数据请求" class="headerlink" title="angular中的数据请求"></a>angular中的数据请求</h4><p>l <strong>使用HttpClientModule</strong></p><p><strong>1、get方法</strong></p><p>首先需要在app.module.ts中引入http包</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HttpClientModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@angular/common/http"</span><span class="token punctuation">;</span>imports<span class="token operator">:</span> <span class="token punctuation">[</span>  HttpClientModule <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要的组件中也引入</p><p><code>import &#123; HttpClientModule &#125; from &quot;@angular/common/http&quot;;</code></p><p>将其看作一个服务，在构造方法中引入</p><p><code>constructor(public http : HttpClient) &#123; &#125;</code></p><p>引入完成了，接下来我们在方法中使用</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> api<span class="token operator">=</span><span class="token string">"http://a.itying.com/api/productlist"</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过Rxjs的异步请求订阅获得回复</p><p>我们也可以在网页上显示获得的数据</p><p># home.component.ts</p><p>this.list &#x3D; response.result;</p><p>#home.component.html</p><ul> <li *ngFor="let item of list"></li></ul><p>效果如下</p><p><strong>2、post方法</strong></p><p>在app.module.ts中引入httpclient</p><p>在组件中引入httpheaders</p><p>import { HttpClient, HttpHeaders } from “@angular&#x2F;common&#x2F;http”;</p><p>同样记得在构造方法</p><p> constructor(public http : HttpClient) { }</p><p>接下来就可以使用</p><p>doLogin(){</p><p>&#x2F;&#x2F;手动设置请求的类型</p><p>  const httpOptions &#x3D; {</p><p>   headers: new HttpHeaders({ ‘Content-Type’:’application&#x2F;json’})</p><p>  };</p><p>  &#x2F;&#x2F;存在跨域</p><p>  let api&#x3D;’<a href="http://127.0.0.1/dologin">http://127.0.0.1/dologin</a>‘;</p><p>  this.http.post(api,{“username”:”Cloud”,’age’:20},httpOptions).subscribe((response) &#x3D;&gt;</p><p>   console.log(response)</p><p>  )</p><p> }</p><p>我们可以在控制台看到这些，不过因为我们没有服务器接收的缘故，数据是异常的，以后再说吧</p><p><strong>3、通过jsonp请求（解决跨域的方案）</strong></p><p>注意，如果我们要使用jsonp，需要确认服务器支持，如何查看呢？</p><p>在请求链接后端添加?callback&#x3D;xxx,xxx的地方随便写，你会看到请求的数据前后有了xxx字样，代表它支持</p><p>post的请求有个缺点，就是它如果存在跨域，服务器可能因为策略拒绝连接，用jsonp可以解决这个问题</p><p>首先，在app.module.ts中引入HttpClientModule 包和httpClientJsonpModul包</p><p>import { HttpClientModule, HttpClientJsonpModule } from “@angular&#x2F;common&#x2F;http”;</p><p>同样，还需要声明</p><p>imports: [HttpClientModule, HttpClientJsonpModule]</p><p>在模组中同样和http的声明方式一样，在构造方法中声明http对象即可</p><p>下面就可以开始使用jsonp</p><p>doJsonpLogin(){</p><p>  let api&#x3D;”<a href="http://a.itying.com/api/productlist">http://a.itying.com/api/productlist</a>“;</p><p>  this.http.jsonp(api,’callback’).subscribe((response) &#x3D;&gt;{</p><p>   console.log(response)</p><p>  })</p><p> }</p><p>l <strong>使用第三方axios工具来请求</strong></p><p>首先在npm中安装axios</p><p>npm install axios –save</p><p>在服务中引入</p><p>import axios from “axios”;</p><p>并且封装好方法</p><p>axiosGet(api:string){</p><p>  alert(‘axiosGet’)</p><p>  return new Observable((observer) &#x3D;&gt;{</p><p>   axios.get(api)</p><p>   .then(function (response:any) {</p><p>​    console.log(response);</p><p>​    observer.next(response);&#x2F;&#x2F;把数据发布出去</p><p>   })})}</p><p>另外，为了让服务可以使用，要在app.module.ts中声明</p><p>import { HttpserviceService } from “.&#x2F;service&#x2F;httpservice.service”;</p><p>providers: [</p><p>  RequestService,</p><p>  HttpserviceService</p><p> ],</p><p>接着在组件中使用</p><p>和所有使用服务的组件一样，组件里引入</p><p>import { HttpserviceService } from “..&#x2F;..&#x2F;service&#x2F;httpservice.service”;</p><p>constructor(public httpService:HttpserviceService) { }</p><p>接下来就可以使用</p><p>getAxiosData(){</p><p>  console.log(‘axios获取数据’)</p><p>  let api&#x3D;”<a href="http://a.itying.com/api/productlist">http://a.itying.com/api/productlist</a>“;</p><p>  this.httpService.axiosGet(api).subscribe((data:any) &#x3D;&gt;{</p><p>   console.log(data)</p><p>})}</p><h4 id="angular的路由"><a href="#angular的路由" class="headerlink" title="angular的路由"></a>angular的路由</h4><p>l <strong>配置路由功能和进行路由</strong></p><p>在你新建项目的时候，记得选择添加路由就可以自动配置</p><p>然后在app-routing.module.ts中配置下面的内容</p><p>1、首先引入需要路由的组件，比如我们需要home组件：</p><p>import { HomeComponent } from ‘.&#x2F;components&#x2F;home&#x2F;home.component’;</p><p>3、  在routers列表中写入，其中path后是用户访问的地址</p><p>const routes: Routes &#x3D; [</p><p> {path:’home’,component:HomeComponent}</p><p>];</p><p>这里注意path的位置不要写多于内容，我就是有一次写成了&#x2F;home，多了斜杠，页面就什么也显示不出来，找了好久问题</p><p>配置好后，我们就可以在浏览器中按链接访问每一个地址：（以news组件为例）</p><p>接下来，我们看看如何使用a标签进行导航，有三种方式，推荐第一种：</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>a <span class="token punctuation">[</span>routerLink<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"[ '/home' ]"</span><span class="token operator">></span>首页标签<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token comment">//推荐</span><span class="token operator">&lt;</span>a routerLink<span class="token operator">=</span><span class="token string">'/news'</span><span class="token operator">></span>新闻标签<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/product"</span><span class="token operator">></span>商品页面<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种是动态绑定，第二种是静态，第三种则是原生方法</p><p>但在此我们又发现了一个问题，进来后第一个页面除了导航栏没有任何内容，干巴巴的，怎么办呢？可以让angular默认跳转一个页面</p><p> {path:’**’,redirectTo:’home’}</p><p>这个<strong>就代表是没有找到路由地址的时候加载的组件，其中要注意的是redirectTo需要的参数是string类型的，它需要</strong>路径**而不是组件名</p><p>l <strong>保持被选中状态的标签</strong></p><p>我们经常在网页中看到，点击了某个标签后，这个标签明显区别与其他标签，好像被按下去一样，这种符合直觉的反应对用户的访问和其感受都有好处，怎么实现呢</p><p>angular提供了routerLinkActive的方法，举个例子：</p><p>  &lt;a [routerLink]&#x3D;”[ ‘&#x2F;home’ ]” routerLinkActive&#x3D;”active”&gt;首页标签</a></p><p>在刚才的基础上加上routerLinkActive标签即可，其中的active位置是你的css标签类，他会在css中寻找名为active类的样式为其装扮，就像这样</p><p>另外注意你的css文件应该是整个项目的根组件的样式文件。</p><p># app.component.scss</p><p>.active{</p><p>  background-color: gray;</p><p>  color: chocolate; }</p><p>l <strong>动态路由及其跳转传值</strong></p><p>想象这样一个场景，在商品列表中选中一个商品，进入详情页。这个步骤中我们需要知道你选中的是那个产品，并跳转到相应页面，而且我们还需要能够返回列表。angular中有这两种方式来完成</p><p>1、get传值</p><p>首先将标签改成这样</p><p>​    &lt;a [routerLink]&#x3D;”[ ‘&#x2F;newscontent’ ]” [queryParams]&#x3D;”{aid:key}”&gt;—</a></p><p>这个queryParams是设置请求时的参数，参数是之前设置好的ngfor中的参数，我们看一下它请求的链接</p><p><a href="http://localhost:4200/newscontent?aid=1">http://localhost:4200/newscontent?aid=1</a></p><p>这样就知道了用户在请求哪一条数据</p><p>接着要让newscontent组件获得这个queryParams，需要在newscontent组件中引入</p><p>import { ActivatedRoute } from “@angular&#x2F;router”;</p><p> constructor(public route:ActivatedRoute) { }</p><p>这样你就能在newscontent中获得这个参数</p><p>ngOnInit(): void {</p><p>  this.route.queryParams.subscribe((data:any) &#x3D;&gt;{</p><p>   console.log(data.aid)</p><p>  }) }</p><p>2、动态路由</p><p>配置，后面的:aid就是动态部分（注意不要忘了前面的冒号）</p><p>#app-routing.module.ts</p><p>{path:’newscontent&#x2F;:aid’,component:NewscontentComponent},</p><p>接下来，我们在网页标签中就可以直接使用</p><p>&lt;a [routerLink]&#x3D;”[ ‘&#x2F;newscontent&#x2F;‘, key ]”&gt;—</a></p><p>这句话的格式是这样的，注意这里的path已经发生了改变，如果你还想要newscontent的跳转，要再多加一条，也就是说，保证一个路由一个链接</p><p>&lt;a [routerLink]&#x3D;”[ ‘&#x2F;path’, routeParam ]”&gt;name</a></p><p>routeParam就是我们的动态传值参数，url效果如下</p><p><a href="http://localhost:4200/newscontent/6">http://localhost:4200/newscontent/6</a></p><p>有了这个我们就可以直接让用户去想去的地方</p><p>另外，动态路由中获取传值也和get方法相似，只是方法略有不同</p><p>&#x2F;&#x2F;动态路由获取传值</p><p>this.route.params.subscribe((data:any) &#x3D;&gt;{</p><p> console.log(data.aid)})</p><p>l <strong>动态路由的JS跳转（推荐，实现方便）</strong></p><p>首先按照之前的文档实现一个可以路由的标签，绑定一个方法</p><p>&lt;button (click)&#x3D;”goNewsContent()”&gt;js跳转路由</button></p><p>在业务逻辑中引入模块，按照服务的方式声明</p><p>import { Router } from “@angular&#x2F;router”;</p><p>constructor(public router:Router) { }</p><p>接下来就可以写业务逻辑了</p><p>goNewsContent(){</p><p>  &#x2F;&#x2F;路由跳转 -适合普通路由和动态路由</p><p>  this.router.navigate([‘productcontent’,’213’]) }</p><p>l <strong>get传值的JS跳转</strong></p><p>还是实现一个标签</p><p>&lt;button (click)&#x3D;”goNewsContent()”&gt;get传值js跳转</button></p><p>引入模块</p><p>import { Router, NavigationExtras } from “@angular&#x2F;router”;</p><p>下面可以实现方法：</p><p>goNewsContent(){</p><p>  &#x2F;&#x2F;跳转并进行get传值</p><p>  let queryParams:NavigationExtras&#x3D;{</p><p>   queryParams:{‘aid’:’123’}</p><p>  }</p><p>  this.router.navigate([‘&#x2F;news’], queryParams)</p><p> }</p><p>一定要注意，这里的navigate方法要把queryParams参数传在第二个参数的位置，而不是路由地址的数组里</p><p><a href="http://localhost:4200/news?aid=123">http://localhost:4200/news?aid=123</a></p><p>l <strong>父子路由</strong></p><p>顾名思义，就是在路由的界面中再添加一层路由，实现二级页面的跳转</p><p>模组引入肯定在定义父路由就做过了，所以我们直接下一步</p><p>在路由界面先引入子路由的页面</p><p>import { WelcomeComponent } from “.&#x2F;components&#x2F;home&#x2F;welcome&#x2F;welcome.component”;</p><p>​    设置路由，使用children属性（标红部分）</p><p>const routes: Routes &#x3D; [{</p><p>  path:’home’,component:HomeComponent,</p><p>  children:[</p><p>   {path:’welcome’,component:WelcomeComponent},</p><p>   {path:’settings’,component:SettingsComponent},</p><p>   {path:’**’,redirectTo:’welcome’} &#x2F;&#x2F;设置默认路由，后面会说到</p><p>  ]}</p><p>设置好后，我们就可以在父页面中使用</p><p>&lt;a [routerLink]&#x3D;”[ ‘&#x2F;product&#x2F;pcate’ ]”&gt;商品分类列表</a></p><p>当然，还需要在想让它出现的位置为它设置出口</p><p><router-outlet></router-outlet></p><p>这个时候，你的功能就实现了，不过你肯定发现了一个问题，正常的网页在访问时，（比如我当前访问的官网），我点了文档进入页面后立刻显示了第一个三级页面，看起来非常自然，而我们却不行，这里的解决方式和我们之前的一样，在子路由的数组中添加默认路由即可</p><p>就像这样：</p><pre class="line-numbers language-none"><code class="language-none">const routes: Routes &#x3D; [&#123;path:&#39;home&#39;,component:HomeComponent,​    children:[​      &#123;path:&#39;welcome&#39;,component:WelcomeComponent&#125;,​      &#123;path:&#39;**&#39;,redirectTo:&#39;welcome&#39;&#125;&#x2F;&#x2F;设置默认路由] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="FormControl"><a href="#FormControl" class="headerlink" title="FormControl"></a>FormControl</h1><h3 id="first-Stap"><a href="#first-Stap" class="headerlink" title="first Stap"></a>first Stap</h3><p>add FormId on <code>&lt;from&gt;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#loginForm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sec-Stap"><a href="#sec-Stap" class="headerlink" title="sec Stap"></a>sec Stap</h3><p>add <code>ngModel</code> on each <code>&lt;input&gt;</code></p><p>also remember give it a name</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="third-stap"><a href="#third-stap" class="headerlink" title="third stap"></a>third stap</h3><p>add submit control</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login(loginForm.value)<span class="token punctuation">"</span></span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginForm.invalid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-theme<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or</p><ol><li>add submit type on button</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginForm.valid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-info btn-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Log in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>add ngSubmit on Form</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#loginForm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span> <span class="token attr-name">(ngSubmit)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login(loginForm)<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ng-pristine ng-valid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>if you use this way to submit, you should use <code>form: NgForm</code> on you typescript code to receive form data, for example:</li></ol><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token function">login</span><span class="token punctuation">(</span>form<span class="token operator">:</span> NgForm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>password<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loginService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>password<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的邻接存储方式对比</title>
      <link href="/2022/09/17/DataStructure/Graph/"/>
      <url>/2022/09/17/DataStructure/Graph/</url>
      
        <content type="html"><![CDATA[<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th></th><th>邻接表</th><th>邻接矩阵</th></tr></thead><tbody><tr><td>空间复杂度</td><td>无向图O(|V|+|E|)，有向图O(|V|+|E|)</td><td>O(|V|^2)</td></tr><tr><td>适用于</td><td>稀疏图</td><td>稠密图</td></tr><tr><td>表示方式</td><td>不唯一</td><td>唯一</td></tr><tr><td>计算度、出度、入度</td><td>计算有向图的度、入度不方便。其余很方便</td><td>必须遍历对应行或列</td></tr><tr><td>找相邻的边</td><td>找有向图的入度不方便，其余很方便</td><td>必须遍历对应行或列</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学公式速记</title>
      <link href="/2022/08/01/Math/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/08/01/Math/%E9%AB%98%E6%95%B0%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h1><p><img src="https://s2.loli.net/2022/08/01/Bw1dSYZpTnIgzQb.jpg" alt="泰勒公式"></p><h1 id="积分与复合函数求导公式"><a href="#积分与复合函数求导公式" class="headerlink" title="积分与复合函数求导公式"></a>积分与复合函数求导公式</h1><p><img src="https://s2.loli.net/2022/08/01/lOmHe9sLdSQgDYN.jpg" alt="积分与复合函数求导公式"></p><h1 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h1><p><img src="https://s2.loli.net/2022/08/01/MjtAcSrXUKI1Fyb.jpg" alt="高数常用公式"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研数学 </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研英语语法知识</title>
      <link href="/2022/08/01/English/%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/08/01/English/%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="语法知识"><a href="#语法知识" class="headerlink" title="语法知识"></a>语法知识</h1><h3 id="连词"><a href="#连词" class="headerlink" title="连词"></a>连词</h3><ol><li><p>并列连词</p><ol><li>and or </li><li>but yet</li></ol><p>并列连词可以并列词，也可以并列句子，但并列的内容必须相同</p><p><code>分析方法：从后往前找相同的成分</code></p><blockquote><p>While talking to you, your could-be employer is deciding whether your education, your experience, <strong>and①</strong> other qualifications will pay him to employ you <strong>and②</strong> your “wares” <strong>and③</strong> abilities must be displayed in an orderly <strong>and④</strong> reasonably connected manner.</p></blockquote><p>第一个and并列your education, your experience和other qualifications</p><p>第二个and并列will pay him to employ you 和 must be displayed两个句子</p><p>第三个and并列abilities和”wares”（商品）</p><p>第四个and并列orderly 和 reasonably，共同修饰connected，他们存在于 <code>in an ...... manner（以一种 什么样 的方式）</code>中，形容manner，表示你的商品和你的能力必须以一种有序且合理的方式被展现出来</p></li><li><p>W（从属连词)</p><p>W + that</p></li></ol><p>while的意思有两种情况：</p><p>①时间：当。。。时 &#x3D; when</p><p>②对比；尽管  <em>80%的情况是这种</em></p><h4 id="从句省略的情况"><a href="#从句省略的情况" class="headerlink" title="从句省略的情况"></a>从句省略的情况</h4><p><strong>从句省略情况 或 从句中只能找到谓语，该如何理解</strong></p><p>​①当从属连词所连接的从句和主句的主语一致</p><p>​②同时从句的谓语动词中含有be动词</p><p>此时可以省略从句中的主语，一级be动词</p><p>例如：</p><blockquote><p>Though he was blamed, he never changed his mind.</p></blockquote><p>可以省略掉从句中的主语和be动词，变成</p><blockquote><p>Though blamed, he never changed his mind.</p></blockquote><p>如果你想把这个句子还原，<strong>把主句的主语和be动词挪过来就行</strong></p><p>所以第一个句子中的<code>While talking to you, your could-be employer is deciding... </code>，可以补全为<code>While your could-be employer talking to you, your could-be employer is deciding </code></p><p>来看下一个例子</p><blockquote><p>In making a blueprint for a job , begin with yourself , for（for翻译成因为） when you know exactly what you have to offer , you can intelligently plan where to sell your services . </p></blockquote><p>来找找其中的连词和谓语动词，连词有 1. when 2. what 3. where，谓语动词有 1. begin 2. know 3. have to 4. plan </p><p>最后一句where to sell your services，where直接链接的是to do(不定式)，所以最后一个where的任务就完成了，表示在什么地方营销自己的服务。所以只剩下两个连词</p><blockquote><p>补充：从属连词可以链接句子，也可以链接不定式。</p></blockquote><p>根据之前的知识我们直到，连词和谓语动词之间的比例应该是<code>n:n+1</code>的，然而这里却只有两个，说明有一个我们没有找到，这个词就是for</p><p><code>for prep. 为了 conj. 因为</code></p><p>for作连词表示因为，也就是因果关系</p><p>再来一个例子</p><blockquote><p>You can make a mental blueprint of a desire as you would make a blueprint of a house, and each of us is continually making these blueprints in the general routine of everyday living.</p></blockquote><p>谓语动词：1. can make 2. world make 3. is …. making</p><p>连词：1. as 2. and</p><p>当as作连词时，它的意思应该是什么？</p><p><code>as prep. 作为  conj. 像...一样；当...时；因为；尽管</code></p><p>所以首先不能翻译成作为，其次根据意思应该翻译成<code>像...一样</code>，“你可以制作一副愿望的蓝图，就像你制作一个房屋的蓝图一样。并且我们每个人都在每天的日常中持续的制作这样的蓝图。</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇变偶不变，符号看象限</title>
      <link href="/2022/07/28/Math/%E5%A5%87%E5%8F%98%E5%81%B6%E4%B8%8D%E5%8F%98%EF%BC%8C%E7%AC%A6%E5%8F%B7%E7%9C%8B%E8%B1%A1%E9%99%90/"/>
      <url>/2022/07/28/Math/%E5%A5%87%E5%8F%98%E5%81%B6%E4%B8%8D%E5%8F%98%EF%BC%8C%E7%AC%A6%E5%8F%B7%E7%9C%8B%E8%B1%A1%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>来自知乎“陈显圣”的方法</p><p><img src="https://s2.loli.net/2022/07/28/R6qywFtWg3OikTz.jpg" alt="奇变偶不变，符号看象限"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研数学 </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT52</title>
      <link href="/2022/07/16/English/words/wordsUnit52/"/>
      <url>/2022/07/16/English/words/wordsUnit52/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-52"><a href="#UNIT-52" class="headerlink" title="UNIT 52"></a>UNIT 52</h1><h2 id="conscience相关"><a href="#conscience相关" class="headerlink" title="conscience相关"></a>conscience相关</h2><p>conscience [‘kɔnʃəns] n. 良心，良知（con-全 + science科学、知道。全知道&#x3D;&gt;明辨是非的能力）</p><blockquote><p>a clear&#x2F;guilty conscience 问心无愧&#x2F;问心有愧</p></blockquote><p>science [‘saiəns] n. 科学；学科（-sci-&#x3D;cut切、区分&#x3D;&gt;知道 + 名词后缀-ence。区分已知与未知）</p><p>scientiﬁc [,saiən’tiﬁk] adj. 科学上的</p><p>scientist [‘saiəntist] n. 科学家</p><p>scissors [‘sizəz] n. 剪子（拉丁excisus。s-+-cis-切 + 辅音双写s引导名词后缀-or + s）</p><p>⭐conscientious [,kɔnʃi’enʃəs] adj. 本着良心的，审慎正直的，认真的</p><blockquote><p>a conscientious student&#x2F;teacher&#x2F;worker</p><p>勤勉认真的学生；一丝不苟的老师；认真负责的工人</p></blockquote><p>conscious [‘kɔnʃəs] adj. （of）意识到的；神志清醒的（con- + -sci-&#x3D;cut切、区分 + 连接字母-i- + 形容词后缀-ous。 全知道的）</p><blockquote><p>She’s very conscious of the problems involved.</p><p>她完全意识到了所涉及的问题</p><p>He’s still conscious but he’s very badly injured.</p><p>他神志还清醒，但伤得很重</p><p>My tooth doesn’t exactly hurt, but I’m conscious of it （&#x3D; I can feel it） all the time.</p><p>牙齿并不疼，可是我总觉得不舒服</p><img src="https://s2.loli.net/2022/07/16/IxRajQNYqM7Fr5P.png" alt="conscious" style="zoom:50%;" /><p>我们看上面这张图，站着的人是清醒的，躺着的人就是不清醒的</p></blockquote><h2 id="consensus相关"><a href="#consensus相关" class="headerlink" title="consensus相关"></a>consensus相关</h2><p>consensus [kən’sensəs] n.（意见等的）一致，一致同意，共识（con-共同 + -sens-感觉 + 名词后缀-us &#x3D;&gt; 大家共同的感觉）</p><blockquote><p>The general consensus in the office is that he can’t do his job.</p><p>办公室成员一致认为他无法胜任工作。</p><p>There is a growing consensus of opinion on this issue.</p><p>对这个问题的看法日趋一致。</p></blockquote><p>sense [sens] n. 感官；感觉；判断力；意义 vt. 感觉到，意识到</p><blockquote><p>Dogs have a keen （&#x3D; strong） sense of smell.</p><p>狗的嗅觉很灵敏。（名词）</p><p>There’s a lot of sense in what Mary says.</p><p>玛丽说得很在理。（名词）</p><p>Although she said nothing, I could sense her anger.</p><p>尽管她什么都没说，但我能感觉到她的愤怒。</p></blockquote><p>consent [kən’sent] vi.&amp;n. （to）同意，赞成，答应</p><p>sensible [‘sensəbl] adj. 明智的，达理的；能感觉到的（-sens-+形容词后缀-ible。能感觉到的）</p><p>sensitive [‘sensitiv] adj. （to）敏感的，易受伤害的；灵敏的（-sens- + 复合形容词后缀-itive。敏感的）</p><blockquote><p>Her reply showed that she was very sensitive to criticism.</p><p>她的回答表明她对批评很敏感</p><p>Sex education and birth control are sensitive issues.</p><p>性教育和计划生育都是敏感的话题</p></blockquote><p>sensation [sen’seiʃən] n. 感觉，知觉；激动，轰动，轰动一时的事情（-sens- + 复合名词后缀-ation）</p><blockquote><p>I had no sensation of pain whatsoever.</p><p>我没有任何痛苦的感觉</p><p>Their affair caused a sensation.</p><p>他们的暧昧关系引起了轰动。</p></blockquote><p>nonsense [‘nɔnsəns] n. 胡说，废话（non（e）没有 + sense感觉、意义。无意义）</p><p>sentiment [‘sentimənt] n. 感觉，看法；感情，<strong>柔情</strong></p><p>resent [ri’zent] vt. 对…表示忿恨，怨恨（re-反。<strong>反感</strong>）</p><blockquote><p>I deeply resented her criticism.</p><p>我对她的批评感到非常气愤。</p><p>She bitterly resented her father’s new wife.</p><p>她对她父亲新娶的妻子恨之入骨</p></blockquote><p>scent [sent] n. 气味，香味，香水，线索，嗅觉 v. 嗅，发觉（通sense感觉）</p><blockquote><p>the scent of roses 玫瑰的香味（名词）</p><p>The dog scented a rabbit.</p><p>狗嗅到了兔子的气息。</p></blockquote><p>sentence [‘sentəns] n. 句子；判决，宣判 vt. 宣判，判决（-sent-&#x3D;sense感觉。①表达感情的文字陈述；②有感而发的观点、判决）</p><h2 id="conservation相关"><a href="#conservation相关" class="headerlink" title="conservation相关"></a>conservation相关</h2><p>conservation [,kɔnsə’veiʃən] n. 保护，保存；节约</p><blockquote><p>wildlife conservation 野生生物保护</p><p>a conservation area 保护区</p><p>Energy conservation reduces your fuel bills and helps the environment.</p><p>节省能源能减少你的燃油费，而且还有利于环境</p></blockquote><p>conserve [kənˈsə:v] vt. 保存；节约（con-共同表强调 + <strong>-serv(e)&#x3D;guard看管</strong>。看好&#x3D;&gt;保护）</p><p>conservative [kən’sə:vətiv] adj. 保守的，守旧的 n. 保守主义者</p><p>preserve [pri’zə:v] vt. 保护，维持；保存，保藏（pre-在前 + -serv（e）看管。提前看好 &#x3D;&gt; 保存）</p><blockquote><p>We want to preserve the character of the town while improving the facilities.</p><p>我们想在改善市镇设施的同时保持其特色</p><p>The fossil was well preserved. 这块化石保存得很好。</p></blockquote><p>reserve [ri’zə:v] n. 储备；保留态度；保留意见 vt. 保留，储备；预定；保留（某种权利）</p><p>reservation [,rezə’veiʃən] n. 保留，保留意见；预定，预订；保留地</p><p>reservoir [‘rezəvwɑ:] n. 水库，蓄水池</p><hr><p>observe [əb’zə:v] vt. 观察，观测；注意到；监视；遵守；评述，说（ob-在对面+-serv（e）-看。①监视、观察、遵守；②把看到的说出来&#x3D;&gt;评述）</p><p>observation [,ɔbzə:’veiʃən] n. 观察，观测；监视；观察力；评述</p><p>serve [sə:v] v. 服务，尽责；提供（食物或饮料）；符合，适用（guardian守护者&#x3D;&gt;服务）</p><p>service [‘sə:vis] n. 服务；公共设施；维修保养；行政部门 v. 维修</p><p>servant [‘sə:vənt] n. 仆人</p><p>deserve [di’zə:v] vt. 应受，值得（de-彻底。①周到的服务所得&#x3D;&gt;应得；②所作所为遭受的下场&#x3D;&gt;应受）</p><p>dessert [di’zə:t] n. 正餐后的水果或甜食（des-&#x3D;dis-否定 + -sert-&#x3D;serve服务。不再服务，吃完这个就没有了&#x3D;&gt;餐后水果）</p><h2 id="console相关"><a href="#console相关" class="headerlink" title="console相关"></a>console相关</h2><p>console [kən’səul; ˈkɒnsəʊl] vt. 安慰，抚慰，慰藉 n. [计]控制台；[电]操纵台；支撑架</p><p>（①con-来+sole&#x3D;silly开心的、傻里傻气的。来让人开心&#x3D;&gt;安慰；②con-共同 + sole&#x3D;solid稳固的。一个稳固的整体&#x3D;&gt;整体控制的工具）</p><blockquote><p>Nothing could console him when his wife died.</p><p>他妻子去世后，什么事情也不能使他感到宽慰。（动词）</p><p>a gaming console （游戏机）</p></blockquote><p>solid [‘sɔlid] adj. 固体的；结实的，稳固的，可靠的 n. 固体（-sol-&#x3D;whole完整的。一个整体的）</p><p>solidarity [,sɔli’dæriti] n. 团结一致；齐心协力；同心同德</p><p>consolidate [kən’sɔlideit] v. 使加固，使加强；（把……）联为一体，合并（con-共同 + solid坚固的 + 动词后缀- ate）</p><blockquote><p>The success of their major product consolidated the firm’s position in the market.</p><p>公司主打产品取得的成功巩固了该公司在市场上的地位。）</p><p>The two firms consolidated to form a single company.</p><p>两家小公司合并成了一家公司</p></blockquote><p>soldier [‘səuldʒə] n. 士兵，军人（solid早期表示纯的、纯金的。古罗马领军饷的职业军人）</p><p>veteran [‘vetərən] n. 老手，老兵（vet&#x3D;old老+-er+-an）</p><blockquote><p>a Vietnam veteran  越战老兵</p></blockquote><p>solemn [‘sɔləm] adj. 庄严的，隆重的；严肃的（-sol-&#x3D;whole完整的 + -emn-&#x3D;-ann-年。一年一回&#x3D;&gt;隆重的）</p><blockquote><p>a solemn oath 庄严的誓言</p><p>a solemn ritual 隆重的仪式</p><p>Her face grew solemn.</p><p>她的脸显得严肃起来</p></blockquote><p>salute [səˈluːt] v.&amp;n. 敬礼；致敬（-sal-&#x3D;whole完整、健全 + 动词后缀-ute。祝健康&#x3D;&gt;敬礼）</p><p>salvation [sæl’veiʃən] n. 拯救，救助；救济（者，品），救助工具；救世主（-sal-完整+-v-+复合名词后缀-ation。 基督教中的“灵魂得救”，通save拯救） </p><blockquote><p>a marriage beyond salvation 无法挽回的婚姻</p><p>生活中很难见到，只有书面有可能看到，是一个比较大的词</p></blockquote><p>save [seiv] v. 救，拯救；储蓄，贮存；节省</p><p>safe [seif] adj. 安全的，牢靠的；谨慎的，可靠的 n. 保险箱</p><p>saving [‘seɪvɪŋ] n. 挽救，救助，节约，储蓄；（pl.）储蓄金，存款</p><p>safety [‘seifti] n. 安全，保险；安全设备，保险装置</p><p>rescue [‘reskju:] v.&amp;n. 营救，援救（助记：re-回+scue音似secure安全的。回到安全处&#x3D;&gt;援救）</p><hr><p>resort [ri’zɔ:t] n. 度假胜地，常去之处，采取的手段 vi. 凭借，求助，诉诸（re-再+sort&#x3D;source资源。①再次充电的地方&#x3D;&gt;度假胜地；②再次充电&#x3D;&gt;凭借）</p><p>whole [həul] n. 全部adj. 全体的；全部的；完整的；无缺的</p><p>wholesome [‘həulsəm] adj. 卫生的；有益的；健康的，有益健康的（前面讲过）</p><p>wholly [‘həuli] adv. 完全地，全部，一概</p><blockquote><p>I wasn’t wholly convinced by her explanation.</p><p>她的解释未能让我完全信服。</p></blockquote><p>heal [hi:l] v.治愈，愈合（通whole完整的、未受伤害的）</p><p>health [helθ] n. 健康，健康状况；卫生</p><p>hail [heil] v. 赞扬，称颂；下雹 n. 雹；雹子般的一阵（①祝完整、健康&#x3D;&gt;赞颂；②通cold冷）</p><hr><p>sole [səul] adj. 单独的，唯一的 n. 脚底；鞋底（①single；②soil土壤一鞋底）</p><blockquote><p>My sole reason for coming here was to see you.</p><p>我到这儿唯一的原因就是来看你（形容词）</p><p>The hot sand burned the soles of their feet.</p><p>灼热的沙地使他们的脚掌感到火辣辣的。</p></blockquote><p>solitary [‘sɔlitəri] adj. 独自的；单一的，唯一的</p><p>desolate [‘desələt, ‘desəleit] adj. 荒凉的；凄凉的，孤寂的 v. 使感到悲惨；使感到凄凉（de-彻底 + -sol-单独 + 动词后缀-ate。彻底孤立）</p><blockquote><p>The house stood in a desolate landscape.</p><p>那所房子坐落在萧瑟荒凉的原野上。（形容词）</p><p>He was desolate without her.</p><p>没有她，他感到孤独而凄凉。（形容词）</p><p>She had been desolated by the death of her friend.</p><p>朋友的去世使她感到十分悲伤。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> conscience和conscious区分，一个是名词良心，一个是形容词意识到的，神智清醒的</p></li><li><p><input disabled="" type="checkbox"> reserve、conserve和preserve</p><p>reserve仅仅是保留，留在自己身边</p><p>conserve是大家共同保护节约</p><p>preserve是提前保护，也就是把某个东西提前取出来保存，程度更深一些，有收藏起来的意思</p></li><li><p><input disabled="" type="checkbox"> 注意observe有 遵守和评论的意思</p></li><li><p><input disabled="" type="checkbox"> console 有安慰，慰藉的意思</p></li><li><p><input disabled="" type="checkbox"> sole 除了唯一的、单独的。还有脚底的意思</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT51</title>
      <link href="/2022/07/15/English/words/wordsUnit51/"/>
      <url>/2022/07/15/English/words/wordsUnit51/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-51"><a href="#UNIT-51" class="headerlink" title="UNIT 51"></a>UNIT 51</h1><h2 id="confidence相关"><a href="#confidence相关" class="headerlink" title="confidence相关"></a>confidence相关</h2><p>confidence [‘kɔnfidəns] n. (in)信任；信心，自信；秘密，机密（con-共同表强调 + -fid- &#x3D;faith相信 + 名词后缀-ence）</p><blockquote><p>They talked endlessly, exchanging conﬁdences.</p><p>他们聊个不停，互诉心事。</p></blockquote><p>conﬁdent [‘kɔnﬁdənt] n. (of, in)确信的，自信的</p><p>conﬁdential [,kɔnﬁ’denʃəl] adj. 秘（机）密的；表示信任的；担任机密工作的</p><blockquote><p>conﬁdential information&#x2F;documents 机密情报&#x2F;文件</p></blockquote><p>faith [feiθ] n. 信任，信用；信仰，信条</p><blockquote><p>Even in the bad times she never lost her faith.</p><p>即使在困难时期，她也从未丧失信仰</p></blockquote><p>faithful [‘feiθful] adj. 守信的，忠实的，如实的，可靠的</p><p>defy [dɪˈfaɪ] vt. （公然）违抗，反抗（de-&#x3D;dis-反 + -fy-&#x3D;-fid-相信&#x3D;&gt;不相信）</p><p>federal [‘fedərəl] adj. 联邦的，同盟的</p><p>federation [‘fedəreiʃən] n. 同盟，联邦</p><p>bureau [‘bjuərəu] n. 署，局，司，处（桌布&#x3D;&gt;办公桌&#x3D;&gt;政府办公室）</p><p>bureaucracy [bjuə’rɔkrəsi] n. 官僚主义，官僚机构；（非民选的）委任官员（-cracy&#x3D;hard统治）</p><hr><p><strong>与cracy相关的</strong></p><p>democracy [di’mɔkrəsi] n. 民主，民主制，民主国家（人民做主，demo在这里代表人民，是希腊语）</p><p>democratic [,demə’krætik-kəl] adj. 民主的</p><blockquote><p>We must accept the results of a democratic election (&#x3D; an election in which all people can vote).</p><p>我们必须接受民主选举结果。</p></blockquote><p>epidemic [,epi’demik] adj. 流行性的；传染的 n. 流行病；传播（epi-&#x3D;upon, among在上、在中 + -dem-人民 + 形容词后缀-ic。在人群中的）</p><p>investigate [in’vestiɡeit] vt. 调查，调查研究（in-进入+vestige脚印、痕迹 + 动词后缀-ate。）</p><h2 id="conform相关"><a href="#conform相关" class="headerlink" title="conform相关"></a>conform相关</h2><p>conform [kən’fɔ:m] vi. (to)顺从，随大流；遵守；一致，符合（con-共同 + form形式。形式相同）</p><blockquote><p>There is considerable pressure on teenagers to conform.</p><p>年轻人被大力要求守规矩</p><p>The building does not conform with safety regulations.</p><p>这座建筑物不符合安全条例</p></blockquote><p>form [fɔ:m] n. 形状，形式；表格 v. 形成</p><blockquote><p>The human form has changed little over the last 30,000 years.</p><p>3 万多年以来，人的提醒没有多大变化。</p><p>In a novel form and content are equally important.</p><p>小说的形式和内容同样重要。（名词）</p><p>to fill in a form 填表</p><p>She formed the clay into a small bow.</p><p>她把陶土捏成了一只小碗。（动词）</p><p>A solution began to form in her mind.</p><p>她想到了一个解决办法。</p></blockquote><p>formation [‘fɔ:mə] n. 形成；构成；队形</p><blockquote><p>the formation of a crystal 晶体的构成</p><p>marching in close formation 以紧凑的队形前进</p><p>march在这里是行军的意思。这个单词是由古罗马发明的，march是古罗马中的一月，每年这个月是他们行军打仗出发的时候。罗马人一年只有10个月。</p></blockquote><p>format [‘fɔ:mæt] n. （出版物的）开本，版式；格式 vt. 设计；安排</p><p>formal [‘fɔ:məl] adj. 正式的；形式的</p><p>formula [‘fɔ:mjulə] n. (pl. formulae)公式；规则；分子式；药方</p><blockquote><p>the secret formula for the blending of the whisky</p><p>调配威士忌的秘方</p></blockquote><p>formulate [‘fɔ:mjuleit] vt. 用公式表示；规划；设计；系统地阐述</p><blockquote><p>This new kitchen cleaner is formulated to cut through grease and dirt.</p><p>这种新的厨房清洁剂是设计来清除油渍和污垢的。</p><p>She has lots of good ideas, but she has difficulty formulating them.</p><p>她有很多好的想法，但就是不善于表达</p></blockquote><hr><p>inform [in’fɔ:m] v. 通知，告诉，报告；告发，告密（in-进入。进入形式&#x3D;&gt;使知情）</p><p>information [,infə’meiʃən] n. 通知，报告；情报，资料，消息；信息</p><p>reform [ri’fɔ:m] v.&amp;n. 改革，改造，改良（re-再）</p><p>transform [træns’fɔ:m, trænz-] vt. 改变，变换；变压；转化；改造，改造（trans-穿。穿越形式&#x3D;&gt;变形）</p><blockquote><p>The reorganization will transform the entertainment industry.</p><p>这次重组将使娱乐业大为改观</p><p>It was an event that would transform my life.</p><p>那是能够彻底改变我一生的一件事</p></blockquote><hr><p><strong>form的形近词汇</strong></p><p>perform [pə’fɔ:m] v. 履行，执行；表演，演出（per-每 + -form-&#x3D;for在前、提供。每一步都展现出来）</p><p>performance [pə’fɔ:məns] n. 履行，执行；表演，演出；性能，特性；成绩</p><p>former [‘fɔ:mə] adj. 以前的，在前的（for的比较级，相对靠前；最高级foremost最初的）</p><p>⭐from [ifrɔm, gfrəm] prep. 从，自从；由于；离；根据，按；去除（fro-&#x3D;for在前、最初）</p><p>frame [freim] n. 框架；结构 v. 给……做框；（措词谨慎地）表达，说出；陷害，诬陷</p><blockquote><p><em>a picture frame</em> </p><p>一个画框（名词）</p><p>the basic framework of society</p><p>社会的基本构架（名词）</p><p>The picture is now ready to be framed. </p><p>这幅画现在可以加框了。（动词）</p><p>The interview would have been more productive if the questions had been framed more precisely.</p><p>如果当时问题提得更确切些, 采访就会更有成效。</p><p>He claimed he’d been framed by the police.</p><p>他声称自己被警方陷害了。</p></blockquote><p>framework [‘freimwə:k] n. 构架；框架；结构；组织；机构</p><p>furnish [‘fə:niʃ] vt. 供应，提供；装备，布置</p><blockquote><p>She furnished him with the facts surrounding the case.</p><p>她向他提供了与案件有关的事实</p><p>They’ve furnished the room very simply.</p><p>他们把房间布置得很简单</p></blockquote><p>furniture [‘fə:nitʃə] n. 家具</p><h2 id="confront相关"><a href="#confront相关" class="headerlink" title="confront相关"></a>confront相关</h2><p>confront [kun’frAnt] vt. 使面临，使遭遇；面对（危险等）（con-来+front前。到前面来）</p><blockquote><p>As she left the court, she was confronted by angry crowds who tried to block her way.</p><p>她离开法庭时，愤怒的人群试图拦住她的去路。</p><p>This was the first time he had confronted an armed robber.</p><p>这是他第一次面对一个武装劫匪。</p></blockquote><p>front [frʌnt] adj. 前面的，前部的 n. 正面；前线，战线 v. 面对</p><p>frontier [‘frʌntjə] n. 国境，边境；尖端，新领域</p><blockquote><p>Nepal has frontiers with both India and China.</p><p>尼泊尔与中国和印度都接壤。</p><p>technological frontiers</p><p>技术尖端</p></blockquote><h2 id="confuse相关"><a href="#confuse相关" class="headerlink" title="confuse相关"></a>confuse相关</h2><p>confuse [kən’fju:z] vt. 使混乱，混淆（con-—起+-fus(e)-&#x3D;pour倾泻、流。流到一起&#x3D;&gt;混乱）</p><p>confusion [kən’fju:ʒən] n. 困惑，糊涂；混淆，混乱</p><p>pour [pɔ:] v. 灌注，流；倾泻；涌向</p><blockquote><p>I spilled the juice while I was pouring it.</p><p>我倒果汁时不小心弄洒了。</p><p>It looks as though it’s about to pour (with rain)</p><p>看样子要下倾盆大雨了。</p><p>Letters of complaint continue to pour in.</p><p>投诉信纷至沓来。</p></blockquote><p>fuse [fju:z] v. 熔化，熔合 n. 保险丝，导火线，引信（保险丝：遇火会融化）</p><blockquote><p>Our different ideas fused into a plan.</p><p>我们不同的想法融合成一项计划。（动词）</p><p>My hairdryer’s stopped working -I think the fuse has broken.</p><p>我的吹风机坏了—- 我想可能是保险丝断了。（名词）</p><p>He lit the fuse and ran.</p><p>他点燃了导火索后就跑了。</p></blockquote><p>futile [‘fju:tail] adj. 无效的，无用的（-fut-&#x3D;fuse流 + 形容词后缀-ile。流走的、泡汤的）</p><p>refuse [ri’fju:z, ri:-] v. 拒绝，谢绝 n.废物，垃圾（re-回）</p><p>refusal [ri’fju:zəl, ri:-] n. 拒绝，回绝</p><p>diﬀuse [di’fju:s] v. 扩散；传播 adj.（文章等）冗长的，漫无边际的（dif-&#x3D;dis-反。流向不同方向）</p><blockquote><p>Television is a powerful means of diffusing knowledge.</p><p>电视是传播知识的有力工具。（动词）</p><p>Oxygen diffuses from the lungs into the bloodstream.</p><p>氧气从肺部渗透到血液之中。（动词）</p><p>a diffuse style of writing</p><p>冗赘的文体（形容词）</p></blockquote><h2 id="conjunction相关"><a href="#conjunction相关" class="headerlink" title="conjunction相关"></a>conjunction相关</h2><p>conjunction [kən’dʒʌŋkʃən] n. 接合，连接，联合；连（接）词（con-一起 + -junct-&#x3D;join 加入 + 名词后缀-ion）</p><blockquote><p>An unfortunate conjunction of circumstances led to his downfall.</p><p>一连串不幸事件同时发生，导致了他的下台。</p><p>There is a team of writers working in conjunction （with each other) on the book.</p><p>有一个作家小组在合作撰写这部书。</p></blockquote><p>junction [‘dʒʌŋkʃən] n. 连接点，交叉点，枢纽站</p><blockquote><p>You should slow down as you approach the junction.</p><p>接近交叉口时你应该减速</p></blockquote><hr><p>join [dʒɔin] v. 参加，加入；联合，连接；和……在一起</p><p>joint [dʒɔint] n. 接合处，接头；关节 adj. 联合的，共同的，连接的</p><blockquote><p>As you become older, your joints get stiffer.</p><p>随着年龄增加，关节就会变僵硬。（动词）</p><p>a joint bank account</p><p>共有银行账户（形容词）</p></blockquote><p>adjoin [ə’dʒɔin] v. 临近，靠近；贴近，毗连（ad-去）</p><blockquote><p>A barn adjoins the farmhouse.</p><p>一座谷仓紧靠着农舍</p></blockquote><p>connect [kə’nekt] vt. 连接；与………联系，接通（电话）vi. 连接（con-共同 + -nect-&#x3D;net网、编织）</p><p>connection [kə’nekʃən] n. （connexion）联系，连接；亲戚，社会关系</p><p>net [net] n. 网，网状物 v. 用网捕，使落网 adj. 纯净的（这个意思来源于下面的neat）</p><blockquote><p>gross&#x2F;net profit 毛&#x2F;纯利润</p><p>gross指的是是“大概的范围，只有一个轮廓”的意思，它有时候在口语中也可以表示“难吃，恶心”的意思，本意是说这顿饭做的不够精细，只有外表看起来像一顿饭。</p></blockquote><p>neat [ni:t] adj. 整洁的，干净的，优美的，精致的</p><blockquote><p><em>a neat desk</em> 整洁的课桌</p><p>neat handwriting 工整的笔迹</p></blockquote><p>network [‘netwə:k] n. 网状物；广播网，电视网；网络</p><p>internet [‘intənet] n. [the~]国际互联网，因特网</p><blockquote><p>来源于拉丁介词inter，意思相当于 between(在…之间) 或 among (在…的中间)。inter-本是原生词缀，它出现在从法语引进的拉丁词中。但是，现在它已经成为英语的派生前缀，可以与不同语源的动词、名词相结合，表示between,mutually,mutual等意思。</p><p>与动词结合时，inter-是个副词性前缀，不改变词基单词的词性；与名词结合时，它是形容词或介词性前缀。当它作为介词性前缀与名词结合时，可能改变词基的词性，生成形容词。</p><p>inter-的异体intel-只能作原生词缀，出现在intellect等少数单词中。</p><p>与前缀inter-形近的前缀有intro,intra 意为“在内，向内”，注意不要混淆。</p><p>另外，前缀inter-有以下几种变形。</p><ol><li><p>intel- [在辅音字母I前]</p><p>intelligent, intellectual</p></li><li><p>enter- (emtr-)[用于法语系统]<br> entertainer, enterprising, entrepreneur</p></li></ol></blockquote><p>knit [nit] v. 编织，编结；接合，粘合</p><blockquote><p>She’s busy knitting baby clothes.</p><p>她忙着织婴儿衣服。</p><p>Society is knit together by certain commonly held beliefs.</p><p>社会是靠某些共同的信念来维系的</p></blockquote><p>knot [nɔt] n. （绳）结；（树）节；节（二海里&amp;小时）vt. 打结</p><p>needle [‘ni:dl] n. 针，指针，针状物（编织工具）</p><hr><p>nerve [nə:v] n. 神经；勇敢，胆量（人体网状的筋脉）</p><blockquote><p>nerve damage 神经损伤</p><p>It takes a lot of nerve to be a bomb disposal expert.</p><p>当拆弹专家需要极大的勇气。</p></blockquote><p>nervous [‘nə:vəs] adj. 神经的；神经过敏的，紧张不安的</p><p>nest [nest] n. 窝，巢v.筑巢（助记：编织出的窝）</p><blockquote><p> a bird’s nest 鸟巢</p><p>We’ve got some swallows nesting in our roof at the moment.</p><p>现在有几只燕子在我们的屋顶下筑巢</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> confidence 新增“秘密，机密”的意思</li><li><input disabled="" type="checkbox"> epidemic 流行性的</li><li><input disabled="" type="checkbox"> formulate 系统阐述，设计</li><li><input disabled="" type="checkbox"> furnish 供应，提供</li><li><input disabled="" type="checkbox"> diﬀuse 扩散</li><li><input disabled="" type="checkbox"> conjunction 接合，连接</li><li><input disabled="" type="checkbox"> net 有网的意思</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT50</title>
      <link href="/2022/07/09/English/words/wordsUnit50/"/>
      <url>/2022/07/09/English/words/wordsUnit50/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-50"><a href="#UNIT-50" class="headerlink" title="UNIT 50"></a>UNIT 50</h1><h2 id="component相关"><a href="#component相关" class="headerlink" title="component相关"></a>component相关</h2><p>condemn [kən’dem] vt.（出于道义而）谴责，指责；判刑，宣告有罪（com-—起 + demn&#x3D;damn 诅咒）</p><blockquote><p>The film was condemned for its sexism.</p><p>这部影片被指责带有性别歧视</p><p>He was condemned to death for murder and later hanged.</p><p>他因凶杀罪被判处死刑后被绞死</p></blockquote><p>damn [dæm] exclamation. 该死 adv. 太，很，非常 vt. 诅咒，谴责 adj. 该死的（助记：doom）</p><p>curse [kə:s] vt. 诅咒，咒骂 n. 诅咒，咒语，祸因（通course。宗教咒语的过程）</p><p>damage [‘dæmidʒ] vt.&amp;n. 损害，毁坏 n. (pl.) 损害赔偿费</p><p>dam [dæm] n. 水坝</p><h2 id="condense相关"><a href="#condense相关" class="headerlink" title="condense相关"></a>condense相关</h2><p>condense [kən’dens] v. （使）冷凝，（使）凝结；浓缩，压缩，简缩</p><blockquote><p>Water vapor in the air condenses into fog.</p><p>空气中的水汽凝结形成雾</p><p>I condensed ten pages of comments into two.</p><p>我将十页的评论压缩成了两页</p></blockquote><p>dense [dens] adj. 浓厚的，密集的，稠密的（助记：tense紧绷的&#x3D;&gt;密集的）</p><p>density [‘densəti] n. 密集，密度，浓度</p><h2 id="condition相关"><a href="#condition相关" class="headerlink" title="condition相关"></a>condition相关</h2><p>condition [kən’diʃən] n. 条件；状况 vt. 使习惯于，使适应；影响（con-共同 + -dit-&#x3D;-dict-说。共同谈的条件）</p><p>air-conditioning [‘eəkən,diʃθniŋ] n. 空调</p><p>addict [ə’dikt; ˈædɪkt] v. 使沉溺；使上瘾 n. 沉溺于不良嗜好的人（ad-朝 + -dict-说。缺乏自主性、等待发落的奴隶&#x3D;&gt;有瘾的人）</p><blockquote><p>By the age of 14 he was addicted to heroin.</p><p>他14岁的时候，已经吸食海洛因上了瘾。</p><p><em>a drug addict</em> 瘾君子</p></blockquote><p>dictate [dik’teit, ‘dikteit] v. 口授；（使）听写；指示，命令（-diet-说 + 动词后缀-ate）</p><blockquote><p>I dictated my order over the phone.</p><p>我通过电话口述了命令</p><p>She refused to be dictated to by anyone.</p><p>她不愿受任何人摆布。</p></blockquote><p>dictation [dik’teiʃən] n. 听写，口述；命令</p><p>dictionary [‘dikʃənəri] n. 词典，字典（diction措辞 + 名词后缀-ary）</p><p>predict [pri’dikt] vt. 预言，预测（pre-在前。提前说话&#x3D;&gt;预言）</p><p>verdict [‘və:dikt] n. （陪审团的）裁决，判决；判断；定论（-ver-真。说真话&#x3D;&gt;裁决）</p><blockquote><p>The jury reached a unanimous verdict of guilty.</p><p>陪审团一致判定有罪</p><p>The coroner recorded a verdict of accidental death.</p><p>验尸官作出了意外死亡的结论</p></blockquote><hr><p>dedicate [‘dedikeit] vt. 奉献；献身于（de-&#x3D;dis-离开 + -dic-说 + 动词后缀-ate。说出话，早期指向上帝发愿做某事, 神圣）</p><p>⭐区分</p><p>devote [di’vəut] v. （to）奉献，致力（de-彻底 + -vot-说 + -e。发下宏愿，normal，比dedicate程度轻）</p><blockquote><p>She devoted herself to her career.</p><p>她全力倾注于自己的事业</p></blockquote><hr><p>indicate [‘indikeit] v. 指出，指示；表明，暗示（in-里。里面说话&#x3D;&gt;暗示、表明）</p><p>indication [,indi’keiʃən] n. 指出，指示；表明，暗示</p><p>indicative [in’dikətiv] adj. （of）指示的，暗示的</p><p>index [‘indeks] n. （pl. indexes, indices）索引 vt. 附以索引（in-里+-dex-&#x3D;-dict-说。引入、指出。index finger 食指）</p><hr><p>digital [‘didʒitəl] adj. 数字的；数位的；手指的 n. 数字（digit数字（-dig-&#x3D;-dict-说、数）+ 形容词后缀-al）</p><p>teach [ti:tʃ] vt. 教，讲授；教导（训）vi.讲课，当教师（通-dic（t）-,说教）</p><p>token [‘təukən] n. 标志，象征；代币，专用辅币；赠券；礼券 adj. 象征性的（tok&#x3D;-dic（t）-说 + 名词后缀-en）</p><blockquote><p>It doesn’t have to be a big present - it’s just a token.（礼物不必大——只是为了表示一下。）</p><p>a parking token</p><p>停车专用辅币</p><p>Collect six tokens for a free T-shirt.</p><p>收集到六张礼券可以换一件T血衫。</p><p>a one-day token strike</p><p>一天的象征性罢工（形容词）</p></blockquote><p><img src="https://s2.loli.net/2022/07/09/BKO3nRlxGrib2u6.png" alt="game token"></p><p>paradigm [‘pærədim] n. 典范；范例；示例（formal）（para-在旁边+-dig-说+-m。作为参考）</p><h2 id="conduct相关"><a href="#conduct相关" class="headerlink" title="conduct相关"></a>conduct相关</h2><p>conduct [kən’dʌkt; ’kɔndʌkt] vt. 组织，实施；引导；指挥（乐队）；传导 n. 行为;组织、实施方式（con-共同表强调 + -duct-引导，通tug用力拉。）</p><p>conductor [kən’dʌktə] n. （汽车等交通工具的）售票员；领队，指挥；导体</p><blockquote><p>a bus conductor  公共汽车售票员</p><p>The conductor raised his baton.</p><p>指挥举起了指挥棒。</p><p>Metal is a good conductor of heat.</p><p>金属是良好的热导体。</p></blockquote><p>semiconductor [ˌsemikənˈdʌktə(r)] n.半导体（semi&#x3D;half）</p><hr><p>deduce [di’dju:s] vt. （from）推断，推论（formal）（de-向下+-duc(e)引导。一步步走下来&#x3D;&gt;推断）</p><blockquote><p>We cannot deduce very much from these ﬁgures.</p><p>我们无法从这些数字中推断出太多东西。</p></blockquote><p>deduct [di’dʌkt] vt. 扣除（de-&#x3D;dis-反。带走&#x3D;&gt;扣除）</p><blockquote><p>The cost of your uniform will be deducted from your wages.</p><p>制服费将从你的工资中扣除。</p><p>Ten points will be deducted for a wrong answer.</p><p>答错一题扣十分。</p></blockquote><p>induce [in’dju:s, in’du:s] vt. 引诱，劝使；引起，导致；感应（in-里。引入）</p><p>introduce [,intrə’dju:s] vt. 介绍；引进，传入；推行（intro-&#x3D;inter-进入。引入）</p><p>produce [prə’dju:s, ‘prɔdju:s] vt. 生产，制造，显示，演出，导致n.产品（pro-向前。带到这个世界上）</p><p>reproduce [,ri:prə’dju:s] v. 复制；重现；繁殖（re-再）</p><p>product [‘prɔdʌkt] n. 产品，产物；乘积（指代具体产品）</p><p>production [prə’dʌkʃən] n. 生产(指代生产这个概念，而不是某个产品)，产品，作品，（研究）成果，总产量</p><p>productive [prə’dʌktiv] adj. 生产（性）的，能产的，多产的</p><p>productivity [,prɔdʌk’tivəti, prə-] n. 生产率</p><blockquote><p>Studies show that if a working environment is pleasant, productivity increases.</p><p>研究表明如果工作环境舒适，生产效率会提高。</p></blockquote><p>repertoire [‘repətwɑ:] n. 节目，全部剧目，保留剧目，全部技能（re-反复表强调 + pert&#x3D;produce生产 + -oire。产出的全部）</p><blockquote><p>The Royal Shakespeare Company also has many modern plays in their repertoire.</p><p>皇家莎士比亚剧团的演出剧目中也包括很多现代戏剧。</p></blockquote><p>reduce [ri’dju:s, -‘du:s] v. 减少，缩小；简化（re-回）</p><p>reduction [ri’dʌkʃən] n. 减小，减少，缩小</p><p>dock [dɒk] n. 船坞，码头（通-duc-引导。船只停泊处）</p><hr><p>tug [tʌɡ] v. 用力拖（或拉）n. 猛拖，猛拉</p><p>tuck [tʌk] vt. 卷起；塞进（拉起&#x3D;&gt;卷起）</p><p>tow [təu] vt. （用绳、链等）拖（车、船等）n. 拖，牵引</p><p><img src="https://s2.loli.net/2022/07/14/p3ogjJ9C51GRYQ2.png" alt="image-20220714174402120"></p><p>tie [tai] n. 领带；联系，关系，纽带；束缚 v. 扎，系，捆</p><h2 id="confess相关"><a href="#confess相关" class="headerlink" title="confess相关"></a>confess相关</h2><p>confess [kən’fes] v. 供认，承认，坦白（con-全部 + -fe(ss)-说话。全说出来）</p><blockquote><p>He has confessed to the murder.</p><p>他供认了谋杀罪行</p><p>I have to confess （that） when I first met him I didn’t think he was very bright.</p><p>我得承认，我第一次见到他的时候，觉得他不是很聪明。</p></blockquote><p>phone [fəun] n. （telephone）电话，电话机，耳机 v. 打电话</p><p>telephone [‘telifəun] n. 电话，电话机 v. 打电话</p><p>microphone [‘maikrəfəun] n. 话筒，扩音器（micro-小）</p><p>profession [prə’feʃən] n. 职业，专业；表白，宣布（pro-向前 + -fe（ss）-说话 + 名词后缀-ion。当众宣布）</p><blockquote><p>He left the teaching profession in 1965 to start his own business.</p><p>他1965年离开教师岗位自己创业</p><p>his professions of love</p><p>他的爱情表白</p></blockquote><p>professional [prə’feʃənəl] adj. 职业的，专门的 n. 自由职业者，专业人员</p><p>professor [prə’fesə] n. 教授</p><p> preface [‘preﬁs] n. 序言，引言，前言 vt. 作序，写前言（pre-在前 + -fa(ce)说话）</p><p>symphony [‘simfəni] n. 交响乐，交响曲（sym&#x3D;same共同 + -phon-发声+ 名词后缀-e。共同发声&#x3D;&gt;交响）</p><p>orchestra [‘ɔ:kistrə, -kes-] n. 管弦乐队，剧院最前面的一排座位（orch&#x3D;origin最初，最前。舞台最前面的位置）</p><p>fame [feim] n. 名声；名望（名声）</p><p>famous [‘feiməs] adj. 著名的</p><p>fascinate [‘fæsineit] v. 迷住，强烈吸引（古罗马魅惑之神Fascinus法瑟勒斯）</p><blockquote><p>Science has always fascinated me.</p><p>科学一直令我着迷。</p><p>The private lives of movie stars never fail to fascinate.</p><p>电影明星的私生活总为人所津津乐道。</p></blockquote><p>infant [‘infənt] n. 婴儿，幼儿（in-不 + -fan(t)-说话。不会说话的人）</p><p>prophet [‘prɔﬁt] n. 预言家；先知；<strong>提倡者</strong>（pro-向前+-phe（t）-说话。对比predict）</p><p>fate [‘feit] n. 命运（神说的话）</p><p>fatal [‘feitl] adj. 致命的，毁灭性的</p><hr><p>fable [‘feibl] n. 寓言</p><p>tale [teil] n. 故事，传说</p><p>tell [tel] vt. 告诉，讲述；告诫；吩咐，命令；辨&amp;区别</p><p>toll [təul] n. （道路、桥等的）通行费；牺牲；死伤人数（说出的数）</p><blockquote><p>a toll road&#x2F;bridge</p><p>收费道路&#x2F;桥梁</p><p>the war’s growing casualty toll</p><p>不断增长的战争伤亡人数</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> dedicate 和 devote 区分</li><li><input disabled="" type="checkbox"> token paradigm </li><li><input disabled="" type="checkbox"> prophet预言家，提倡者；predict预测，通过数据进行的推测</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT49</title>
      <link href="/2022/07/07/English/words/wordsUnit49/"/>
      <url>/2022/07/07/English/words/wordsUnit49/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-49"><a href="#UNIT-49" class="headerlink" title="UNIT 49"></a>UNIT 49</h1><h2 id="component相关"><a href="#component相关" class="headerlink" title="component相关"></a>component相关</h2><p>component [kəm’pəunənt] n. 组成部分，成分，元件（com-—起 + -po（n）-&#x3D;post摆放 + 名词后缀-ent。放在一起&#x3D;&gt;成分）</p><p>opponent [ə’pəunənt] n. 对手，反对者，敌手（op-相对+-po（n）-放+名词后缀-ent。放在对面&#x3D;&gt;对手）</p><blockquote><p>a political opponent 政敌</p><p>In the second game, her opponent hurt her leg and had to retire.</p><p>在第二局，她的对手拉伤了腿，不得不退出比赛。</p></blockquote><p>postpone [pəust’pəun, poʊˈspoʊn] vt. 推迟，延期（post-在后+-po（ne）-放。放在后面。主观的推迟）</p><blockquote><p>They decided to postpone their holiday until next year.</p><p>他们决定将假期推迟到来年。</p></blockquote><h3 id="推迟单词大区分：postpone-delay-put-off-procrastinate："><a href="#推迟单词大区分：postpone-delay-put-off-procrastinate：" class="headerlink" title="推迟单词大区分：postpone, delay, put off, procrastinate："></a>推迟单词大区分：postpone, delay, put off, procrastinate：</h3><p>delay [di’lei] v.&amp;n. 耽搁，延迟（de-向下。放下、搁下。由于客观条件被迫耽搁）</p><p>procrastinate [prəˈkræstɪneɪt] vi. 拖延；延迟（pro-向前 + crastin明天 + 动词后缀-ate。拖延，个人不好的毛病）</p><p>put off往后推（推脱、搪塞、不情愿做）</p><hr><p>post [pəust] vt. 贴出；公告；投寄；派驻；使驻守 n.（支）柱；邮政，邮寄；职位；岗位；帖子（古代歇脚住宿的驿站。门柱&#x3D;&gt;张贴）</p><blockquote><p>Company announcements are usually posted （up） on the noticeboard.</p><p>公司通告通常张贴在布告栏里。（动词）</p><p>She hardly ever posts on Facebook.</p><p>她几乎从未在脸书上发消息。（动词）</p><p>I must post that parcel （off） or she won’t get it in time for her birthday.</p><p>我得把包裹寄走，否则她过生日就不能及时收到了。（动词）</p><p>Guards were posted at all the doors.</p><p>所有门口处都布置了卫兵。（动词）</p><p>a lamppost&#x2F;signpost 路灯柱&#x2F;路标（名词）</p><p>My application got lost in the post.</p><p>我的申请书寄丢了。（名词）</p><p>They have several vacant posts.</p><p>他们有几个职位空缺。（名词）</p><p>The soldier was disciplined for deserting his post.</p><p>这个士兵因为擅离岗位而受到处分。（名词）</p><p>Lots of people have commented on my post.</p><p>许多人给我的帖子加了评论。（名词）</p></blockquote><p>poster [‘pəustə] n. 海报，张贴的大幅广告</p><p>postage [‘pəustidʒ] n. 邮费，邮资</p><p>postman [‘pəustmən] n. 邮递员</p><p>postcard [ˈpəʊstkɑːd] n. 明信片</p><p>posture [‘pɔstʃə] n. 姿势，姿态，心态，态度</p><blockquote><p>Back pains can be the result of bad posture.</p><p>腰背疼可能是不良姿势造成的。</p><p>The government has adopted an aggressive posture on immigration.</p><p>政府对移民入境采取了强硬的态度。</p></blockquote><p>pose [pəuz] n. 姿势，姿态 vt. 造成；提出 vi. 摆姿势，佯装</p><blockquote><p>He adopted a relaxed pose for the camera.</p><p>他摆了一个悠闲的姿势拍照。（名词）</p><p>Nuclear weapons pose a threat to everyone.</p><p>核武器对所有的人都构成了威胁。（动词）</p><p>Can we go back to the question that he posed earlier?</p><p>我们能否回到他早先提出的那个问题上去？（动词）</p><p>We all posed for our photographs.</p><p>我们都摆好了姿势拍照。（动词）</p></blockquote><p>position [pə’ziʃən] n. 位置；职位；姿势，姿态；见解，立场，形势</p><p>positive [‘pɔzətiv, -zi-] adj. 肯定的；积极的；阳性的；无疑的 n. 正数；（摄影）正片（站得住脚的）</p><p>negative [‘neɡətiv] adj. 否定的；消极的；阴性的 n. 负数；（摄影）底片（①ne(g)&#x3D;no不 + 复合形容词后缀-ative；② 反色&#x3D;&gt;底片）</p><p>deny [di’nai] vt. 否认，否定；拒绝（de-离开 + -ny-&#x3D;no不）</p><p>denial [di’naiəl] n. 否认；拒绝；否认某事或某事实的声明</p><p>compose [kəm’pəuz] v. 组成，构成；创作（诗歌等）（com-一起 + pose 摆放）</p><p>composite [‘kɔmpəzit] adj. 混合成的，综合成的 n. 合成物，复合材料</p><blockquote><p>a composite picture （&#x3D; one made from several pictures）</p><p>拼图（形容词）</p><p>The main character in her latest novel is a composite of several public figures of that era.</p><p>她那新小说中的主人公是集那个时期几位公众人物形象于一身的综合形象。（名词）</p></blockquote><p>composition [,kɔmpə’ziʃən] n. 作品，作文，乐曲；作曲；结构，组成，成分</p><blockquote><p>a 200-word composition 一篇200字的作文</p><p>At music school I studied piano and composition.</p><p>我在音乐学校学习钢琴和作曲</p><p>the composition of the atmosphere 大气的构成</p></blockquote><p>compound [‘kɔmpaund] n. 混合物，化合物 adj. 混合的，化合的；vt. 混合（相对纯净物）</p><p>deposit [di’pɔzit] vt. 存放；使沉淀；付（保证金）n. 存款；订金；沉积物（①de-&#x3D;dis-离开+&#x3D;-posit-摆放。放到别处&#x3D;&gt;存放；②de-向下。放下&#x3D;&gt;沉淀）</p><blockquote><p>I deposited £500 in my account this morning.</p><p>今天早上我在自己的账户中存了500英镑（动词）</p><p>I deposited my luggage in a locker at the station.</p><p>我把行李存放在车站的储物柜里了（动词）</p><p>The flood waters fell, depositing mud over the whole area.</p><p>洪水退去后留下的淤泥覆盖了整个区域（动词）</p><p>You deposit 20 percent now and pay the rest when the car is delivered.</p><p>你可以先付20%的定金，余款在交车时支付（动词）</p><p>To open an account, you need to make a minimum deposit of $500.</p><p>开立账户至少需要存入500美元。（名词）</p><p>We’ve put down a 5% deposit on the house.（我们已支付了房款的5%作为订金（名词）</p><p>The rain left a deposit of mud on the windows.</p><p>雨水在窗户上留下一层泥（名词）</p></blockquote><p>dispose [dis’pəuz] vi. （of）清除；处理；布置，安排（formal） （dis-离开。放在该放的位置）</p><blockquote><p>They dispose of the city’s waste in the sea.</p><p>他们把城市的废物倒入大海处理掉。</p><p>You can’t dispose of personal property to a total stranger.</p><p>你不能把把私人物品交给一个十足的陌生人</p><p>dispose of ：因为dispose是不及物动词，所以后面要有of</p></blockquote><p>disposal [dis’pəuzəl] n. 清除；处理（formal）</p><p>disposable [dɪˈspəʊzəbl] adj. 可任意处理的；用完即可丢弃的；一次性的</p><blockquote><p><em>disposable chopsticks</em>  一次性筷子</p></blockquote><p>⭐disposition [,dispə’ziʃən] n. 排列，部署；倾向，意向；性格倾向（formal）</p><blockquote><p>to understand the buildings from the disposition of walls </p><p>从墙体布局来识别建筑物</p><p>o have&#x2F;show a disposition towards violence </p><p>有&#x2F;表现出暴力倾向</p><p>to have a cheerful disposition</p><p>性情开朗</p></blockquote><hr><p>expose [ik’spəuz] vt. （to）使暴露；使曝光（ex-向外）</p><p>exposure [ik’spəuʒə] n. 暴露，揭露；宣传，曝光</p><p>impose [im’pəuz] vt. 征（税）；（on）把……强加给（im-&#x3D;in-进入。强行放入）</p><p>oppose [ə’pəuz] vt. 反对；对抗（op-相对）</p><p>opposite [‘ɔpəzit, -sit] adj. 对面的，相对的，相反的 n. 对立面</p><p>preposition [,prepə’ziʃən] n. 介词（pre-在前。摆在名词前的词）</p><p>propose [prə’pəuz] vt. 提议，建议；提名，推荐；vi.求婚（pro-向前。向前摆出姿态）</p><p>proposal [prə’pəuzəl] n. 提议，建议；求婚</p><p>proposition [,prɔpə’ziʃən] n. 主张，建议；陈述，<strong>命题</strong></p><blockquote><p>a business proposition</p><p>一项商业建议</p><p>They were debating the proposition that “All people are created equal”.</p><p>他们正就“人人生而平等 ”这一命题展开辩论。</p></blockquote><p>purpose [‘pə:pəs] n. 目的，意图；用途，效果（pur-&#x3D;pro-向前。摆在眼前的目的）</p><p>suppose [sə’pəuz] vt. 料想，猜想；假定；conj. 假使……结果会怎样（sup-&#x3D;sub-在下。论点的基础&#x3D;&gt;假定）</p><blockquote><p>He found it a lot more difficult to get a job than he supposed it would be.</p><p>他发现找工作比他想象的要难多了。（动词）</p><p>I suppose （that） all the tickets will be sold by now.</p><p>我想现在所有的票恐怕都已经卖完了。（动词）</p><p>Suppose we miss the train - what will we do then?</p><p>假设我们错过了火车 —— 那我们该怎么办？</p></blockquote><p>pause [pɔ:z] v.&amp;n. 中止，暂停（摆着不动）</p><p>puzzle [‘pʌzl] n. 难题，谜，迷惑 v.（使）迷惑，（使）为难（pose摆出的难题）</p><h2 id="comprehend相关"><a href="#comprehend相关" class="headerlink" title="comprehend相关"></a>comprehend相关</h2><p>comprehend [,kɔmpri’hend] vt. 理解，领会（formal） （com-共同 + pre-在前 + -hend-&#x3D;hold 抓住。完全抓住&#x3D;&gt;理解、领会）</p><p>comprehension [,kɔmpri’henʃən] n. 理解（力），领悟</p><p>comprehensive [,kɔmpri’hensiv] adj. 全面的；综合的；包罗万象的；详尽的</p><p>comprise [kəm’praiz] vt. 包含，包括，由………组成；构成，组成（formal）（com-共 + pri-&#x3D;pre-在前 + (hen)s(e)&#x3D;hold 抓住。拿到一起）</p><blockquote><p>The course comprises a class book, a practice book, and a CD.</p><p>这门课的教材包括一本课堂用书、一本练习用书和一张光盘。</p><p>The class is comprised mainly of Italian and French students.</p><p>这个班主要由意大利和法国学生组成。</p></blockquote><p>enterprise [‘entəpraiz] n. 事业，企（事）业单位；事业心，进取心（enter-进入。进入并承担风险&#x3D;&gt;企业）</p><blockquote><p>state-owned enterprises 国有企业</p><p>They’ve shown a lot of enterprise in setting up this project.</p><p>启动这个项目显示出他们豪迈的进取精神</p></blockquote><p>entrepreneur [,ɔntrəprə’nə:] n. [法]企业家，主办人（entre-&#x3D;enter- + -pre(n)- + -eur）</p><hr><p>prison [‘prizən] n. 监狱（抓犯人的地方）</p><p>jail [dʒeil] n. (gaol)监狱；（不加冠词）监禁 vt. 使……坐牢（通cage笼子）</p><p>prey [prei] n. 被掠食者，牺牲者，掠食 v. 捕食，掠夺，折磨</p><blockquote><p>The lion will often stalk its prey for hours.</p><p>狮子经常悄然跟踪猎物达几个小时。</p><p>Fake social workers have been preying on old people living alone.</p><p>冒牌社会福利工作员不断坑害独居老人。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> 推迟单词区分：postpone, delay, put off, procrastinate</li><li><input disabled="" type="checkbox"> composite和compound的区别</li></ul><p>​composite指的是复合的材料，说的是一种通过其他多种材料混合而成的新物质。</p><p>​compound指的是混合出的一堆东西，突出混合的概念，意指这个东西是由多种物质组成的。</p><ul><li><p><input disabled="" type="checkbox"> proposition和preposition的区别</p><p>proposition 和proposal意思相近，都有提议的意思，多了命题的含义。</p><p>preposition 介词</p></li><li><p><input disabled="" type="checkbox"> propose 提议，建议 和 purpose 目的，结果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧记「积化和差」与「和差化积」公式</title>
      <link href="/2022/07/07/Math/%E4%B8%89%E8%A7%92%E5%92%8C%E5%B7%AE%E5%8C%96%E7%A7%AF%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/07/07/Math/%E4%B8%89%E8%A7%92%E5%92%8C%E5%B7%AE%E5%8C%96%E7%A7%AF%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>来自知乎的方法</p><p><img src="https://s2.loli.net/2022/07/06/eKEfD9oiA8aFrNn.jpg" alt="积化和差"></p><p>积化和差只需要反过来记忆</p><p><img src="https://s2.loli.net/2022/07/06/mJkSKoegiBZlz6V.jpg" alt="积化和差"></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研数学 </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT48</title>
      <link href="/2022/07/06/English/words/wordsUnit48/"/>
      <url>/2022/07/06/English/words/wordsUnit48/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-48"><a href="#UNIT-48" class="headerlink" title="UNIT 48"></a>UNIT 48</h1><h2 id="commute相关"><a href="#commute相关" class="headerlink" title="commute相关"></a>commute相关</h2><p>commute [kə’mju:t] vi. （乘车、船等）往返于两地（com-—起 + -mut(e)-&#x3D;move移动、改变）</p><p>move [mu:v] v. 移动，迁移；活动；感动 n. 移动，活动，行动</p><p>movement [‘mu:vmənt] n. 运动，活动；移动，迁移</p><p>movie [‘mu:vi] n. 电影，电影院（缩写自moving picture）</p><p>ﬁlm [ﬁlm] n. 电影；<strong>胶片</strong>；薄膜，薄层 vt. 把……拍成电影</p><p>⭐这个单词本意是指薄膜，之所以有电影的意思，是以为这个词可以表示胶片，才延申出电影。所以也能理解这个词有拍电影的意思。</p><blockquote><p>Everything was covered in a film of dust.</p><p>所有的东西都蒙上了 一层灰尘。（名词）</p><p>They are filming in Moscow right now.</p><p>目前他们正在莫斯科拍电影。</p></blockquote><hr><p>peel [pi:l] v. 削皮，剥皮；脱皮 n. 果皮（通film薄层）</p><blockquote><p>Peel, core, and chop the apples.</p><p>把苹果去皮、去核并剁碎。（动词）</p><p>My back is peeling.</p><p>我的后背在蜕皮。（动词）</p><p>The dessert was decorated with strips of lemon peel.</p><p>甜点上装饰了些切成丝状的柠檬皮。</p></blockquote><p>theater [‘θɪətə] n. （theatre）戏院；戏剧；阶梯教室（thea&#x3D;see看+连接字母-t-+名词后缀-er。看戏之地）</p><p>cinema [‘sinəmə] n. 电影院；电影，影片（缩写自cinematograph电影放映机）</p><p>⭐throne [θrəun] n. 御座，宝座；王位，王权（①结合theater记忆，座位；②通firm稳固）</p><hr><p>remove [ri’mu:v] vt. 移开；除去；将……免职（re-回、反）</p><p>removal [ri’mu:vəl] n. 移动，迁居；除去</p><p>remote [ri’məut] adj. 远的，遥远的，疏远的，偏僻的，细微的（re-回、反+-mot（e）-&#x3D;move移动）</p><blockquote><p>a remote mountain village 偏远的山村</p><p>It happened in the remote past, so no one worries about it any more.</p><p>这件事发生在很久很久以前了，所以没有人再为此担心。</p></blockquote><hr><p>⭐motion [‘məuʃən] n. 运动，动；提议，动议 v. 示意</p><p>emotion [i’məuʃən] n. 情绪，情感，感情（e-向外。流露出来的动作）</p><p>motive [‘məutiv] n. 动机</p><p>motivate [‘məutiveit] vt. 促动；激励，鼓励，作为……的动机</p><p>motivation [ˌməʊtɪˈveɪʃn] n. 动力；动机（通常是褒义词）</p><hr><p>motor [‘məutə] n. 发动机，电动机</p><p>engine [‘’endʒin] n. 发动机，引擎；火车头</p><p>engineer [,endʒi’niə] n. 工程师</p><p>engineering [,endʒi’niəriŋ] n. 工程学</p><p>locomotive [ˌləʊkəˈməʊtɪv] n. 机车，火车头 adj. 运动的，移动的，运载的（-loc-位置 + -o- + -mot-移动 + 形容词后缀 -ive。移动位置的机器）</p><img src="https://s2.loli.net/2022/07/07/korpPmqjDtczBdb.png" alt="image-20220706165307013" style="zoom: 50%;" /><p>promote [prə’məut] vt. 促进；发扬；提升；促销（pro-向前。向前动&#x3D;&gt;推动）</p><p>motel [məu’tel] n. （附有停车场的）汽车旅馆（motor+hotel）</p><hr><p>mutual [‘mju:tʃuəl] adj. 相互的，彼此的；共同的，共有的（-mut-移动、改变+形容词后缀-ual）</p><blockquote><p>mutual respect&#x2F;understanding 相互的尊敬&#x2F;理解</p><p>We met at the home of a mutual friend.</p><p>我们在彼此都认识的朋友家中会面。(共有的)</p></blockquote><p>reciprocal [ri’siprəkəl] adj. 相互的，往复的，<strong>互利的</strong>（rec（i）-&#x3D;re-回+pro-(c)向前 + 形容词后缀-al。往复的）</p><p>permeate [‘pə:mieit] v. 弥漫，遍布，散布；渗入，渗透（per-每 + -meat-&#x3D;move移动+-e。哪里都去&#x3D;&gt;弥漫）</p><blockquote><p>The smell of leather permeated the room.</p><p>屋子里弥漫着皮革的气味</p><p>Dissatisfaction among the managers soon permeated down to members of the workforce.</p><p>管理人员的不满情绪很快传染给了全体职工。</p></blockquote><p>mob [mɔb] n. 乌合之众（尤指暴力者）vt.（人群）围住，围聚（缩写自mobile）</p><blockquote><p>The angry mob outside the jail were ready to riot.</p><p>监狱外愤怒的暴民准备闹事。（名词）</p><p>例2 ： They were mobbed by fans when they arrived at the theatre.</p><p>他们到达剧院时，被影迷们团团围住</p></blockquote><p>mobile [‘məubail] adj. 可动的，活动的，运动的</p><p>mobilize [ˈməʊbəlaɪz] v. （mobilise）调动；动员</p><blockquote><p>They were unable to mobilize the resources they needed.</p><p>他们无法调用他们需要的资源</p><p>The troops were ordered to mobilize.</p><p>部队接到了动员令</p></blockquote><p>moment [‘məumənt] n. 片刻，瞬间，时刻（movement 运动、变化的瞬间）</p><p>momentum [meu’mentem] n. 推动力；冲力；势头</p><blockquote><p>Once you push it, it keeps going under its own momentum.</p><p>一旦你推动了它，它就会在自己的动量作用下持续运动</p><p>The play loses momentum by its half way stage.</p><p>这部戏演到一半时就没了看头</p></blockquote><p>migrate [maɪˈɡreɪt] vi. 迁移，移居（-mig(r)&#x3D;move移动 + 动词后缀-ate）</p><p>immigrant [‘imiɡrənt] n. 移民，侨民（im-进入）</p><p>emigrate [‘emiɡreit] vi.  （to, from）自本国移居他国（e-出）</p><h2 id="compassion"><a href="#compassion" class="headerlink" title="compassion"></a>compassion</h2><p>compassion [kəm’pæʃən] n. 同情；怜悯（for）（com-共同+passion 强烈的情感、痛苦）</p><blockquote><p>Only true love and compassion for all can bring back permanent prosperity to the Human Race.</p><p>只有对所有生灵都充满真正的爱和同情，人类才能获得永久的繁荣</p></blockquote><p>passion [‘pæʃən] n. 热情，激情，爱好；激怒；强烈感情</p><blockquote><p>Her passion for me has cooled down.</p><p>她对我的热情已经冷下来了</p></blockquote><p>enthusiasm [in’θju:ziæzəm] n. 热情，热心；狂热；积极性（en-进入 + -thus-&#x3D;god神 + 名词后缀-iasm。神灵附体的狂热）</p><blockquote><p>Everything he does is done with enthusiasm.</p><p>他做每件事情都是用热情去做</p></blockquote><p>enthusiastic [ɪnˌθjuːziˈæstɪk] adj. 热情的，热心的</p><p>passive [‘pæsiv] adj. 被动的，消极的（-pass-痛苦 + 形容词后缀-ive。痛苦的&#x3D;&gt;被动的）</p><blockquote><p>He’s very passive in the relationship.</p><p>他在这一关系中非常被动</p></blockquote><p>⭐pathetic [pə’θetik] adj. 可怜的；悲惨的（-path-&#x3D;-pass-痛苦 + 形容词后缀-etic）</p><p>patience [‘peiʃəns] n. 耐心，忍耐（-pat-&#x3D;-pass-痛苦 + 连接字母-i- + 名词后缀-ence。痛苦&#x3D;&gt;耐心）</p><p>patient [‘peiʃənt] adj. 有耐心的，能忍耐的 n. 病人，患者</p><p>impatient [im’peiʃənt] adj. 不耐烦的，急躁的（im-&#x3D;un-不）</p><p>sympathy [‘simpəθi] n. 同情，同情心；赞同，同感；慰问（sym&#x3D;same相同。相同的情感）</p><blockquote><p>May we offer our deepest sympathies on the death of your wife.</p><p>我们谨对尊夫人去世表示最深切的慰唁。</p></blockquote><p>sympathize [‘simpəθaiz] vi. （sympathise）（with）同情；共鸣，同感；赞成</p><p>sympathetic [,simpə’θetik] adj. 有同情心的；赞同的；n. 交感神经</p><p>compatible [kəm’pætəbl] adj. 能和睦相处的，合得来的；兼容的（com-共同+-pat-痛苦+形容词后缀-ible。共同承受痛苦的）</p><blockquote><p>It was when we started living together that we found we just weren’t compatible.</p><p>等到开始生活在一起时，才发现我们根本合不来。</p><p>This software may not be compatible with older operating systems.</p><p>该软件可能与较老的操作系统不兼容。</p><img src="https://s2.loli.net/2022/07/06/ZBW4LHIdCF6Pbxv.png" style="zoom:50%;" /></blockquote><h2 id="compel相关"><a href="#compel相关" class="headerlink" title="compel相关"></a>compel相关</h2><p>compel [kəm’pel] vt. 强迫，迫使（com-共同 + -pel-&#x3D;pulse&#x3D;push 推动）</p><blockquote><p>The law can compel fathers to make regular payments for their children.</p><p>这项法律可强制父亲定期支付子女的费用。</p><p>The new circumstances compelled a change in policy.</p><p>新情况迫使在政策上作出改变。</p></blockquote><p>pulse [pʌls] n. 脉搏，脉冲</p><p>push [puʃ] v. 推；催逼，逼迫 n. 推，推力；促进，推进</p><p>⭐compulsory [kəm’pʌlsəri] adj. 必须做的，强制性的，（课程）必修的（com-共同 + -puls-推动 + 形容词后缀-ory）</p><blockquote><p><em>compulsory&#x2F;optional courses</em>  必修*&#x2F;*选修课程</p></blockquote><p>impulse [‘impʌls] n. 冲动；脉冲（in-在内+pulse&#x3D;push推。内部推动&#x3D;&gt;刺激）</p><blockquote><p>I bought them on impulse.</p><p>我是一时冲动买的这些东西。</p><p>an electrical&#x2F;nerve impulse</p><p>电脉冲&#x2F;神经冲动</p></blockquote><p>impulsive [ɪmˈpʌlsɪv] adj. 冲动的；受感情驱使的</p><p>expel [ik’spel] vt. 把……开除；驱逐；排出；发射（ex-向外。推出去）</p><blockquote><p>My brother was expelled from school for bad behaviour.</p><p>我弟弟因为行为不端被学校开除了。</p><p>When you breathe out, you expel air from your lungs.</p><p>呼气的时候，把肺里的空气排出。</p></blockquote><p>propel [prə’pel] vt. 推进，推动；激励，驱使（pro-向前）</p><p>repel [ri’pel] vt.击退，抵制；使厌恶（re-反。抵制）</p><blockquote><p>Troops repelled an attempt to infiltrate the south of the island.</p><p>部队挫败了对该岛南部的渗透企图。</p><p>I was repelled by the smell.</p><p>这种气味让我恶心。</p><ul><li>infiltrate 渗透；入侵</li><li>红警间谍在进入建筑时会说，“building infiltrated”</li></ul></blockquote><p>appeal [ə’pi:l] vi. 呼吁，恳求；申诉 n. 呼吁；申诉；吸引力（ap-&#x3D;ad-去 + -peal-&#x3D;-pel-推。去推动&#x3D;&gt;呼吁）</p><blockquote><p>They’re appealing for clothes and blankets to send to the devastated region.</p><p>他们正在呼吁公众向受灾地区捐献衣物和毛毯 （动词）</p><p>They’re appealing to the court to reduce the sentence to a One.</p><p>他们正向法院提起上诉，要求将判刑改为罚款。（动词）</p><p>They’re launching an appeal to raise money for famine victims.</p><p>他们正在呼吁社会为饥民捐款。（名词）</p><p>The case went to the court of appeal&#x2F;the appeal court.</p><p>案件被提交到上诉法院。（名词）</p><p>Spielberg’s movies have a wide appeal.</p><p>斯皮尔伯格的影片广受欢迎（名词）</p></blockquote><hr><p>pull [pul] v.拉，拖n.拉，拖；拉力，牵引力</p><p>polish [‘pɔliʃ] v. 磨光，擦亮；使优美，润饰 n. 擦光剂，上光蜡（-pol-&#x3D;pull拉 + 动词后缀-ish。反复推拉、磨光）</p><p>polite [pəˈlaɪt] adj. 有礼貌的，客气的；有教养的，文雅的（通polish,精练的）</p><p>ﬁlter [ﬁltə] n. 滤器，滤纸（filt&#x3D;felt毛毡：通pulse,推、打beat。反复击打的制品）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> movie和film的区分</p></li><li><p><input disabled="" type="checkbox"> 用theater记住throne</p></li><li><p><input disabled="" type="checkbox"> motive和motivation的区别，motivation为褒义词。</p></li><li><p><input disabled="" type="checkbox"> mutual和reciprocal的区别，都有相互的意思，但reciprocal更多表示互利互惠</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT47</title>
      <link href="/2022/07/05/English/words/wordsUnit47/"/>
      <url>/2022/07/05/English/words/wordsUnit47/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-47"><a href="#UNIT-47" class="headerlink" title="UNIT 47"></a>UNIT 47</h1><h2 id="commemorate相关"><a href="#commemorate相关" class="headerlink" title="commemorate相关"></a>commemorate相关</h2><p>commemorate [kə’meməreit] vt. 纪念，缅怀（com-共同+-memor-记忆+动词后缀-ate）</p><p>remember [ri’membə] v. 记住；（to）转达问候，代   致意，代 问好（re-再+-mem（b）er-记忆）</p><blockquote><p>Remember me to your parents.</p><p>代我向你的父母问好。</p></blockquote><p>memo [‘meməu] n.(memorandum)备忘录</p><p>memorial [məˈmɔːriəl] n. 纪念物，纪念碑，纪念馆 adj. 记忆的，纪念的（-memor-记忆+名词后缀-ial）</p><p>mourn [mɔːrn] v. 哀悼，忧伤（通-memor-记忆）</p><blockquote><p>He was still mourning his brother’s death.</p><p>他仍然在为哥哥的去世而悲伤。</p><p>She mourned for her lost childhood.</p><p>她为失去的童年而忧伤。</p></blockquote><h2 id="commence相关"><a href="#commence相关" class="headerlink" title="commence相关"></a>commence相关</h2><p>commence [kə’mens] vt. 开始（formal）</p><p>（①助记：com-来+-m-+名词后缀-ence。走来一开始；</p><p>②com-来 + 辅音双写-m- + en-进入 + -(i)c(e)-&#x3D;-it-&#x3D;went走。走入、跨入&#x3D;&gt;开始）</p><blockquote><p>We will commence building work in August of next year.</p><p>我们将于明年8月开始破土动工。</p><p>She commenced her medical career in 1956.</p><p>她于1956年开始行医。</p></blockquote><p>commencement [kəˈmensmənt] n. 开始； 毕业典礼</p><p>exit [‘eksit, ‘eɡzit] n. 出口，通道（ex-向外。走出）</p><p>initial [i’niʃəl] adj. 最初的，开头的n.词首大写字母（in-入+-it-走+形容词后缀-ial。走入的&#x3D;&gt;最初的）</p><p>initiate [ɪˈnɪʃieɪt] vt. 开始，创始，发动；启蒙，使入门；引入（formal）</p><p>initiative [ɪˈnɪʃətɪv] n. 新方案，倡议</p><hr><p>transit [ˈtrænzɪt] n. 运输；经过（trans-穿+-it-走。走过）</p><p>transition [trænˈzɪʃn] n. 转变，变迁，过渡（时期）</p><p>⭐transient [ˈtrænʃnt] adj. 短暂的，转瞬即逝的；临时的，暂住的（formal）</p><blockquote><p>A glass of whisky has only a transient warming effect.</p><p>一杯威士忌只能使人暖和一会儿。</p><p>a city with a large transient population </p><p>有大量流动人口的城市</p></blockquote><p>transistor [træn’sistə] n. 晶体管；晶体管收音机（transfer + resistor。通过电阻器把交流电转换为直流电）</p><hr><p>issue [ˈɪʃuː] n. 问题，争端；（发行物的）一期vt.发出；发行（-is-&#x3D;-it-走 + 辅音双写-s + -ue。走出来的事物&#x3D;&gt;问题、发行物）</p><p>perish [‘periʃ] vi. 丧生；凋谢；毁灭，消亡（formal, literary） （per-从头到尾 + -it-&#x3D;-ish。彻底走了&#x3D;&gt;丧生）</p><p>sudden [‘sʌdən] adj. 出乎意料的，突然的（sud-&#x3D;sub-自下而上 + -d-&#x3D;-it-走 + -en。冒出来的&#x3D;&gt;出乎意料的）</p><hr><p>⭐comedy [‘kɔmidi] n. 喜剧；喜剧性事件（助记：com—-起 + -ed-&#x3D;-it-走 + 名词后缀-y。欢聚）</p><ul><li>comic [‘kɔmik] adj. 喜剧的，滑稽的 n. 连环漫画杂志；喜剧演员</li></ul><p>⭐tragedy [‘trædʒidi] n. 悲剧；惨事，灾难</p><ul><li>tragic [‘trædʒik] adj. 悲剧的，悲惨的</li></ul><hr><h2 id="comment相关"><a href="#comment相关" class="headerlink" title="comment相关"></a>comment相关</h2><p>comment [‘kɔment] n. 评论，意见 v. （on）注释，评论（com-来 + -ment-&#x3D;mind头脑。来发表想法）</p><p>mind [maind] n. 精神，理智，意见，记忆力 v. 注意，介意，反对</p><p>remind [ri’maind] vt.提醒，使想起（re-再次。再进入大脑一提醒）</p><p>mention [‘menʃən] vt.&amp;n. 提及，说起</p><hr><p>mental [‘mentəl] adj. 精神的，思想的，心理的，智力的，脑力的</p><p>physical [‘ﬁzikəl] adj. 物质的；肉体的，身体的；自然科学的，物理的</p><p>physician [ﬁ’ziʃən] n.内科医生</p><p>physics [‘ﬁziks] n. 物理（学）</p><p>physicist [‘ﬁzisist] n. 物理学家</p><p>physiological [,ﬁziə’lɔdʒikəl] adj. 生理学的，生理学上的</p><p>⭐psychological 心理学的</p><p>monitor [‘mɔnitə] n. 班长；监听器，监视器 vt. 监控，监测（-monit-&#x3D;mind提醒+名词后缀-or。提醒、监督别人的人 （物））</p><p>monument [‘mɔnjumənt] n. 纪念碑，纪念馆；遗迹，不朽的业绩（-mon-&#x3D;mind提醒 + 连接字母-u- + 名词后缀-ment。提醒之物）</p><p>summon [‘sʌmən] vt. 召唤；传讯，传唤；鼓起（勇气），振作（精神）</p><p>（sum-&#x3D;sub-自下而上+-mon-&#x3D;mind大脑。①引起大脑注意一召唤；②召唤勇气）</p><blockquote><p>She summoned the waiter.</p><p>她召唤服务员过来。</p><p>She was trying to summon up the courage to leave him.</p><p>当时她试图鼓起勇气离开他。</p></blockquote><hr><p>automatic [,ɔ:tə’mætik] adj. 自动（装置）的；无意识的；n. 自动机械（auto自己 + -mat-&#x3D;mind大脑 + 形容词后缀-ic。 自主思考的）</p><p>automation [,ɔ:tə’meiʃən] n. 自动，自动化，自动操作</p><p>monster [‘mɔnstə] n. 怪物，妖怪，畸形的动植物（-mons(t)-&#x3D;mind提醒 + 名词后缀-er。厄运提醒者）</p><p>demonstrate [‘demənstreit] v. 论证，证实；演示，说明（de-彻底 + monstr提醒 + 动词后缀-ate）</p><blockquote><p>Let me demonstrate to you how this device works.</p><p>我来向你演示一下我们这个设备是怎么操作的。</p><p>The theories were demonstrated to be false.</p><p>这些理论已被证明是错误的。</p></blockquote><h2 id="commerce相关"><a href="#commerce相关" class="headerlink" title="commerce相关"></a>commerce相关</h2><p>commerce [‘kɔmə:s] n. 商业，贸易（com-一起 + -merc(e)-做生意）</p><blockquote><p>the world of commerce and industry 工商界</p></blockquote><p>commercial [kə’mə:ʃəl] adj. 商业的；商务的；可获利的 n. 广告节目</p><p>market [‘mɑ:kit] n. 集市，市场；销路，需求（量）vt. 销售(应该翻译为营销，与销售更贴切的应该是sell)</p><p>supermarket [ˈsuːpərmɑːrkɪt] n. 超级市场</p><p>merchant [‘mə:tʃənt] n. 商人，零售商</p><p>merchandise [‘mə:tʃəndaiz, -dais] n. 商品，货物</p><blockquote><p>a wide selection of merchandise  品种丰富的商品</p></blockquote><p>mercury [‘mə:kjuri] n. 水银，汞（Mercury,罗马神话神使墨丘利，跑得快，同水银）</p><p>mercy [‘mə:si] n. 仁慈，怜悯，宽恕（神通过交换或贸易鼓励人们行善)</p><blockquote><p>The gunmen showed no mercy, killing innocent men and women.</p><p>那些枪手毫无怜悯之心，滥杀无辜男女</p></blockquote><h2 id="common相关"><a href="#common相关" class="headerlink" title="common相关"></a>common相关</h2><p>common [‘kɔmən] adj. 普通的；共同的；一般的; n. 公有地（com-共同+-mon-&#x3D;move移动、交换）</p><p>commonplace [‘kɔmənpleis] adj. 普通的，平庸的 n. 寻常的事物；老生常谈</p><blockquote><p>Computers are now commonplace in primary classrooms.</p><p>计算机如今在小学教室里很普遍（形容词）</p><p>We exchanged commonplaces about the weather over cups of tea.</p><p>我们喝了几杯茶，就天气方面的话题寒暄了几句（名词）</p></blockquote><p>commonwealth [‘kɔmənwelθ] n. 共和国，联邦，共同体</p><blockquote><p>a member of the Commonwealth  英联邦成员国</p></blockquote><p>communicate [kə’mju:nikeit] v. 传达，传送；交流；通讯，通话（com-共同 + -mun-&#x3D;move交换 + 复合动词后缀 -icate。交流信息）</p><p>communication [kəˌmjuːnɪˈkeɪʃn] n. 通讯，传达；（pl.）通讯系统；交通（工具）</p><p>community [kə’mju:niti] n. 同一地区的全体居民，社会，社区；共同体</p><p>communism [‘kɔmjunizəm] n. 共产主义</p><p>immune [i’mju:n] adj. 免疫的；不受影响的（in-不 + -mun(e)-交换。不交换—免疫）</p><blockquote><p>Most people who’ve had chickenpox once are immune to it for the rest of their lives.</p><p>大多数出过水痘的人终生都对此病具有免疫力</p><p>The press had criticized her so often that in the end she had become immune （to it）.</p><p>新闻界如此频繁地批评她，以至于到最后她都（对此）变得无动于衷了</p></blockquote><p>municipal [mju:’nisipəl] adj. 市（立，政）的；地方性的，地方自治的（-mun-公共 + 连接字母-i- + -cip-拿 + 形容词后缀-al。承担公共责任的）</p><blockquote><p>municipal authorities  市政当局</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> transient 转瞬即逝</p></li><li><p><input disabled="" type="checkbox"> comedy和tragedy，反义词</p></li><li><p><input disabled="" type="checkbox"> mental和physical，反义词</p></li><li><p><input disabled="" type="checkbox"> memorial和monument区分，都有纪念碑的意思，但是monument更加正式，一般形容古迹</p></li><li><p><input disabled="" type="checkbox"> immune 免疫，不受影响</p></li><li><p><input disabled="" type="checkbox"> municipal 市政的，承担公共责任的</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT46</title>
      <link href="/2022/06/26/English/words/wordsUnit46/"/>
      <url>/2022/06/26/English/words/wordsUnit46/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-46"><a href="#UNIT-46" class="headerlink" title="UNIT 46"></a>UNIT 46</h1><h2 id="clergy相关"><a href="#clergy相关" class="headerlink" title="clergy相关"></a>clergy相关</h2><p>clergy [‘klə:dʒi] n. [总称]牧师，神职人员（中世纪识字、看圣经的人。scholar学者）<strong>这个词不实用，但是后面的词由它而来</strong></p><p>clerk [klɑ:k, klə:k] n. 职员，办事员；店员</p><h2 id="client相关"><a href="#client相关" class="headerlink" title="client相关"></a>client相关</h2><p>client [‘klaiənt] n. 律师等的当事人，委托人；商店的顾客（早期专指“倾听”律师建议的人）</p><p>lean [li:n] v. 倾斜，屈身；倚，靠，依赖 adj. 瘦的，无脂肪的（①left左一倾斜；②little fat无脂肪）</p><blockquote><p>She leaned forward and whispered something in my ear.</p><p>她俯身过来和我耳语了几句。（动词）</p><p>Lean your head back a little.</p><p>头向后仰一点口（动词）</p><p>He leans heavily on his family.</p><p>他在很大程度上依赖他的家庭。（动词）</p><p>He was tall, lean and handsome.</p><p>他长得瘦高而英俊。（形容词）</p></blockquote><p>incline [in’klain] v. （使）倾斜；（使）倾向于n.斜坡，斜面（in-进入+cline倾斜。倾向于）</p><blockquote><p>I incline to the view that we should take no action at this stage.</p><p>我倾向于认为我们在这个阶段不应采取行动（动词）</p><p>Lack of money inclines many young people towards crime.</p><p>缺钱使很多年轻人产生了犯罪倾向动词）</p><p>a steep&#x2F;gentle incline </p><p>陡坡缓坡（名词）</p></blockquote><p>decline [di’klain] vi. 下降，衰落；拒绝 n. 下降；斜面，倾斜，衰落（de-向下。向下倾斜）</p><blockquote><p>The party’s popularity has declined in the opinion polls.</p><p>民意测验表明该党的支持率已经下滑。（动词）</p><p>He declined&#x2F;refused my offer </p><p>他拒绝了我的提议。（动词）</p><p>a decline in the number of the unemployed </p><p>失业人数的下降（名词）</p><p>industrial decline 工业的衰落（名词）</p></blockquote><p>clinic [‘klinik] n. 诊所（有可以躺下的病床的地方）</p><p>climate [‘klaimit] n. 气候；风气，社会思潮（太阳光倾角不同造成气候不同）</p><p>climax [‘klaimæks] n. 顶点，高潮（逐步上升到顶点）</p><hr><p>ladder [‘lædə] n. 梯子，阶梯(倾斜的，可以爬上去的梯子)</p><p>lid [lid] n. 盖（倾斜&#x3D;&gt;盖。eyelid眼睑）</p><blockquote><p>I can’t get the lid off this jar. 我打不开这广口瓶的盖子。</p></blockquote><p>tilt [tilt] v. （使）倾侧；（使）倾斜 n. 倾侧；倾斜</p><blockquote><p>The front seats of the car tilt.</p><p>汽车的前座可以倾斜。（动词）</p><p>She looked up at him with her head tilted to one side.</p><p>安娜歪着脑袋，抬眼望着他（动词）</p><p>She wore her hat at a tilt.</p><p>她歪戴着帽子。（名词）</p></blockquote><h2 id="cloak相关"><a href="#cloak相关" class="headerlink" title="cloak相关"></a>cloak相关</h2><p>cloak [kləuk] n. 斗蓬，披风；掩饰，幌子 vt. 掩盖，掩饰（中间有洞的圆布。现在多作为掩饰，幌子来使用。）</p><blockquote><p>They left under the cloak of darkness.</p><p>他们在黑暗的掩护下离开了。（名词）</p><p>The restaurant he owned was just a cloak for his drug-dealing activities.</p><p>他开那家餐馆不过是为他从事毒品交易作掩护（名 词）</p><p>The river is often cloaked in mist in the early morning.</p><p>清晨，这条河上常常是雾霭弥漫口（动词）</p></blockquote><p>clock [klɔk] n. 钟 vt. 记录（时间、速度等），为……计时(从上往下看，穿着斗篷的人就像一个表盘)</p><p>clockwise [‘klɔkwaiz] adj.&amp;adv. 顺时针方向</p><blockquote><p>counter-clockwise 逆时针方向</p></blockquote><h2 id="cloth相关"><a href="#cloth相关" class="headerlink" title="cloth相关"></a>cloth相关</h2><p>cloth [klɔθ, klɔ:θ] n. （一块）布，织物，衣料</p><p>clothe [kləuð] vt. （给……）穿衣，供给……衣服</p><p>clothes [kləuðz] n. 衣服（虽为复数，亦不可数）</p><p>clothing [‘kləuðiŋ] n. （总称）服装</p><h2 id="coach相关"><a href="#coach相关" class="headerlink" title="coach相关"></a>coach相关</h2><p>coach [kəutʃ] n. 长途公共汽车；教练 vt. 训练，指导，培训</p><blockquote><p>作为公共汽车，coach表示的是从一个城市到另一个城市这种长途的；而bus是市内短途的公共汽车。</p><p>至于为什么有教练的意思，其实最早这个词是牛津大学的一个俚语：“一个学生跑多远，要看有没有一个教授作为长途公共汽车带着他跑。”</p></blockquote><p>train [trein] n. 列车；行列，系列，一串 v. 训练，培养</p><blockquote><p>The book describes the train of events that led up to the assassination.</p><p>这本书描述了导致暗杀的一连串事件（名词）</p><p>They train dogs to sniff out drugs.</p><p>他们训练狗嗅出毒品。（动词）</p><p>She trained as a pilot.</p><p>她接受过飞行训练。（动词）</p></blockquote><p>training [‘treiniŋ] n. 训练，培养</p><h2 id="cock相关"><a href="#cock相关" class="headerlink" title="cock相关"></a>cock相关</h2><p>cock [kɔk] n. 公鸡，雄鸡；龙头，开关（拟声词，鸡叫）</p><blockquote><p>Cock-a-doodle-doo  公鸡叫，“该起床了！”</p></blockquote><p>chicken [‘tʃikin] n. 鸡肉；鸡，小鸡，小鸟</p><h2 id="collaborate相关"><a href="#collaborate相关" class="headerlink" title="collaborate相关"></a>collaborate相关</h2><p>collaborate [kə’læbəreit] vi. 协作，合作；（与敌人）勾结（col-共同 + labor劳动 + 动词后缀-ate。）</p><blockquote><p>对比cooperate：</p><p>cooperate表示配合</p><p>collaborate表示两人一起努力，共同完成目标。</p></blockquote><p>labor [‘leɪbə(r)] n. （labour）工作，劳动；劳力 v. 劳动，苦干（比work工作强度更高）</p><p>elaborate [i’læbərət, i’læbəreit] v.&amp;adj. 精心制作（的）；详细阐述（的）（e-向外+albor劳动+动词后缀-ate。辛苦做出来）</p><blockquote><p>He said he was resigning but did not elaborate on his reasons.</p><p>他说他准备辞职但未详细说明原因。（动词）</p><p>In his plays he takes simple traditional tales and elaborates them.</p><p>他在剧本里采用了 一些简单的传统故事并进行了发挥。（动 词）</p><p>They’re making the most elaborate preparations for the wedding.</p><p>他们正为婚礼做极为精心周到的准备。（形容词）</p></blockquote><p>lab [læb] n. （laboratory）实验室</p><h2 id="collapse相关"><a href="#collapse相关" class="headerlink" title="collapse相关"></a>collapse相关</h2><p>collapse [kə’læps] vi.&amp;n. 倒塌；崩溃；（价格）暴跌；倒闭，破产（col-共同 + lapse&#x3D;slip&#x3D;slide滑、摔落。全部摔落）</p><blockquote><p>Thousands of buildings collapsed in the earthquake.</p><p>数以千计的建筑物在地震中倒塌了。（动词）</p><p>Lots of people lost their jobs when the property market collapsed.</p><p>房地产市场崩溃后，许多人丢了工作。（动词）</p></blockquote><p>elapse [i’læps] vi. （时间）溜走；（光阴）逝去（e-向外。滑走、溜走）</p><blockquote><p>Many years elapsed before they met again.</p><p>过了许多年他们才再次相见</p></blockquote><p>lapse [læps] n. 失误，流逝，丧失，下降vi.失效；衰退；衰弱</p><blockquote><p>a lapse of concentration </p><p>走神（名词）</p><p>a time lapse&#x2F;a lapse of time</p><p>时间流逝（名词）</p><p>She had allowed her membership to lapse.</p><p>她的会员资格期满终止，没有再续。（动词）</p><p>His concentration lapsed after a few minutes.</p><p>几分钟后他的注意力就下降了 （动词）</p></blockquote><h2 id="colonel相关"><a href="#colonel相关" class="headerlink" title="colonel相关"></a>colonel相关</h2><p>colonel [‘kə:nəl] n. （陆军）上校（通column，列、纵队。管理一个纵队的人）</p><p>column [‘kɔləm] n. 圆柱，柱状物；列；（报刊中的）专栏（-col-&#x3D;hill突出 + -umn）</p><blockquote><p>The roof of the temple was held up by a row of thick stone columns.</p><p>这座寺庙的屋顶由一排粗大的石柱支撑着</p><p>Add the column of figures and divide the sum by three.</p><p>把这列数字相加，再将总数除以3</p><p>She writes a weekly column for the newspaper.</p><p>她在这个报纸上发表每周专栏文章。</p></blockquote><p>hill [hil] n.小山，山岗，高地; [pl.]丘陵（地带）</p><p>excel [ik’sel] vi. 胜过其他；擅长 vt. 胜过，优于（ex-向外 + -cel-&#x3D;hill突出）</p><p>excellent [‘ekselent] adj. 卓越的，极好的</p><p>exile [‘eɡzail, ‘eksail] n. 流放；被流放者；流亡 vt. 流放，放逐，把……充军（ex-向外 +（s）ile&#x3D;soil土壤。离开这片土地）</p><blockquote><p>a place of exile （流放地）</p><p>The king went into exile because of the political situation in his country.</p><p>迫于国内的政治局势，国王流亡国外。（名词）</p><p>The monarch was exiled because of the coup.</p><p>由于发生了政变，国王被迫流亡。（动词）</p></blockquote><h2 id="comfort相关"><a href="#comfort相关" class="headerlink" title="comfort相关"></a>comfort相关</h2><p>comfort [‘kʌmfət] n. 舒适，安逸；安慰，慰问 v. 安慰，使舒适（com-来+-fort-&#x3D;force力量。来给力量&#x3D;&gt;安慰）</p><blockquote><p>They had enough money to live in comfort in their old age.</p><p>他们有足够的钱舒舒服服地安度晚年。（名词）</p><p>I tried to offer a few words of comfort.</p><p>我试图说上几句安慰的话（名词）</p><p>She comforted herself with the thought that it would soon be spring.</p><p>她想到春天很快就要来临，以此来宽慰自己。（动词）</p></blockquote><p>comfortable [‘kʌmfətəbl] adj. 舒适的，舒服的；感到舒适的，安逸的</p><p>cosy [‘kəuzi] adj. 暖和舒服的；舒适的（cozy）（苏格兰方言）</p><blockquote><p>I felt warm and cosy sitting by the fire.</p><p>坐在炉火旁，我感到暖和舒服极了。</p></blockquote><p>force [fɔ:s] n. 力量，力；势力；（pl.）（总称）军队 vt. 强迫</p><p>enforce [in’fɔ:s] vt. 实施，强制执行（en-&#x3D;in-注入。注入力量&#x3D;&gt;强制执行）</p><p>reinforce [,ri:in’fɔ:s] vt. 增援，加强</p><p>eﬀort [‘efət] n. 努力；艰难的尝试；努力的结果（ef-&#x3D;ex-向外。花出去的力量&#x3D;&gt;努力）</p><p>forge [fɔ:dʒ] v. 锻造，<strong>伪造</strong> n. 锻工车间；锻炉（用力量打造）</p><p>ﬁerce [ﬁəs] adj. 凶猛的，残忍的；狂热的，强烈的（助记：有力的&#x3D;&gt;猛烈的）</p><p>fabric [‘fæbrik] n. 织物；织品；结构；构造；建筑物（通forge锻造）</p><p>fabricate [‘fæbrikeit] vt. 捏造，编造（谎言，借口等）；建造，制造</p><blockquote><p>He claimed that the police had fabricated evidence against him.</p><p>他声称警方伪造了对他不利的证据。</p><p>All the tools are fabricated from high quality steel.（所有工具均由精钢制成。</p></blockquote><h2 id="command相关"><a href="#command相关" class="headerlink" title="command相关"></a>command相关</h2><p>command [kə’mɑ:nd; kəˈmænd] n.&amp;v. 命令，指挥，控制 n. 掌握，运用能力（com-来,表强调 + man（d）手。用手指挥）</p><p><strong>command就是命令，没有控制的意思，控制是control。只不过中文中命令和控制有相似的地方。</strong></p><blockquote><p>You will run forward at （&#x3D; when you hear） my command.（听到我的命令你们就向前冲。）（名词）</p><p>The officer commanded his men to shoot.</p><p>军官命令手下的人射击。（动词）</p><p>She has an impressive command of the English language.她精通英语（名词）</p></blockquote><p>commend [kə’mend] vt. 称赞，表扬（formal）（亲手指出&#x3D;&gt;表扬）</p><p>recommend [,rekə’mend] vt. 推荐，介绍；劝告，建议（re-再。再表扬&#x3D;&gt;推荐）</p><p>demand [di’mɑ:nd, -‘mænd] n.&amp;vt. 强烈要求；需要（量）（de-彻底 + -mand-手、命令）</p><hr><p>manage [‘mænidʒ] v. 经营，管理，处理；设法，对付；操纵，运用（用手管理，同handle）</p><p>maneuver [mə’nu:və] n. （manoeuvre）熟练动作；花招，手段，伎俩 v.（熟练）操控；使花招（-man-手 + 连接字母-e- + -uver-&#x3D;-oper-工作。用手工作&#x3D;&gt;操作）</p><blockquote><p>Reversing round a corner is one of the manoeuvres you are required to perform in a driving test.</p><p>驾照考试中的一个规定动作是倒车拐弯。（名词）</p><p>a complex manoeuvre in a game of chess （国际象棋中复杂的应对手段）（名词）</p><p>This car manoeuvres well at high speed.</p><p>这辆汽车高速行驶时操作性能很好。（动词）</p><p>She manoeuvred her way to the top of the company.</p><p>她施展手腕使自己进入了公司最高领导层。（动词）</p></blockquote><p>manipulate [mə’nipjuleit] vt. （常指以不正当手段）操纵，摆布（-man-手 + 连接字母-i- + pul&#x3D;full满的 + 动词后缀-ate。只手握住一熟练使用）</p><blockquote><p>Throughout her career she has very successfully manipulated the media.</p><p>她在整个职业生涯中非常成功地控制了媒体。</p><p>The wheelchair is designed so that it is easy to manipulate.（轮椅设计得很容易用手控制。</p></blockquote><p>manual [‘mænjuəl] adj. 手的，手工做的，体力的 n. 手册，指南（-man-手 + 形容词后缀-ual。手工的）</p><p>manufacture [,mænju’fæktʃə] v. 制造，加工n.制造，制造业（-man-手 + 连接字母-u- + -fact-做 + 名词后缀-ure）</p><p>manifest [‘mænifest] vt. 表明，证明，显示 adj.明显的，显而易见的（formal） （-man-手 + 连接字母-i- + fest&#x3D;fist拳、握。手握拳，摸得着的&#x3D;&gt;明显的）</p><p>maintain [mein’tein] vt. 维持；维修，保养；坚称（-main-手+-tain-延伸。用手维持）</p><blockquote><p>Despite living in different countries, the two families have maintained close links.</p><p>尽管住在不同的国家，两个家庭仍保持着紧密联系。</p><p>The roads in the town have been very poorly maintained.</p><p>城镇的道路保养得很差。</p><p>Throughout his prison sentence, he has always maintained his innocence.</p><p>他在监狱服刑期间一直坚称自己是无辜的。</p></blockquote><p>maintenance [‘meintənəns] n. 维修，保养，维持，保持，生活费用</p><p>manner [‘mænə] n. 方式；举止；（pl.）风度，礼貌；规矩；风俗（举手投足）</p><p>amend [ə’mend] vt. 修改，修订，改进（助记：用手去修）</p><blockquote><p>He asked to see the amended version.</p><p>他要求看修订本</p></blockquote><p>mend [mend] vt. 修理，缝补；改正，改进</p><blockquote><p>Could you mend this hole in my shirt?</p><p>你能把我衬衫上的这个洞补一下吗？</p><p>They tried to mend their differences.</p><p>他们试图消除他们之间的分歧。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> incline和decline区分</p></li><li><p><input disabled="" type="checkbox"> climax</p></li><li><p><input disabled="" type="checkbox"> collaborate对比cooperate</p></li><li><p><input disabled="" type="checkbox"> exile流放</p></li><li><p><input disabled="" type="checkbox"> forge和fabricate在捏造方面的不同</p><p>forge是伪造。fabricate是凭空捏造，虚构。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT45</title>
      <link href="/2022/06/25/English/words/wordsUnit45/"/>
      <url>/2022/06/25/English/words/wordsUnit45/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-45"><a href="#UNIT-45" class="headerlink" title="UNIT 45"></a>UNIT 45</h1><h2 id="Christ相关"><a href="#Christ相关" class="headerlink" title="Christ相关"></a>Christ相关</h2><p>Christ [kraɪst] n. 基督，救世主，耶稣</p><p>Christian [ˈkrɪstʃən] n. 基督教徒 adj. 基督教徒的（Christ基督+名词后缀-ian。信基督的人）</p><p>Christmas [ˈkrɪsməs] n. 圣诞节（Christ基督 + mas弥撒、节日。圣人诞生的节日&#x3D;&gt;圣诞节）</p><p>church [tʃə:tʃ] n. 教堂；教会，教派；（宗教的）礼拜仪式</p><p>cathedral [kə’θi:drəl] n. 大教堂（cat-&#x3D;cata-向下+-hed（r）-&#x3D;sit坐+-al。”有主教座位的。”天主教、东正教主教教堂church of a bishop）</p><p>Catholic [kæθəlɪk] adj. （cat-&#x3D;cata-向下 + -hol-&#x3D;whole完全的 + 形容词后缀-ic。普世的&#x3D;&gt;天主教的）</p><h2 id="chronic相关"><a href="#chronic相关" class="headerlink" title="chronic相关"></a>chronic相关</h2><p>chronic [‘krɔnik] adj. （疾病）慢性的；积习难改的；糟透的；拙劣的（Cronus–希腊神话掌管时间的克洛诺斯）</p><blockquote><p>the country’s chronic unemployment problem</p><p>该国长期存在的失业问题。</p><p>The film was just chronic.</p><p>这部电影简直糟透了。</p></blockquote><h2 id="cite相关"><a href="#cite相关" class="headerlink" title="cite相关"></a>cite相关</h2><p>cite [sait] vt. 引用，引证，举（例）（喊话）</p><p>excite [ik’sait] v. 刺激，使激动；激发，激励（ex-向外。向外喊出来&#x3D;&gt;激动）</p><p>excitement [ik’saitmənt] n. 刺激，激动，兴奋</p><p>exciting [ik’saitiŋ] adj. 令人兴奋的，使人激动的</p><p>⭐recite [ri’sait] v. 背诵，朗诵（re-再。反复呼喊&#x3D;&gt;背诵）</p><blockquote><p>Each child had to recite a poem to the class.</p><p>每个孩子都得在班上背诵一首诗。</p></blockquote><h2 id="city相关"><a href="#city相关" class="headerlink" title="city相关"></a>city相关</h2><p>city [‘siti] n. 城市；都市；市</p><p>citizen [‘sitizən] n. 公民；市民，居民</p><p>civil [‘sivəl] adj. 公民的，市民的；民间的；民用的；有礼貌的</p><blockquote><p>Helicopters are mainly used for military rather than civil use.</p><p>直升机主要用于军事而非民用。</p></blockquote><p>civilian [si’viljən] n. 平民</p><p>civilize [‘sivilaiz] v. （&#x3D;civilise）使文明，开化</p><blockquote><p>School education helped to civilize the people.</p><p>学校教育使人们文明起来。</p></blockquote><p>civilization [,sivilai’zeiʃən] n. （&#x3D;civilisation）文明，文化</p><h2 id="clap相关"><a href="#clap相关" class="headerlink" title="clap相关"></a>clap相关</h2><p>clap [klæp] v. 拍手，拍，轻拍 n. 拍（手），掌声，霹雳声（拟声词：鼓掌的声音）</p><p>clash [klæʃ] n. 冲突；分歧 vi. 冲突；不协调 vt. 使碰撞作声（拟声词：冲撞的声音,clap和crash组合词）</p><blockquote><p>There were violent clashes between the police and demonstrators in the city centre.</p><p>在市中心，警察和示威者之间发生了暴力冲突。（名词）</p><p>a clash of opinions&#x2F;cultures  意见分歧&#x2F;文化差异（名词)</p><p>The two groups clashed outside the stadium.</p><p>两组人在体育场外打了起来。（动词）</p><p>The wallpaper clashes with the carpet.</p><p>墙纸和地毯的色彩不协调。（动词）</p><p>The long blades clashed together.</p><p>长刀碰撞发出了铛铛的声音。</p></blockquote><p>crash [kræʃ] v. 碰撞；撞毁；坠落；崩溃 n.（撞车、坠机）事故，崩溃；爆裂声（拟声词：碰撞、坠毁）</p><blockquote><p>The plane crashed into a mountainside.</p><p>飞机撞到了山坡上。（动词）</p><p> My laptop has crashed again.</p><p>我的笔记本电脑又死机了。（动词）</p><p> a car crash 一起撞车事故（名词）</p><p>They lost a lot of money in the Stock Market crash.</p><p>股市暴跌让他们损失了很多钱。（名词）</p><p>I heard a loud crash in the kitchen.</p><p>我听见厨房里哗啦一声巨响。（名词）</p></blockquote><p>wreck [rek] n. 失事车、船或飞机）vt.（船等）失事，遇难；破坏（助记：wrong弯曲一撞变形一失事）</p><blockquote><p>The burned-out wrecks of two police cars littered the road.</p><p>路上遍布着两辆被烧毁警车的残骸。（名词）</p><p>The ship was wrecked off the coast of France.</p><p>那艘船在法国的沿岸失事。（动词）</p><p>The explosion shattered nearby windows and wrecked two cars.</p><p>爆炸震碎了附近的窗子并毁坏了两辆汽车。（动词）</p></blockquote><p>collide [kə’laid] vi. [with] &#x3D;互撞，碰撞；冲突，抵触（col-&#x3D;come来、共同。互撞）</p><blockquote><p>The two vans collided at the crossroads.</p><p>两辆货车在十字路口相撞。</p><p>They regularly collide over policy decisions.</p><p>他们经常在政策决策上发生冲突。</p></blockquote><p>collision [kə’liʒən] n. 碰撞；（利益，意见等的）冲突，抵触</p><p>crush [krʌʃ] vt. 压坏，压碎；彻底击垮 n. 拥挤的人群；迷恋（拟声词，重力压碎的声音）</p><blockquote><p>The package had been badly crushed in the post.</p><p>包裹在邮寄过程中被压而严重受损。(动词）</p><p>He was crushed by the news of the accident.</p><p>发生事故的消息让他心都碎了。（动词）</p><p>The president called upon the army to help crush the rebellion.</p><p>总统号召军队协助粉碎叛乱。（动词）</p><p>I had to struggle through the crush to get to the door.</p><p>我不得不奋力挤出拥挤的人群来到门口。（名词）</p><p>She has a crush on one of her teachers at school.</p><p>她迷恋上了学校里的一位老师。</p></blockquote><p>smash [smæʃ] v.&amp;n. 打碎（声），粉碎（声）（拟声词，物体稀碎发出的声音）</p><p>squeeze [skwi:z] vt. 挤压；捏 n. 压；捏；削减，拮据（拟声词：挤压湿物体时发出的吧唧声）</p><h2 id="clasp相关"><a href="#clasp相关" class="headerlink" title="clasp相关"></a>clasp相关</h2><p>clasp [klɑ:sp, klæsp] vt. 抱紧；握紧；抓紧；攥紧；扣住 n. 搭环，扣环；紧握；紧抱</p><blockquote><p>He was clasping the vase tightly, terrified of dropping it.</p><p>他紧紧抱住花瓶，生怕把它摔了。（动词）</p><p>She clasped the bracelet around her wrist.</p><p>她把手镯戴上手腕扣牢。（动词）</p><p>the clasp of a necklace&#x2F;handbag </p><p>项链扣环&#x2F;手提包扣环（名词）</p><p>He took her hand in his firm warm clasp.</p><p>他用温暖的手紧紧握住她的手。（名词）</p></blockquote><p> clip [klip] n. 夹子；别针；回形针；（视频）片段 vt. 剪，修剪；夹上，别住（①粘住，通climb,早期指爬的动作，粘在山体上； ②拟声词，剪具剪东西的声音）</p><p>clay [klei] n. 粘土，泥土</p><p>cling [klɪŋ] vi. (to)粘住；依附；坚持</p><blockquote><p>We got so wet that our clothes clung to us.</p><p>我们湿透了，衣服紧紧地贴在身上。</p><p>After her mother’s death, Sara clung to her aunt more than ever.</p><p>萨拉在母亲去世后比以往任何时候都更依附于她的姨妈。</p><p>Throughout the trial she had clung to the belief that he was innocent.</p><p>在整个审判中，她都坚持相信他是清白的。</p></blockquote><hr><p>glue [ɡlu:] n. 胶，胶水 vt. 胶合，粘贴</p><p>clue [klu:] n. 线索，暗示（和真相有粘连的）</p><p>clutch [klʌtʃ] v.（通常指因恐惧、焦虑或痛苦而）紧抓，紧握 n. 离合器（类似于开关，接合或断离动力传递作用）</p><blockquote><p>Silent and pale, she clutched （onto） her mother’s hand.</p><p>她一声不吭，面色苍白，死死抓着母亲的手（动词）</p><p>Put your foot on the clutch.</p><p>把你的脚放在离合器踏板上。（名词）</p></blockquote><p>⭐gear [ɡiə] n. 齿轮，传动装置，挡；装备，衣服 v. （to）调整，使适合（通wear穿&#x3D;&gt;装备、准备）</p><blockquote><p>Does your car have five or six gears?</p><p>你的车是5挡的还是6挡的？（名词）</p><p>Police in riot gear arrived to control the protesters.</p><p>身着防暴衣的警察赶来制服抗议者。（名词）</p><p>The course had been geared towards the specific needs of its members.</p><p>课程已经调整，以满足学员的特别需求。（动词）</p></blockquote><h2 id="class相关"><a href="#class相关" class="headerlink" title="class相关"></a>class相关</h2><p>class [klɑ:s, klæs] n. 班级，年级；种类，等级，阶级；（一节）课</p><p>classmate [‘klɑ:smeit] 同班同学</p><p>mate [meit] n. 伙伴，同事，同伴，配偶 v. 结伴，配对，交配</p><p>classroom [‘klɑ:srum] n. 教室，课堂</p><hr><p>classic [‘klæsik] n. 杰作，名著 adj. 典型的；一流的；不朽的</p><p>classical [‘klæsikəl] adj. 经典的，古典（文学）的</p><p>classify [‘klæsifai] vt. 分类，分等（级）</p><p>classiﬁcation [,klæsiﬁ’keiʃən] n. 分类，分级</p><h2 id="clause相关"><a href="#clause相关" class="headerlink" title="clause相关"></a>clause相关</h2><p>clause [klɔ:z] n. （正式文件或法律文件的）条款；从句，分句（①完整的一条；②一个语法结构完整的句子）</p><p>close [kləuz] v.&amp;n. 关；结束 adj.&amp;adv. 近的（地）；紧密的（地）</p><p>enclose [in’kləuz] vt. 围住，圈起，封入（en-&#x3D;in-在里。关在里面）</p><p>enclosure [in’kləuʒə] n. 围住，圈起，封入，<strong>附件</strong>(当作为邮件附件时)</p><p>disclose [dis’kləuz] v. 公开，公布；透露；揭露（dis-反。不关闭&#x3D;&gt;公开）</p><hr><p>include [in’klu:d] v. 包括，包含，计入（in-在里 + -clud(e)-&#x3D;close关闭）</p><p>inclusive [in’klu:siv] adj. （of）包括的，包含的；范围广的</p><p>exclude [iks’klu:d] vt. 把……排除在外（ex-向外。不包含）</p><p>exclusive [ik’sklu:siv] adj. 独占的；排他的；孤高的；唯一的；高级的</p><hr><p>conclude [kən’klu:d] v. 结束，终止；断定，下结论；缔结，议定（con-全部。完全包含&#x3D;&gt;完结、结论）</p><p>conclusion [kən’klu:ʒən] n. 结论，推论；结尾；缔结，议定</p><p>preclude [pri’klu:d] vt. 排除，阻止，妨碍（pre-在前。提前关闭&#x3D;&gt;阻止）</p><blockquote><p>His contract precludes him from discussing his work with anyone outside the company.</p><p>合同中禁止他与公司外的人谈论工作。</p></blockquote><hr><p>closet [‘klɔzit] n. （壁）橱 adj. 私下的 vt. 把。。。引进密室会谈</p><blockquote><p>water closet 就是我们常说的WC，本意是盛水的容器–马桶</p><p>这个单词的本意是能够关上门的壁橱，壁橱也是比较私人的地方，所以也形容私下的或者是密谈。</p><p>a skeleton in the closet “壁橱里的骨架”–家丑，不能和外人说的丑闻</p></blockquote><p>claw [klɔ:] n. 爪，脚爪（向内收的利爪）</p><p>clumsy [‘klʌmzi] adj. \868.   笨拙的，愚笨的（长成一堆的、凝结的）</p><blockquote><p>The first mobile phones were heavy and clumsy to use, but nowadays they are much easier to handle.</p><p>第一代手机用起来很笨重, 而现在的手机就轻便多了。</p></blockquote><p>cluster [‘klʌstə] n. 丛，群，串 v. 群集，丛生（close,接近的一群）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> recite 背诵，朗诵。（反复呼喊）</li><li><input disabled="" type="checkbox"> clip有两种意思，重点记忆</li><li><input disabled="" type="checkbox"> gear的意思比较多</li><li><input disabled="" type="checkbox"> clumsy 愚笨的笨拙的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT44</title>
      <link href="/2022/06/24/English/words/wordsUnit44/"/>
      <url>/2022/06/24/English/words/wordsUnit44/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-44"><a href="#UNIT-44" class="headerlink" title="UNIT 44"></a>UNIT 44</h1><h2 id="cent相关"><a href="#cent相关" class="headerlink" title="cent相关"></a>cent相关</h2><p>cent [sent] n.分（币）；百（hundred 百）</p><p>centigrade [‘sentigreid] n.&amp;adj.摄氏温度计（的）；百分度（的）</p><p>centimetre [‘sentimi:tə] n. （centimeter） 厘米</p><p>century [ˈsentʃəri] n. 世纪，（一）百年（cent百十名词后缀-ury）</p><p>hundred [‘hʌndrəd] num. 百，一百；[pl.]许多 adj. 一百的；许多（hund&#x3D;cent百 + red&#x3D;reason推理、计算）</p><p>thousand [‘θauzənd] num.&amp;n.&amp;adj. 一千；[pl.]许许多多，成千上万（thou&#x3D;some一些+sand&#x3D;cent百。许多一百）</p><p>percent [pe’sent] n. （per cent）百分之  的（per-每+cent百。一百份的每一份）</p><p>percentage [pə’sentidʒ] n. 百分数，百分率，百分比</p><blockquote><p>A high percentage of the female staff are part-time workers.</p><p>女职员中，兼职工作的人占很高的比例</p></blockquote><p>dozen [‘dʌzən] n. 一打，十二个（do&#x3D;two+zen&#x3D;ten）</p><h2 id="central相关"><a href="#central相关" class="headerlink" title="central相关"></a>central相关</h2><p>central [‘sentrəl] adj. 中心的，中央的，中枢的；主要的</p><p>centre [‘sentə] n. （center）中心，中央，中间 vt. 集中 vi. 以  为中心</p><p>concentrate [‘kɔnsəntreit] v.（on）集中，专心；浓缩 n. 浓缩物（con-来 + -centr-中心 + 动词后缀-ate。到中心来&#x3D;&gt;集中）</p><p>concentration [,kɔnsən’treiʃən] n. 专心，专注；集中，集结；浓度</p><p>focus [‘fəukəs] n. 焦点，（活动，兴趣等的）中心 v. （on）使聚集（foc&#x3D;fire火+名词后缀-us）</p><p>eccentric [ik’sentrik] adj. 古怪的，怪癖的，异乎寻常的 n. 古怪的人（ec-&#x3D;ex-向外 + -centr-中心 + 形容词后缀-ic。远离中心的&#x3D;&gt;古怪的）</p><h2 id="cereal相关"><a href="#cereal相关" class="headerlink" title="cereal相关"></a>cereal相关</h2><p>cereal [‘siəriəl] n. 加工而成的谷类食物；谷类植物，谷物（通grow生长）</p><blockquote><p>cereal crops  谷类作物</p><p>a bowl of cereal  一碗麦片粥</p></blockquote><p>grow [ɡrəu] v. 生长，成长；渐渐变成；栽培，种植；发展</p><p>create [kri’eit] v. 创造，创作；引起，造成，建立</p><p>creative [kri’eitiv] adj. 有创造力的，创造性的</p><p>creature [‘kri:tʃə] n. 人，动物；生物</p><p>recreation [ˌriːkriˈeɪʃn] n.娱乐，消遣（再创造&#x3D;&gt;焕发生机）</p><p>increase [in’kri:s; ‘inkri:s] v.&amp;n. 增加，增长，增进（in-里 + crease&#x3D;create生长。内部生长&#x3D;&gt;增加）</p><p>increasingly [in’kri:siŋli] adv. 不断增加地，日益</p><p>decrease [di’kri:s; ˈdiː.kriːs] v.&amp;n. 减少，变少，降低（de-&#x3D;dis-反）</p><p>⭐concrete [‘kɔnkri:t; kən’kri:t] adj. 具体的，实质性的  n. 混凝土  v. 用混凝土修筑（con-共同 + crete生长。长在一起的&#x3D;&gt;结实的、具体的）</p><p>⭐recruit [ri’kru:t] v. 征募（新兵）n.新成员，新兵（re-再 + cruit&#x3D;grow生长。再栽培）</p><blockquote><p>The police are trying to recruit more black and Asian officers.</p><p>警方正在试图招募更多黑人和亚裔警官（动词）</p><p>attempts to attract new recruits to the nursing profession</p><p>吸引新成员进入护理行业的努力（名词）</p></blockquote><p>crew [kru:] n. 全体船员，全体乘务员（早期指增援部队，后指任何单位的全体人员）</p><h2 id="change相关"><a href="#change相关" class="headerlink" title="change相关"></a>change相关</h2><p>change [tʃeindʒ] n. 改变，变化；零钱v.更换，调换，交换；改变</p><p>exchange [iks’tʃeindʒ] v.&amp;n. （for）交换，兑换；交流，交易；交换台</p><blockquote><p>currency exchange  货币兑换处</p></blockquote><h2 id="⭐chaos相关"><a href="#⭐chaos相关" class="headerlink" title="⭐chaos相关"></a>⭐chaos相关</h2><p>chaos [‘keiɔs] n. 混乱，紊乱（希腊神话混沌之神“卡俄斯”。gape混沌初开）</p><blockquote><p>Heavy snow has caused total chaos on the roads.</p><p>大雪导致道路上交通一片混乱。</p></blockquote><p>chap [tʃæp] n.&amp;v. （皮肤）变粗糙；发痛 n. 家伙（①皮肤裂开；②缩写自chapman做生意的小伙子）</p><blockquote><p>My lips chap in this dry weather.</p><p>天太干，我嘴唇都裂开了。</p></blockquote><p>chop [tʃɔp] vt. 砍，劈，斩 n. 排骨，肉块（砍）</p><blockquote><p>Chop the carrots up into small pieces.</p><p>把胡萝卜切成小块。（动词）</p><p>a lamb&#x2F;pork chop 羊&#x2F;猪排</p></blockquote><ul><li>chopsticks [‘tʃɒpstɪks] n. 筷子</li></ul><p>chip [tʃip] n. 切屑，碎片；（土豆等的）薄片；集成电路块</p><p>cheap [tʃi:p] adj. 便宜的；低劣的，不值钱的（砍价）</p><p>coupon [‘ku:pɔn] n. <strong>优惠券</strong>，证明持券人有某种权利的卡片，票证，赠券（助记：coup&#x3D;chop砍+名词后缀-on。分为券和存根的赠券）</p><p><img src="https://s2.loli.net/2022/06/24/Mlv9HfUJGhksXe7.png" alt="coupon"></p><h2 id="cheek相关"><a href="#cheek相关" class="headerlink" title="cheek相关"></a>cheek相关</h2><p>cheek [tʃi:k] n. 面颊，脸</p><blockquote><p>He embraced her, kissing her on both cheeks.</p><p>他拥抱她，亲吻她的双颊。</p></blockquote><p>choke [tʃəuk] v. 窒息，噎住；闷塞，堵塞，阻塞</p><blockquote><p>She choked to death on a fish bone.</p><p>她被鱼刺卡住后窒息而亡。</p><p>Peanuts can choke a small child.</p><p>花生会噎住小孩</p><p>At lunchtime the streets were choked with traffic.</p><p>午餐时大街上塞车了。</p></blockquote><p>chew [tʃu:] v. 咀嚼</p><p>chin [tʃin] n. 下巴</p><blockquote><p>Chin up! Only two exams left.</p><p>别泄气！只剩下两门考试了。</p><p>这里的chin up是说把下巴抬起来，意喻振作精神</p></blockquote><p>jaw [dʒɔ:] n. 颌，颚</p><p>cheer [tʃiə] v. （使）振奋，（使）高兴 vi.&amp;n. 喝彩，欢呼</p><blockquote><p>Her speech was received with cheers and a standing ovation.</p><p>她的演讲受到了热烈欢呼和起立鼓掌。（名词）</p><p>Everyone cheered as the winners received their medals.</p><p>当优胜者接受奖牌时，大家都欢呼起来。（动词）</p><p>A great cheer went up from the crowd.</p><p>观众爆发出一阵热烈的欢呼声。（名词）</p></blockquote><h2 id="cheque相关"><a href="#cheque相关" class="headerlink" title="cheque相关"></a>cheque相关</h2><p>cheque [tʃek] n. （check）支票（①“将军”一检查；②支票格式形如棋盘）</p><blockquote><p>to write a cheque  开支票</p></blockquote><p>chess [tʃes] n. 棋，国际象棋</p><h2 id="child相关"><a href="#child相关" class="headerlink" title="child相关"></a>child相关</h2><p>child [tʃaild] n.（ [pl.] children）小孩，儿童，儿女</p><p>childhood [‘tʃaildhud] n. 幼年，童年（-hood&#x3D;-had,状态后缀）</p><p>likelihood [‘laiklihud] n. 可能性</p><blockquote><p>There is very little likelihood of that happening.</p><p>几乎没有发生那种事情的可能</p></blockquote><hr><p>like [laik] v. 喜欢  prep. 像；比如  adj. 相像的  n. 像……一样（喜欢&#x3D;&gt;喜欢同类事物&#x3D;&gt;像）</p><p>likely [‘laikli] adj. 很可能的，有希望的 adv. 大概，多半</p><blockquote><p>Tickets are likely to be expensive.</p><p>入场券可能很贵</p></blockquote><p>likewise [‘laikwaiz] adv. 同样地，照样地；又，也，而且（wise&#x3D;way路、方向。相同的方式）</p><blockquote><p>‘Let me know if you ever need any help.’ ‘Likewise.’</p><p>“你要是需要帮助就告诉我。” “你也一样。“</p></blockquote><hr><p>⭐注意对比</p><p>dislike [dis’laik] n.&amp;v. 不喜欢，厌恶（dis-反+动词like）</p><p>unlike [,ʌn’laik] adj. 不同的，不相似的 prep. 不象，和……不同（un-&#x3D;not不 + 形容词like）</p><hr><p>unlikely [,ʌn’laikli] adj. 未必的，靠不住的</p><p>neighbor [‘neibə] n. （neighbour）邻居（neigh&#x3D;near附近+bor&#x3D;be存在、居住）</p><p>neighborhood [‘neibəhud] n. （neighbourhood）邻居；四邻，街道</p><p>booth [bu:ð, bu:θ] n. 电话亭，货摊（通be,短期住处。短暂存在的，可以理解为流动的）</p><h2 id="chill相关"><a href="#chill相关" class="headerlink" title="chill相关"></a>chill相关</h2><p>chill [tʃil] n. 寒冷，寒气，寒战 v. 使寒冷</p><blockquote><p>There’s a chill in the air this morning.</p><p>今天早晨寒气袭人。（名词）</p><p>I’ve put the beer in the fridge to chill.</p><p>我把啤酒放到了冰箱里冰镇一下。（动词）</p></blockquote><p>cool [ku:l] adj. 凉的；冷静的 n. 凉快 adv. 冷静地 v. 使变凉</p><p>cold [kəuld] adj.冷的，寒冷的；冷淡的n.冷，寒冷；伤风</p><h2 id="china相关"><a href="#china相关" class="headerlink" title="china相关"></a>china相关</h2><p>china [ˈtʃaɪnə] n. 瓷器</p><p>porcelain [ˈpɔːrsəlɪn] n. 瓷器 adj. 精制的，瓷器的（porc&#x3D;pork猪肉、小母猪+-el+-ain）</p><p>⭐这个词来自于意大利语，本意是说像小母猪身上的肉一样发光发亮。</p><blockquote><p>The tea cups are made of porcelain.</p><p>茶杯是瓷制的</p></blockquote><p>pork [pɔ:k] n. 猪肉</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> eccentric 古怪的</li><li><input disabled="" type="checkbox"> concrete 混凝土 实质的，具体的</li><li><input disabled="" type="checkbox"> chaos相关的词比较小，也比较杂，多记忆一下</li><li><input disabled="" type="checkbox"> likewise 俺也一样</li><li><input disabled="" type="checkbox"> dislike和unlike对比</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT43</title>
      <link href="/2022/06/23/English/words/wordsUnit43/"/>
      <url>/2022/06/23/English/words/wordsUnit43/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-43"><a href="#UNIT-43" class="headerlink" title="UNIT 43"></a>UNIT 43</h1><h2 id="cancer相关"><a href="#cancer相关" class="headerlink" title="cancer相关"></a>cancer相关</h2><p>cancer n. 癌症（拉丁语“螃蟹”：恶性肿瘤扩散的形状）</p><blockquote><p>Cancer 巨蟹座</p></blockquote><h2 id="candidate相关"><a href="#candidate相关" class="headerlink" title="candidate相关"></a>candidate相关</h2><p>candidate [‘kændideit, -dət] n. 候选人，候补者；报考者（古罗马身着白色长袍的候选人）</p><p>⭐这个词来自：</p><p>candle [‘kændl] n. 蜡烛（白、光亮）</p><h2 id="car相关"><a href="#car相关" class="headerlink" title="car相关"></a>car相关</h2><p>car [kɑ:] n. 汽车，车辆，车；<strong>（火车）车厢</strong>（跑在路上的交通工具）</p><blockquote><p>Several cars went off the rails.</p><p>有几节火车车厢出轨了</p></blockquote><p>carriage [‘kæridʒ] n. （四轮）马车；（火车）客车厢（car跑 + -r- + -i- + 名词后缀-age。交通工具）</p><p>⭐carpenter [‘kɑ:pəntə] n. 木工，木匠（早期指“制作马车的人”，对比Smith铁匠）</p><p>career [kə’riə] n. （个人的）事业；专业，生涯，职业，经历（职场的赛道）</p><p>⭐相似对比</p><blockquote><p>work、job、carrer</p><p>work是要做的事情，不一定有报酬</p><p>job就是赚钱的工作</p><p>carrer是指一个人的职业生涯，是一个比较大的词</p><p>【注意】与carer照顾人相区分</p></blockquote><p>carrier [‘kæriə] n. 搬运人；载体；带菌者</p><blockquote><p>There are an estimated 1.5 million HIV carriers in the country.</p><p>据估计，这个国家有 150万艾滋病毒携带者。</p></blockquote><p>⭐charge [tʃɑ:dʒ] v. 索（价）；控告；充电；赋予职责n. （pl.）费用；指控；电荷；责任（通carry。本意是加上，带上①充钱一要价；② 加罪一控告；③承载一充电；④加在身上一赋予职责）</p><blockquote><p>How much do you charge for a haircut and blow-dry?</p><p>剪发和吹风要收多少钱？（动词：要价）</p><p>She’s been charged with murder.</p><p>她被控谋杀。（动词：控告）</p><p>The shaver can be charged up and used when travelling.</p><p>这种剃须刀可充电供旅行使用。（动词：充电）</p><p>The committee has been charged with the development of sport in the region.</p><p>委员会已被赋予在该地区发展体育运动的职责。（动词：赋予职责）</p><p>Delivery is free of charge.  免费送货。（名词：费用）</p><p>criminal charges 刑事指控（名词：指控）</p><p>He’s in charge of the work here.</p><p>他掌管这里的工作。（名词：责任）</p></blockquote><p>discharge [dis’tʃɑ:dʒ] v.&amp;n. 卸货，排出；发射，放（电）；遣散，解雇（不带）</p><blockquote><p>Large amounts of dangerous waste are discharged daily by the factory.</p><p>这个工厂每天排放大量的危险性废物。（动词：排出）</p><p>He was discharged from the army following his injury.</p><p>他受伤后就退伍了。（动词：解雇）</p><p>Lightning is caused by clouds discharging electricity.</p><p>闪电是由云层放电产生的。（动词：放电）</p><p>a ban on the discharge of toxic waste</p><p>禁止有毒废物的排放（名词：排出）</p></blockquote><p>cargo [‘kɑ:ɡəu] n. 船货，货物（带的东西）</p><p>current [‘kʌrənt] n. 电流，水流；潮流，趋势adj.当前的；流通的（-cur-&#x3D;car跑 + -r- + 形容词后缀-ent。跑着的&#x3D;&gt;流通的）</p><p>currency [‘kərənsi] n. 流传，流通；通货，货币</p><blockquote><p>Many informal expressions are gaining currency in serious newspapers.</p><p>许多非正式表达方法正在为严肃报刊所接受</p><p>foreign currency 外币</p></blockquote><hr><p>course [kɔ:s] n. 课程，教程；过程，进程；路程，路线；一道菜（奔跑的一段路程&#x3D;&gt;做事、学习的流程） </p><blockquote><p><em>training course</em> （训练课）</p><p>Did the scandal have any effect on the course of the election?</p><p>丑闻对选举进程有影响吗？</p><p>The pilot avoided a collision by changing course.</p><p>飞行员改变航向避免了一起碰撞事故。</p><p>a four-course lunch 四道菜的午餐</p></blockquote><p>coarse [kɔ:s] adj. 粗糙的，粗劣的；粗鲁的，粗俗的（通course。路程常规、普通的&#x3D;&gt;粗糙的）</p><p>intercourse [‘intəkɔ:s] n. 交流，交往，交际，【生活中遇到，基本就是这个意思】性交（进入，路）</p><p>discourse [‘diskɔ:s, dis’kɔ:s] n. 论文；演说；谈话；话语（formal） （dis-反、离开 + course 跑。嘴里讲出话&#x3D;&gt;演讲）</p><blockquote><p>He was hoping for some lively political discourse at the meeting.</p><p>他希望在会上听到些生动的政治演讲。</p></blockquote><hr><p>curriculum [ke’rikjulem] n. （pl.curricula）课程，（学校等的）全部课程（-cur-跑 + -ri- + -culum） </p><blockquote><p><em>the school curriculum</em> （学校课程）</p><p>curriculum vitae （CV,个人简历）</p></blockquote><p> occur [ə’kə:] v. 发生，出现；存在；想起，想到（oc-&#x3D;ob-相对、朝+-cur-跑。跑来&#x3D;&gt;发生）</p><blockquote><p>Something unexpected occurred.</p><p>发生了一件出乎意料的事。</p><p>Violence of some type seems to occur in every society.</p><p>每个社会似乎都会存在某种形式的暴力。</p><p>The idea occurred to him in a dream.</p><p>这个主意是他在梦中想到的。</p></blockquote><p>occurrence [ə’kə:rəns, -‘kʌ-] n. 发生，出现；事件，事故，发生的事情</p><p>recur [ri’kə:] v.（尤指不好的事）一再发生；重现（re-再）</p><blockquote><p>If the pain&#x2F;problem recurs, come and see me.</p><p>如果疼痛复发&#x2F;问题再出现，就来找我。</p></blockquote><p>incur [in’kə:] v. 招致，惹起，遭受（in-进入。跑入&#x3D;&gt;招惹）</p><blockquote><p>She had incurred the wrath of her father by marrying without his consent.</p><p>她未经父亲同意就结婚，使父亲震怒。</p><p>The play has incurred the wrath&#x2F;anger of both audiences and critics.</p><p>这部剧引起了观众和评论家的愤怒。</p></blockquote><p>excursion [ik’skə:ʃən] n. （尤指集体）远足；短途旅行（ex-向外 + -cur（s）-跑 + 名词后缀-ion。跑出去）</p><p>corridor [‘kɔridɔ:] n. 走廊，通道（早期防御围墙里的过道）</p><hr><p>haste [heist] n. 匆忙，急速；草率（助记：hurry）</p><p>hasty [‘heisti] adj. 匆忙的，仓促的；草率的</p><p>rush [rʌʃ] v. （使）冲；奔n.冲，急速行进adj.（交通）繁忙的（通course跑）</p><blockquote><p>People rushed to buy shares in the company.</p><p>人们睁着抢购公司的股票。（动词）</p><p>The door blew open, letting in a rush of cold air.</p><p>门被风刮开了，一股冷风疾冲进来。（名词）</p><p>rush hour 交通高峰期（形容词）</p></blockquote><hr><p>horse [hɔ:s] n. 马；跳马，鞍马  v. 骑马</p><p>horsepower [‘hɔ:s,pauə] n. [机]马力（一匹马每秒能够把75千克的水提高1米，即1马力&#x3D;75千克米&#x2F;秒。）</p><h2 id="carbohydrate相关"><a href="#carbohydrate相关" class="headerlink" title="carbohydrate相关"></a>carbohydrate相关</h2><p>carbohydrate [,kɑ:bəu’haidreit] n. 碳水化合物；糖类；（plural）淀粉质或糖类）</p><p>carbon [‘kɑ:bən] n.碳（carb&#x3D;coal煤炭）</p><p>hydrogen [‘haidrədʒən] n. 氢（-hydr-水 + -o- + -gen-生殖。遇氧生成水&#x3D;&gt;氢气)</p><blockquote><p>hydra 海德拉，是希腊神话中的一种<strong>水怪</strong>，是九头蛇，砍掉一个头会长出两个来，被大力神赫拉克勒斯手刃。赫拉克勒斯让它的侄子在自己砍掉海德拉头时，用火把灼烧伤口，就不能再长出头了，用这种方法杀死了hydra。</p><img src="https://s2.loli.net/2022/06/23/6vS4ODPfQYizXkJ.png" alt="hydra" style="zoom: 33%;" /></blockquote><h2 id="category相关"><a href="#category相关" class="headerlink" title="category相关"></a>category相关</h2><p>category [‘kætiɡəri] n. 种类，部属，类目；范畴，类型（cate-&#x3D;cata-向下 + gor&#x3D;gather 聚集 + 名词后缀-y。落在一处&#x3D;&gt;种类）</p><p>segregate [ˈseɡrɪɡeɪt] vt. （尤指基于种族或性别原因）隔离并区别对待；隔离（病患等）（se-分离 + -gre（g）-聚集 + 动词后缀-ate。使分开聚集&#x3D;&gt;隔离）</p><blockquote><p>In the past, blacks were segregated from whites in every area of life in America.</p><p>在过去，在生活中的各方各面，黑人同白人被隔 离开。</p><p>In all our restaurants, smoking and non-smoking areas are segregated from each other.</p><p>在我们所有的餐馆中，吸烟区和非吸烟区都是分开的。</p></blockquote><h2 id="ceiling相关"><a href="#ceiling相关" class="headerlink" title="ceiling相关"></a>ceiling相关</h2><p>ceiling [‘si:liŋ] n. 天花板；（规定价格、工资等的）最高限额（ceil遮盖+-ing）</p><blockquote><p>a large room with a high ceiling</p><p>屋顶很高的大房间</p><p>They have set a ceiling on pay rises.</p><p>他们给工资的增加额度规定了上限。</p></blockquote><p>cell [sel] n.细胞；小房间；蜂房；电池（遮盖住东西的，所有cell词根都表示盖住了什么东西）</p><p>cellar [‘selə] n. 地窑，地下室</p><blockquote><p>They were locked in a cell of the cellar.</p><p>他们被锁在地下室的一个小囚房里。</p></blockquote><p>conceal [kən’si:l] v. 隐藏，隐瞒，隐蔽（con-一起 + ceal遮盖。全都盖上&#x3D;&gt;隐藏）</p><hr><p>hole [həul] n. 洞，孔</p><p>hollow [‘hɔləu] adj. 空的，中空的；空洞的，空虚的 v. 挖空，凿空</p><blockquote><p>The tree trunk was hollow inside.</p><p>这树干里面是空的。（形容词）</p><p>Will their good intentions become realities or are they just hollow promises?</p><p>他们的美好愿望会变成现实吗？或者只是空口诺言？（形容词）</p><p>Hollow out the cake and fill it with cream.</p><p>在蛋糕上挖个洞，填入奶油。</p></blockquote><p>hell [hel] n. 地狱，阴间；苦境，极大痛苦</p><p>hall [hɔ:l] n. 礼堂，会堂，办公大楼，门厅</p><p>helmet [‘helmit] n. 头盔，钢盔</p><h2 id="celebrate相关"><a href="#celebrate相关" class="headerlink" title="celebrate相关"></a>celebrate相关</h2><p> celebrate [‘selibreit] vt. 庆祝；颂扬，赞美 vi.庆祝，过节（celeb（r）&#x3D;crowd人群 + 动词后缀-ate。一群人聚会&#x3D;&gt;庆祝）</p><p>celebrity [si’lebrəti] n. 名人，名流；著名，名声，名望</p><h2 id="cemetery"><a href="#cemetery" class="headerlink" title="cemetery"></a>cemetery</h2><p>cemetery [‘semitəri] n. 坟墓，墓地，坟场（ceme&#x3D;home 家 + -t- + 名词后缀-ery。对比“家”和“冢”）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> car除了表示汽车，还可以表示火车车厢</li><li><input disabled="" type="checkbox"> work、job、carrer对比</li><li><input disabled="" type="checkbox"> charge的本意是“带上，加上”，它的延申意思较多</li><li><input disabled="" type="checkbox"> course和coarse区分：course是形容一段路程，所以有课程，过程的意思，coarse是指这段路程台常规，延申为粗糙的、劣质的意思。</li><li><input disabled="" type="checkbox"> 注意ceiling和cell的拼写</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT42</title>
      <link href="/2022/06/22/English/words/wordsUnit42/"/>
      <url>/2022/06/22/English/words/wordsUnit42/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-42"><a href="#UNIT-42" class="headerlink" title="UNIT 42"></a>UNIT 42</h1><h2 id="bury相关"><a href="#bury相关" class="headerlink" title="bury相关"></a>bury相关</h2><p>bury [‘beri] vt. 埋（葬），安葬；埋藏，遮盖（遮盖）</p><p>hamburger [‘hæmbə:ɡə] n. 汉堡包，牛肉饼（ham火腿 + burg遮盖、堡 + 名词后缀-er）</p><ul><li>ham [hæm] n. 火腿</li></ul><p>burglar [‘bə:ɡlə] n.（入室行窃的）盗贼（burgl&#x3D;burg城堡、室内 + 名词后缀-ar。进入室内的人&#x3D;&gt;盗贼）</p><p>harbor [‘hɑ:bə] n.（harbour）海港；避难所vt.隐匿，窝藏（har&#x3D;arm（y）军队+bor遮盖、保护。军队庇护地&#x3D;&gt;海港）</p><p>pearl [pə:l] n. 珍珠</p><p>funeral [‘fju:nərəl] n. 丧葬，葬礼（助记：funer&#x3D;bury埋葬+-al）</p><h2 id="bush相关"><a href="#bush相关" class="headerlink" title="bush相关"></a>bush相关</h2><p>bush [bʊʃ] n. 灌木（丛）</p><blockquote><p>beat around the bush 拐弯抹角</p><p>猎人追捕的猎物如果跑到灌木丛中，猎人是不会轻易进去追的（因为害怕打草惊蛇），他们会围绕着灌木丛打鼓，直到猎物被吓出来。所以用beat around the bush表示用别的手段达到目的，中文中最贴切的表达应该是“拐弯抹角”。</p><p><img src="https://s2.loli.net/2022/06/22/QXjHGkOCehMFq6R.png" alt="beat around bush"></p></blockquote><p>ambush [ˈæmbʊʃ] n. 埋伏  vt. 埋伏（am-&#x3D;in-在里）</p><blockquote><p>Several passers-by were killed in the ambush.（这次伏击行动造成数名路人死亡。（名词）</p><p>He was ambushed by gunmen on his way to work.（他在上班的路上遭到了持枪歹徒的伏击。（动词）</p></blockquote><h2 id="business相关"><a href="#business相关" class="headerlink" title="business相关"></a>business相关</h2><p>business [‘biznis] n. 商业，生意；事务，业务，职责</p><p>busy [‘bizi] adj. 忙，忙碌的；热闹的，繁忙的；（电话）占线</p><p><strong>fuss [fʌs] n.&amp;vi. 忙乱，大惊小怪</strong></p><blockquote><p>She made such a fuss when he spilled a drop of wine on her skirt!</p><p>他将一滴酒溅在她的裙子上，她好一阵大惊小怪（名词）</p><p>Please, stop fussing - the food’s cooking and there’s nothing more to do until the guests arrive.（别瞎忙活了–饭正做着，客人们来之前没什么要做的了。</p><p>It’s a very ordinary movie — I don’t know what all the fuss is about.（这是部很普通的电影一我不懂为什么就轰动一时。</p></blockquote><h2 id="bypass相关"><a href="#bypass相关" class="headerlink" title="bypass相关"></a>bypass相关</h2><p>bypass [‘baipɑ:s,-pæs] n. （by-pass）旁道；vt. 绕过（by在旁边+pass经过）</p><p>by [bai] prep. 被；凭借；经由；由于 adv. 在近旁；经过</p><p>pass [pɑ:s, pæs] v. 经&amp;通&amp;穿&amp;度过；传递 n. 通行证；考试及格</p><p>passage [ˈpæsɪdʒ] n. 通过，经过；通路，走廊；（一）段落，（一）节（文章的一个过渡、一节）</p><blockquote><p>The government prohibits the passage of foreign troops and planes across its territory.</p><p>该政府禁止外国军队和飞机穿越其领土和领空。</p><p>The bathroom’s on the right at the end of the passage.</p><p>浴室在走廊尽头的右边。</p><p>Several passages from the book were printed in a national newspaper before it was published.</p><p>该书出版前，书中有几段文章被登载在一份全国性的报纸上。</p></blockquote><p>passenger [‘pæsindʒə] n. 乘客，旅客（passing + -er,正在经过的人）</p><p>passer-by [ˌpæsəˈbaɪ] n.（pl. passers-by）过路人（旁边经过的人，已经过路的人）</p><p>past [pɑ:st, pæst] adj. 过去的 adv. 过 n. 过去，昔日 prep.（经）过</p><p>overpass [‘əuvəpɑ:s, -pæs] n. 过街天桥（over-在上。上方的通道）</p><blockquote><p>The city built a pedestrian overpass over the highway.</p><p>城里在交通主干道上方建了 一座过街天桥。</p></blockquote><hr><p>对比</p><p>overtake [,əuvə’teik] v. 追上，超过，突然降临，压倒（占上风，将对方击倒）</p><blockquote><p>Our US sales have now overtaken our sales in Europe.</p><p>我们在美国的销售额现已超过了我们在欧洲的销售额。</p><p>The family was overtaken by tragedy several years ago, and they still haven’t recovered.</p><p>几年前这家人突遭不幸，到现在还没恢复过来。</p></blockquote><p>surpass [sə’pɑ:s, -‘pæs] vt. 超过，胜过 （sur-&#x3D;super上）</p><blockquote><p>He hopes one day to surpass the world record.</p><p>他希望有一天能刷新世界纪录。</p><p>Her cooking was always good, but this time she had surpassed herself.</p><p>她的厨艺向来不错，但这一次她更是胜过以往。</p></blockquote><hr><p>compass [‘kʌmpəs] n. 罗盘，指南针；（pl.）圆规（com-来、强调。测量方式）</p><p>passcode [‘pæskəud] n. 密码</p><p>code [keud] n. 代码，密码；编码；法典</p><blockquote><p>法典从远处看起来密密麻麻的，像代码一样。所以code有法典的意思。其实这个词是和树皮有关系的，但是这样记起来更快。</p></blockquote><p>⭐pace [peis] n. 步，步伐，步调，速度 v. 踱步，用步测</p><blockquote><p>Could you slow down –I can’t keep pace with you.</p><p>能走慢一点儿吗——我跟不上你。（名词）</p><p>I don’t like the pace of modern life.</p><p>我不喜欢现代生活的节奏。（名词）</p><p>He paced the room nervously.</p><p>他紧张地在房间里来回踱步。（动词）</p></blockquote><p>expand [ik’spænd] v.（使）膨胀，（使）扩张；张开，展开（ex-向外 + pand&#x3D;pass步伐。向外迈步&#x3D;&gt;扩张）</p><blockquote><p>反义词：contract 收缩，合同</p></blockquote><p>expansion [ik’spænʃən] n. 扩张，膨胀；张开，伸展</p><h2 id="cabin相关"><a href="#cabin相关" class="headerlink" title="cabin相关"></a>cabin相关</h2><p>cabin [‘kæbin] n. 客舱，机舱；小（木）屋（hut）</p><blockquote><p>hut-hus 是小屋的意思，所以pizza hut（必胜客）直译就是“披萨小屋”。</p><p>house是大屋。</p><p>实际上cabin这个词是由cave来的，飞机机舱有很多小窗户，看起来像一个个小洞，所以cabin就有了客舱，机舱的意思。</p></blockquote><p>cave [keiv] n. 洞，穴</p><p>cage [keidʒ] n. 笼，鸟笼；牢房，监狱 vt. 把……关进笼子；把……囚禁起来（g&#x3D;w&#x3D;v）</p><p>⭐cabinet [‘kæbinit] n. 内阁，内阁会议（想象内阁成员都是一个小屋子里的）；（带玻璃门存物品的）橱柜</p><h2 id="cafe相关"><a href="#cafe相关" class="headerlink" title="cafe相关"></a>cafe相关</h2><p>cafe [ˈkæfeɪ] n. 咖啡馆，（小）餐馆</p><p>coﬀee [‘kɔﬁ] n. 咖啡（色）</p><p>cafeteria [,kæﬁ’tiəriə] n. 自助食堂</p><p>canteen [kæn’ti:n] n. （工厂、办公室等）食堂或小卖部</p><blockquote><p>不觉得这个单词读起来像拼音：餐厅 吗？</p></blockquote><hr><p>补充：通常一个国家最好的东西可以代表他们国家，比如中国是china（瓷器）</p><p>日本Japan 油漆japan</p><p>俄罗斯Russia 皮革russia</p><hr><h2 id="calcium相关"><a href="#calcium相关" class="headerlink" title="calcium相关"></a>calcium相关</h2><p>calcium [‘kælsiəm] n. 钙（化学符号Ca）（calc石灰岩+名词后缀-ium）</p><p>calculate [‘kælkjuleit] v. 计算，推算（calc（ul）石灰岩+动词后缀-ate。石子计数法，古罗马石子算盘）</p><p><img src="https://s2.loli.net/2022/06/22/egowSPM2OEmsY1V.png" alt="abacus"></p><blockquote><p>上图就是古罗马石子算盘，古罗马人用石子做算盘，所以calc这个词根就有了计算的意思。</p></blockquote><p>chalk [tʃɔ:k] n. 粉笔，白垩</p><blockquote><p>a box of colored chalks （一盒彩色粉笔）</p><p>⭐白垩，又称白土粉、白土子，是一种微细的碳酸钙的沉积物，是方解石的变种。粉笔这种材料就是白垩制成的。白垩纪因欧洲西部该年代的地层主要为<a href="https://zh.wikipedia.org/wiki/%E7%99%BD%E5%A0%8A%E5%B2%A9">白垩沉积</a>而得名。</p></blockquote><h2 id="camera相关"><a href="#camera相关" class="headerlink" title="camera相关"></a>camera相关</h2><p>camera [‘kæmərə] n. 照相机，摄影机（用来成像的小暗房）</p><p>⭐comrade [‘kɔmrid; ˈkɑːmræd] n. 同志，同事，同伴，朋友（同住一屋的战友）</p><p>⭐chamber [‘tʃeimbə] n. 房间，室；会议室；议院；（动物体内）腔室</p><blockquote><p>Meetings of the council are held in the council chamber.</p><p>委员会的会议在会议厅举行。</p><p>a torture chamber</p><p>刑讯室</p><p>The human heart has four chambers.</p><p>人的心脏有 4 个心室。</p></blockquote><p>chimney [‘tʃimni] n. 烟囱（早期指furnace）</p><h2 id="camp相关"><a href="#camp相关" class="headerlink" title="camp相关"></a>camp相关</h2><p>camp [kæmp] n. 野营，营地；帐篷，阵营 v.（使）设营，宿营（平地、战场）</p><p>campaign [kæm’pein] n. 战役；运动 vi. 开展运动（①包括一系列战役的战斗，对比battle；②有组织的运动）</p><p>campus [‘kæmpəs] n.（大学）校园</p><p>champion [‘tʃæmpiən] n. 冠军，得胜者；拥护者，斗士（代表军队进行决斗的最佳战士，如大卫和歌利亚）</p><p>champagne [,ʃæm’pein] n. 香槟酒；微黄色（产自法国Champagne郡）</p><h2 id="can相关"><a href="#can相关" class="headerlink" title="can相关"></a>can相关</h2><p>can [强kæn, 弱gkən] aux. v. \665.    能；可以n.罐头；容器vt.把……装罐（①通know,知道可以；②通cane植物的茎口）（讲过）</p><p>canal [kə’næl] n. 运河；（沟）渠（cane芦苇，像芦苇的茎一样）</p><p>cannon [‘kænən] n. 大炮，火炮 （can(e) + 辅音双写-n- + 名词后缀-on。形如大芦苇）</p><hr><p>channel [‘tʃænəl] n. 海峡，水道；信道，波道；路线，途径</p><blockquote><p>the English Channel </p><p>英吉利海峡</p><p>a movie&#x2F;sports channel</p><p>电影&#x2F;体育台</p><p>Complaints must be made through the proper channels.</p><p>投诉必须通过正当途径进行</p></blockquote><p>tunnel [‘tʌnəl] n. 隧道，山洞</p><blockquote><p>a railway tunnel 铁路隧道</p></blockquote><h2 id="cancel相关"><a href="#cancel相关" class="headerlink" title="cancel相关"></a>cancel相关</h2><p>cancel [‘kænsəl] v. 取消；终止，废除（中世纪罗马抄写员笔误打叉xxx,斜方栏杆）（取消无形的东西，比如取消想法）</p><blockquote><p>They had to cancel tomorrow’s game because of the bad weather.</p><p>因为天气太糟，他们不得不取消了明天的比赛</p><p>to cancel a subscription </p><p>终止订阅</p></blockquote><p>chancellor [ˈtʃɑːnsələ(r); ˈtʃænsələr] n. （英）大臣；法官；（德、奥）总理；大学校长（教堂中负责开关栏杆的人&#x3D;&gt; 国王的秘书）</p><p>function [‘fʌŋkʃən] n. 功能，作用；职务；函数vi.起作用（电脑fn键）</p><p>delete [di’li:t] vt. 删除（取消有形的东西）</p><blockquote><p>Your name has been deleted from the list.</p><p>你的名字已从名单上删掉</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> fuss 由busy产生忙乱的意思，又有大惊小怪的意思</p></li><li><p><input disabled="" type="checkbox"> overtake和surpass区分</p></li><li><p><input disabled="" type="checkbox"> cabinet 内阁，橱柜（指一个小空间）</p></li><li><p><input disabled="" type="checkbox"> chalk 粉笔，白垩（就是白色粉笔那种材料）</p></li><li><p><input disabled="" type="checkbox"> comrade 同志（同一个房间里的人）</p></li><li><p><input disabled="" type="checkbox"> cancel和delete的区别</p><p>cancel是取消无形的东西，比如取消想法，不再去做了。</p><p>delete是取消有形的东西，也许理解成删除更好，比如删掉一个文件，丢掉它不再管。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT41</title>
      <link href="/2022/06/21/English/words/wordsUnit41/"/>
      <url>/2022/06/21/English/words/wordsUnit41/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-41"><a href="#UNIT-41" class="headerlink" title="UNIT 41"></a>UNIT 41</h1><h2 id="brand相关"><a href="#brand相关" class="headerlink" title="brand相关"></a>brand相关</h2><p>brand [brænd] n. 商标，标记，牌子 v. 打烙印；丑化（燃烧的做标记的铁块）</p><blockquote><p>Which brand of toothpaste do you use?</p><p>你用什么牌子的牙膏？（名词）</p><p>The brand was still visible on the animal’s hide.</p><p>兽皮上还可以看见烙印。（名词）</p><p>The cattle were rounded up and branded.</p><p>那些牛都被圈了起来打上烙印。（动词）</p><p>They were branded as liars.</p><p>他们被丑化成了骗子。（动词）</p></blockquote><p>⭐之所以有打烙印的意思，是因为这个词由burn演化而来</p><p>burn [bə:n] v. 燃烧，烧着；烧毁；灼伤 n. 烧伤，灼伤（的痕迹）</p><p>brass [brɑ:s, bræs] n. 黄铜，铜器（铜和锡烧出来的金属）</p><p>fry [frai] v. 油煎，油炸；晒伤 n. 薯条</p><blockquote><p><em>fried fish</em>  炸鱼（动词）</p><p>You’ll fry on the beach if you’re not careful.</p><p>如果不小心，在海滩上就会被太阳晒伤。（动词）</p></blockquote><p>breed [bri:d] vi. （动物）交配繁殖；vt.（为育种目的）饲养 n. 品种（孵化的温度）</p><blockquote><p>Most birds breed in the spring.</p><p>大多数鸟在春天繁殖。（动词）</p><p>His main income comes from breeding cattle.</p><p>他的主要收入来自养牛。（动词）</p><p>What’s your favourite breed of dog&#x2F;dog breed?</p><p>你最喜欢哪种狗？（名词）</p></blockquote><p>furnace [‘fə:nis] n. 炉子，熔炉</p><p>warm [wɔ:m] adj. 温暖的，热心的，热情的 v.（使）变暖</p><p>warmth [wɔ:mθ] n. 暖和，温暖；热心，热情</p><p>thermal [‘θə:məl] adj. 热的，热力的；（小规模的）上升气流</p><blockquote><p>thermal energy 热能</p></blockquote><p>thermometer [θə’mɔmitə] n. 温度计</p><h2 id="breath相关"><a href="#breath相关" class="headerlink" title="breath相关"></a>breath相关</h2><p>breath [breθ] n. 呼吸，气息</p><p>breathe [bri:ð] v. 呼吸，吸入</p><p>breeze [bri:z] n.微风；轻而易举的事vi.飘然而行；轻盈而自信地走</p><blockquote><p>A light breeze was blowing.</p><p>轻风习习。（名词）</p><p>It was only a breeze.</p><p>这事不费吹灰之力。（名词）</p><p>She just breezed in and asked me to help.</p><p>她一阵风似的飘然进来，要求我帮她。（动词）</p></blockquote><p>inhale [in’heil] v. 吸入（气体等），吸（烟）</p><blockquote><p>She opened the window and inhaled deeply.</p><p>她打开窗户，深深地吸了口气</p><p>He was treated for the effects of inhaling smoke.</p><p>他因吸入烟尘而接受治疗</p></blockquote><h2 id="brief相关"><a href="#brief相关" class="headerlink" title="brief相关"></a>brief相关</h2><p>brief [bri:f] adj. 简短的，简洁的 v. 简短介绍，简要汇报（abbreviation缩写。abbr.）</p><blockquote><p>The company issued a brief statement about yesterday’s accident.</p><p>那家公司就昨天的事故发表了简短的声明 （形容词）</p><p>We had already been briefed about what the job would entail.</p><p>已经有人向我们介绍了工作内容（动词）</p></blockquote><p>briefcase [‘bri:fkeis] n.手提箱，公事皮包</p><p>short [ʃɔ:t] adj. adj. 短的，矮的；（of）缺乏，不足 n. （pl.）短裤</p><p>⭐short和brief对比</p><p>short只有短的意思。而brief有短、少但是精悍的含义，表示简洁更多一些。</p><h2 id="bright相关"><a href="#bright相关" class="headerlink" title="bright相关"></a>bright相关</h2><p>bright [brait] adj. 明亮的，辉煌的；聪明的；欢快的，美好的</p><p>brilliant [‘briljənt] adj. 光辉的，灿烂的；卓越的，有才华的</p><blockquote><p>The sky was a brilliant, cloudless blue.</p><p>天空晴朗无云，一片蔚蓝。</p><p>The idea was quite brilliant.</p><p>这个想法太高明了。</p></blockquote><p>splendid [‘splendid] adj. 壮丽的，辉煌的；极好的（过时）（-plend-&#x3D;bright 明亮的） </p><h2 id="brook相关"><a href="#brook相关" class="headerlink" title="brook相关"></a>brook相关</h2><p>⭐brook [brʊk] n. 小溪 vt. [常用于否定句]容忍（①助记：break,河流分支；②fruit,吃&#x3D;&gt;消化、容忍）</p><blockquote><p>I could hear the sound of a babbling brook.</p><p>我可以听见小溪潺潺的流水声。（名词）</p><p>The tone in his voice brooked no argument.</p><p>他的声音里透露着一种不容争辩的语调。（动词）</p></blockquote><p>fruit [fru:t] n.水果，果实；成果，效果</p><p>fruitful [‘fru:tful] adj.多产的；果实累累的，富有成效的</p><blockquote><p>a fruitful discussion （富有成效的讨论）</p></blockquote><h2 id="browse相关"><a href="#browse相关" class="headerlink" title="browse相关"></a>browse相关</h2><p>browse [brauz] v. 随意翻阅，浏览；（牛、羊等）吃草（swell早期指植物膨胀、发芽&#x3D;&gt;牛吃草&#x3D;&gt;浏览）</p><blockquote><p>She browsed the shelves for something interesting to read.</p><p>她浏览着书架，想找本有趣的书看</p><p>You are welcome to come in and browse.</p><p>欢迎您光临本店随便看看</p><p>Deer were browsing （on grass） under the trees.</p><p>鹿正在树下悠闲地吃草</p></blockquote><hr><p>⭐下面这两词都表示乳房的意思，但bosom还另有胸怀内心的意思</p><p>breast [brest] n. 胸膛，乳房（swell膨胀的肉）</p><p>bosom [‘buzəm] n. 前胸，胸部，乳房，胸怀；内心；adj. 亲密的，知心的（助记：boss突出的人；bosom凸起的地方）</p><blockquote><p>She held him tightly to her bosom.</p><p>她把他紧紧地拥在胸前。（名词）</p><p>A dark jealousy stirred in his bosom.</p><p>他内心生出一阵恶毒的嫉妒（名词）</p><p><em>bosom friend</em>  亲密好友（形容词）</p></blockquote><hr><p>sprout [spraut] vi. 发芽，抽条 vt. 涌现出 n. 新芽，嫩苗</p><blockquote><p>It takes about three days for the seeds to sprout.</p><p>这些种子大概要3天时间才会发芽。</p><p>The town has sprouted shopping malls, discos and nightclubs in recent years.</p><p>最近几年，城里涌现出不少购物中心、迪斯科舞厅和夜总会。</p></blockquote><hr><p>传播、扩散相关的词汇</p><p>spread [spred] v.&amp;n. 伸开，伸展；散布，传播</p><ul><li>widespread [‘waid’spred] adj. 分布广泛的，普遍的</li></ul><p>scatter [‘skætə] v. 散开，驱散；散布，散播</p><p>shatter [‘ʃætə] v. 粉碎；使疲惫；使震骇</p><p>disperse [dis’pə:s] v.（使）分散；（使）散开；疏散（dis-反 + sparse稀少的）</p><ul><li><p><em>sparse [spɑːrs] adj. 稀疏的；稀少的</em></p><blockquote><p>the sparse population of the islands 那些岛上零星的人口</p></blockquote></li></ul><p>dissipate [‘disipeit] v. 驱散；（使云、雾、疑虑等）消散；挥霍</p><p><strong>spread指散布很大的范围，主要是指范围广，进而引出传播的意思。</strong></p><p><strong>scatter与disperse对比：</strong></p><ul><li><strong>scatter指有目的地散开，并且是主动散开（某物自发散开）</strong></li><li><strong>disperse是被动散开（某物被强行散开）</strong></li></ul><p><strong>shatter指把整体碎裂开，打破。所以用法上会强调使人疲惫，使人震撼，或者让某物碎裂。</strong></p><hr><p>spray [sprei] n. 喷雾，飞沫，浪花，水花 v. 喷，喷射</p><p>sprinkle [‘spriŋkl] vt. vt. 撒，洒；用……点缀；<strong>零星分布</strong> n. 洒，喷，淋<strong>（使零星分布）</strong></p><blockquote><p>She sprinkled sugar over the strawberries.</p><p>她在草莓上撒了点糖（动词）</p><p>His poems are sprinkled with quotations from ancient Greek.</p><p>他的诗歌不时穿插有古希腊引文（动词）</p><p>We’ve only had a few sprinkles （of rain） recently.</p><p>近来我们这里只下过几场小雨（名词）</p></blockquote><p>spark [spa:k] n. 火花，火星 vt. 发火花，发电花；引发（溅出的火花）</p><p>sparkle [‘spɑ:kl] vi. 发火花，闪耀</p><hr><p>spring [spriŋ] n. 春；跳；泉，源泉；弹簧，发条 vi. 跳，跳跃（①植物生长的季节；②膨胀、冒出的水；③跳跃）</p><p>oﬀspring [‘ɔfspriŋ, ‘ɔ:-] n. 子孙，后代；结果，产物</p><h2 id="brush相关"><a href="#brush相关" class="headerlink" title="brush相关"></a>brush相关</h2><p>brush [brʌʃ] n. 刷（子），毛刷；画笔v.刷，擦，弹，拂；掠过（刷子才是主要意思）</p><p> broom [bru:m] n. 扫帚</p><p><img src="https://s2.loli.net/2022/06/21/PBFGEZXgfnlCw3k.png" alt="image-20220621220600959"></p><h2 id="bump相关"><a href="#bump相关" class="headerlink" title="bump相关"></a>bump相关</h2><p>bump [bʌmp] v.（against, into）碰；颠簸着前进 n. 碰撞</p><blockquote><p>I bumped my head on the shelf as I stood up.</p><p>我起身时头撞在了书架上（动词）</p><p>He bumped into a tree in the dark.</p><p>他在黑暗中撞上了一棵树（动词）</p><p>He fell to the ground with a bump.</p><p>他砰地一声摔倒在地上（名词）</p></blockquote><p>pump [pʌmp] n. 泵 vt. 用（泵）抽（水）；打气，泵送</p><p>pipe [paip] n. 管子，导管；烟斗；笛（管子发出的声音）</p><p>dump [dʌmp] vt. 倾倒，倾卸 n. 垃圾场（duang）</p><blockquote><p>He came in with four shopping bags and dumped them on the table.</p><p>他进门后将手里提着的四个购物袋往桌上一扔（动词）</p><p>a rubbish dump  垃圾场（名词）</p></blockquote><ul><li>damp [dæmp] n. 潮湿；沼气 adj. 潮湿的 vt. 使潮湿（助记：扔（dump）垃圾的池子（damp）)</li></ul><hr><p>lump [lʌmp] n. 团，块 v.（使）成团，（使）成块</p><blockquote><p>a lump of coal&#x2F;sugar  一块煤&#x2F;糖（名词）</p><p>You can’t lump all Asian languages together.</p><p>你不能把所有的亚洲语言混为一谈。（动词）</p><p>The decision has been made, so if Tom doesn’t like it, he can lump it.</p><p>已经决定了，所以即便汤姆不愿意，他也只能<strong>接受</strong>了（动词）</p></blockquote><p>⭐like it or lump it 喜欢它，或者接受它</p><p>可以理解为一大块整个吞下去，忍受它。</p><hr><p>pop [pɔp] adj. 流行的【做形容词时是popular的简写，与名词动词无关】 n.（发出）砰的一声 v. 突然出现</p><blockquote><p>I heard a pop and the lights went out.</p><p>我听到砰的一声，灯就灭了。（名词）</p><p>When you open the box, a clown pops out.</p><p>你打开盒子时，一个小丑会弹出来（动词）</p></blockquote><p>zip [zip] v. （用拉链或像拉链那样）合上或打开 n. 拉链，拉锁(拟声，拉链拉上去“嗞”的一声)</p><img src="https://s2.loli.net/2022/06/21/yQaD2RcGzETFh1K.png" alt="zip" style="zoom:67%;" /><p>zoom [zu:m] vi. 快速移动；猛涨；陡升 n. 陡升；疾驰的声音（“嗖”的一声）</p><p>click [klik] n. 滴答声；vi.点击（鼠标）；发出滴答声</p><p>crack [kræk] n. 裂纹，缝隙；破裂声 v.（使）破裂，砸开</p><p>dash [dæʃ] v.&amp;n. 冲，猛冲，突进 n. 破折号</p><blockquote><p>When the doors opened, people dashed for seats. </p><p>门一开，人们便疯狂地朝座位奔去（动词）</p><p>When the doors opened, there was a mad dash for seats. </p><p>门一开，人们便疯狂地朝座位奔去（名词）</p></blockquote><p>ﬂash [ﬂæʃ] n.&amp;adj. 闪光（的）v. 发闪光，闪亮；闪现（物体或火把快速闪过的声音）</p><p>spit [spit] v. 吐（唾沫），吐痰 n.唾液（吐痰的动作）（spat, spat, spitting）</p><p>splash [splæʃ] v. 溅，泼 n. 溅上的液体；飞溅声</p><blockquote><p>Water was splashing from a hole in the roof.</p><p>水从屋顶的洞里泼溅下来（动词）</p><p>She splashed her face with cold water.</p><p>她往脸上撩了些冷水（动词）</p><p>There were several splashes of white paint on the carpet.</p><p>地毯上溅有几点白色的油漆（名词）</p></blockquote><p>tap [tæp] n.&amp;v. 轻打，轻敲；vt. 开发(打开水龙头，”开发“水) n. 塞子；水龙头</p><img src="https://s2.loli.net/2022/06/21/kdpTbWh2J6ltDvM.png" alt="image-20220621223506036" style="zoom: 33%;" /><blockquote><p>I could hear him tapping his fingers on the desk.</p><p>我能听见他用手指轻叩桌子的声音。（动词）</p><p>We need to tap the expertise of the people we already have.</p><p>我们需要利用我们现有人员的专业知识。（动词）</p><p>I gave her a tap on the shoulder and she turned around.</p><p>我轻轻拍 了她的肩一下，她回过头来。（名词）</p><p>Turn the tap on&#x2F;off.</p><p>打开&#x2F;关掉水龙头（名词）</p></blockquote><p>whisper [‘wispə] v. 耳语；私下说，偷偷告诉 n. 耳语；传闻</p><p>whistle [‘wisl] n. 口哨，汽笛；口哨声，汽笛声 v. 吹口哨； 鸣笛</p><p>⭐英语中用”blow the whistle”除了表示吹哨这个动作，还有告密的意思。所以这就是为什么外国人总把有些告密的人叫做吹哨人（Whistleblower）。</p><p>例如几年前比较火的爱德华·斯诺登（棱镜计划），就可以被称作吹哨人。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> short和brief对比</p></li><li><p><input disabled="" type="checkbox"> brook n. 小溪 vt. [常用于否定句]容忍</p></li><li><p><input disabled="" type="checkbox"> breast和bosom对比</p><p>breast乳房</p><p>bosom除了乳房外还有心胸，内心的意思</p></li><li><p><input disabled="" type="checkbox"> lump 除了一团有忍受的意思</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT40</title>
      <link href="/2022/06/20/English/words/wordsUnit40/"/>
      <url>/2022/06/20/English/words/wordsUnit40/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-40"><a href="#UNIT-40" class="headerlink" title="UNIT 40"></a>UNIT 40</h1><h2 id="blueprint相关"><a href="#blueprint相关" class="headerlink" title="blueprint相关"></a>blueprint相关</h2><p>blueprint [‘blu:print] n. 蓝图，设计图，计划（特殊药水描绘出以供复印的图）</p><p><img src="https://s2.loli.net/2022/06/20/M7OdbrhZygHwL3X.jpg" alt="blueprint"></p><p>print [print] n. 印刷，印刷品，字体v.印刷，出版；洗印</p><blockquote><p>The debate is still raging, both in print and online.</p><p>这场争论仍然激烈进行着，无论在报刊还是在网络上。（名词）</p><p>The title is in bold print.</p><p>标题是粗体字。（名词）</p><p>The leaflets will be printed on recycled paper.</p><p>这些传单将用再生纸来印刷。（动词）</p></blockquote><p>press [pres] v. 压；压榨；紧迫，催促n.报刊，通讯社；压榨机</p><blockquote><p>Press the button to start the machine.</p><p>按下按钮，启动机器。（动词）</p><p>The committee pressed him to reveal more information.（委员会敦促他透露更多信息口）（动词）</p><p>The incident has been widely reported in the press.</p><p>报刊广泛报道了此事。（名词）</p><p><em>a garlic press</em> 压蒜器（名词）</p></blockquote><p>pressure [‘preʃə] n. 压，压力</p><p>express [ik’spres] vt. 表达，表示n.快车，快运 adj. 特快的，快速的（ex-向外 + press压。①推出&#x3D;&gt;表达；②（中间不停的）开往指定地点的车&#x3D;&gt;快车）</p><p>expression [ik’spreʃən] n. 表达；表情；声调；腔调；榨出；措词；式；符号</p><p>phrase [freiz] n. 短语，词语，习语</p><p>couch [kautʃ] n. 长沙发；（病人躺的）长榻 vt. 以（某种方式）表达（collocate【co-共同+ l + locate定位。把所有的东西定位】&#x3D;&gt;①安排、摆放；②与……搭配）</p><hr><p>⭐下面这些词要注意区分</p><p>impress [im’pres] v. （on）印，盖印；留下印象，引人注目（im-&#x3D;in-里。印入）</p><p>impression [im’preʃən] n. 印象，感想；盖印，压痕</p><p>impressive [im’presiv] adj. 给人深刻印象的，感人的</p><p>compress [kəm’pres] vt. 压紧，压缩；（把思想、文字等）浓缩（com一起。压在一起&#x3D;&gt;压缩）</p><p><img src="https://s2.loli.net/2022/06/20/af8u5tpx6MzBXwY.jpg" alt="压缩包"></p><hr><p>depress [di’pres] vt. 压抑，降低；使沮丧，压下（de-向下。向下压&#x3D;&gt;压抑）</p><ul><li>depression [dɪˈpreʃn] n. 沮丧；抑郁症；不景气</li></ul><p>suppress [sə’pres] vt. 镇压，压制；抑制（sup-在下。自上而下镇压）</p><blockquote><p>The rebellion was brutally suppressed.</p><p>起义遭到了残酷的镇压。</p><p>The virus suppresses the body’s immune system.</p><p>这种病毒会抑制人体的免疫系统。</p></blockquote><p>repress [rɪˈpres] vt. 压制，克制（尤指感情）（re-回、反。压回）</p><ul><li>repression [ri’preʃən] n. 压制，镇压</li></ul><p>oppress [ə’pres] v. 压迫，压制；使……感到窒息（op-相对。对抗）</p><p>⭐区分：</p><ul><li>depress指心情压抑</li><li>suppress指从上往下施压-压制。</li><li>repress和express成反义词，表示不表达自己，压制自己的情感。</li><li>oppress指的是在对面的、铺面而来的压迫感</li></ul><hr><p>threat [θret] n. 恐吓，威胁；坏兆头，危险迹象（press给予压力&#x3D;&gt;威胁）</p><p>threaten [‘θretən] vt. 恐吓，威胁；有……危险，快要来临</p><hr><p>intrude [in’tru:d] vi. 闯入，侵入（in-进入 + trude&#x3D;press推。强加）</p><blockquote><p>I’m sorry to intrude, but I need to talk to someone.</p><p>对不起打扰了，不过我得找人有话要说。</p></blockquote><p>thrust [θrʌst] vt. 插入；猛推 vi.刺，戳，冲 n.猛推；刺；戳；插；推力（thrust, thrust）</p><h2 id="bore相关"><a href="#bore相关" class="headerlink" title="bore相关"></a>bore相关</h2><p>bore [bɔ:] v. v.钻（孔），挖（洞）；烦扰n.讨厌的人，麻烦事（持续一个动作&#x3D;&gt;无聊）</p><h2 id="body相关"><a href="#body相关" class="headerlink" title="body相关"></a>body相关</h2><p>body [‘bɔdi] n. 身体，本体；主体；尸体；物体；（一）群，批，堆</p><p>embody [im’bɔdi] vt. vt.具体表达，使具体化；包含，收录（in-进入+body躯体&#x3D;&gt;形象化）</p><blockquote><p>She embodied good sportsmanship on the playing field.</p><p>在运动场上，她展现了优秀运动员的风采。</p><p>the principles embodied in the Declaration of Human Rights.</p><p>体现在《人权宣言》中的原则。</p></blockquote><p>⭐sportsmanship&#x3D;&gt;ship并不是船而是shape形状，意为形象、轮廓</p><p>nobody [‘nəubədi, -bɔdi] pron. 谁也不，无人 n. 小人物</p><p>somebody [ˈsʌmbədi] pron. 某人，有人 n. 重要人物</p><p>some [sʌm,弱 səm, sm] adj. 几个；一些；有些；某（人或物）pron. 一些</p><blockquote><p>some从same而来，表示相同的</p></blockquote><p>someone [ˈsʌmwʌn] pron. 某人（&#x3D;somebody）</p><p>something [‘sʌmθiŋ] pron. 某事，某物；被视为有意义的事物</p><p>somehow [‘sʌmhau] adv. 以某种方式，用某种方法；不知怎么地</p><blockquote><p>It won’t be easy, but we’ll get across the river somehow.</p><p>过河不是件容易的事，但我们总会有办法的。</p><p>I know what we’re doing is legal, but somehow it doesn’t feel right.</p><p>我知道我们正在做的事情是合法的，但不知什么原因总觉得不对劲。</p></blockquote><h2 id="boycott相关"><a href="#boycott相关" class="headerlink" title="boycott相关"></a>boycott相关</h2><p>boycott [‘bɔi kɔt] n.&amp;vt. （联合）抵制，拒绝参与（中文音译：杯葛）</p><p>⭐词源：</p><p>19世纪的时候有个土地商人，这家伙就叫Charles Boycott，他拒绝接受英格兰土地联盟的“三F”口号，不售出自己手中的土地给农民，因而被（农民）联合抵制。他的名字也成了联合抵制的意思。具体可以看下面的图片</p><p><img src="https://s2.loli.net/2022/06/20/8fJZWUNSFandvmc.png" alt="boycott"></p><blockquote><p>We are asking people to boycott goods from companies that use child labour.</p><p>我们正呼吁大家抵制雇用童工的公司的产品。</p><p>a trade boycott of British goods</p><p>对英国货品的贸易抵制</p></blockquote><h2 id="brace相关"><a href="#brace相关" class="headerlink" title="brace相关"></a>brace相关</h2><p>brace [breis] vt. 加固；支撑；使（手，足，肩等）绷紧 n. 托架（法语：早期战场防护胳膊的盔甲）</p><p>embrace [im’breis] v.拥抱；欣然接受（em-&#x3D;in-在里+brace胳膊。在胳膊里&#x3D;&gt;拥抱）</p><p>bracket [‘brækit] n. （方）括号</p><h2 id="brake相关"><a href="#brake相关" class="headerlink" title="brake相关"></a>brake相关</h2><p>brake [breik] vi.&amp;n.制动（器），闸，刹车（打断运动的装置）</p><p>break [breik] vt.&amp;vi. 打破；中止；违反 vi. 破（裂）n. 休息时间</p><p>⭐breakdown [‘breikdaun] n. 崩溃；衰竭；（关系、计划或讨论等的）中断</p><blockquote><p>a breakdown in communications 通信中断</p><p>the breakdown of law and order 治安陷入瘫痪</p></blockquote><p>⭐outbreak [‘autbreik] n. （战争，愤怒，火灾等的）爆发，（疾病的）发作</p><p>brick [brik] n.砖块，砖；v.用砖围砌，用砖填补（小碎石头）</p><p>branch [brɑ:ntʃ, bræntʃ] n. （树）条，分支；分店；（学科）分科，部门；支流</p><hr><p>aﬃliate [ə’ﬁlieit] vt. 使隶属（或附属）于 n. 附属机构，分公司（af-&#x3D;ad-去 + -fil(i)-&#x3D;be存在、子女+动词后缀-ate。作为下属）</p><p>⭐-fil(i)-&#x3D;be存在、子女 的延申</p><p>filial 子女</p><p>piety 虔诚</p><p>filial piety 孝道（子女的虔诚）</p><blockquote><p>The hospital is aﬃliated with the local university. </p><p>这家医院附属于当地大学</p><p>Our college is an aﬃliate of the university. </p><p>我们学院隶属于这所大学</p></blockquote><hr><p>reach [bri:tʃ] n. 违反，不履行；破裂 vt. 冲破，攻破</p><blockquote><p>He was sued for breach of contract.</p><p>他因为违反合同而被起诉。（名词）</p><p>They breached the agreement they had made with their employer.</p><p>他们违反了 曾与雇主达成的协议。（动词）</p></blockquote><p>bruise [bru:z] n. 青肿，挫伤；伤痕 vt. 打青；挫伤</p><p>burst [bə:st] v. 爆裂，炸破；突然发生 n. 突然破裂，爆发</p><hr><p>brim [brim] n.（容器）边缘，帽沿</p><p>rim [rim] n.（圆物的）边，边缘；（眼镜）框</p><p>fringe [frindʒ] n. 边缘；（窗帘）缘饰；额前垂发 vt. 饰……的边（ornamental bordering装饰物边缘）</p><blockquote><p>a fringe around the edge of a tablecloth</p><p>桌布边缘的流苏（名词）</p><p><em>a short fringe</em> </p><p>短刘海儿（名词）</p><p>The river is fringed with wild flowers.</p><p>河两岸长满了野花（动词）</p></blockquote><p>verge [və:dʒ] n. 边，边缘 v.濒临（-vers- 转&#x3D;&gt;转折点）</p><p><em>对比复习：</em></p><p>edge [ed3] n.边，棱；刀口，刃v.侧身移动，挤进（通egg动词：刺激、怂恿）</p><hr><p>fragile [‘frædʒail; ˈfrædʒl] adj. 易碎的，脆的，易损坏的；虚弱的，脆弱的（-frag-&#x3D;break打破 + 形容词后缀-ile）</p><p>brittle [‘britl] adj. 易碎的；脆弱的；（声音）尖利的，冷淡的</p><p>fragment [‘fræɡmənt] n. 碎片，小部分，片断</p><p>fraction [‘frækʃən] n. 磨擦，摩擦力（打破、阻止运动）</p><p>【医】fracture [‘fræktʃə] n. 裂缝（痕）；骨折v.（使）断裂，（使）折断（生活中见到就是表示骨折）</p><blockquote><p>He suffered multiple fractures in a motorcycle accident.</p><p>他在一起摩托车事故中多处骨折。（名词）</p><p>She fractured her skull in the accident.</p><p>她在事故中颅骨骨折。（动词）</p><p>Two of her ribs fractured when she was thrown from her horse.</p><p>她从马上摔下来，折断 了两根肋骨。（动词）</p></blockquote><p>fragrant [‘freigrent] adj. 香的；芬芳的（break wind）</p><hr><p>bread [bred] n. 面包（面包中的“一块”）</p><p>bride [braid] n. 新娘（家里做面包的人。新郎groom,通grow）</p><p>bribe [braib] n. 贿赂 vt. 向……行贿，买通（小偷给乞丐面包吃）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> depress,suppress,repress区分</li><li><input disabled="" type="checkbox"> boycott词源</li><li><input disabled="" type="checkbox"> fraction和fracture区分</li><li><input disabled="" type="checkbox"> brim,rim,fringe,verge区分</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享我用的英语学习资料</title>
      <link href="/2022/06/13/resources/englishiResources/"/>
      <url>/2022/06/13/resources/englishiResources/</url>
      
        <content type="html"><![CDATA[<ul><li>单词篇</li></ul><p>根据词源词根记忆单词，涵盖了考研5500必备词汇，干货满满。</p><p>「杨亮亮解单词英语学习必备5500词」<a href="https://www.aliyundrive.com/s/TCALXP441Pi">https://www.aliyundrive.com/s/TCALXP441Pi</a> </p><p>提取码: 关注微信公众号“恒星同学的铺子”，发送关键字“单词”获得提取码</p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT14</title>
      <link href="/2022/05/05/English/words/wordsUnit14/"/>
      <url>/2022/05/05/English/words/wordsUnit14/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-14"><a href="#UNIT-14" class="headerlink" title="UNIT 14"></a>UNIT 14</h1><ol start="104"><li><p>advocate n.辩护者，拥护者 拥护，提倡</p><p>（ad-去 + -voc-说 + v.后缀-ate。去说–&gt;提倡）</p><blockquote><p>He advocates the return of capital punishment.</p><p>他提倡重启死刑。</p></blockquote><p>voice n.声音；意见，发言权</p><p>vocal adj.声音的；歌唱的 n.声乐作品，演唱部分</p><p>vocabulary n.词汇，词汇量；词汇表（指的是你能说多少话–&gt; 词汇量）</p><p>vocation n.职业；召唤；天命；才能（上天的召唤）</p><hr><p>拓展词汇</p><p>vocational adj.职业的，行业的</p><blockquote><p> Vocational College 职业学校（专修某种技能的）</p></blockquote><hr><p>evoke vt.唤起（回忆、感情等）；引起</p><p>（e-向外 + vok&#x3D;voc说话 + e。唤出)</p><p>provoke vt.挑动；激发；招惹</p><p>（pro-向前。站在前面叫嚣）</p><p>vowel n.元音，元音字母</p><hr><p>拓展词汇</p><p>consonant n.辅音；辅音字母</p><hr><p>vote n.投票，表决（早期指向神起誓，后指投票）</p><p>veto n.否决权 vt.否决（助记：不投票）</p><p><strong>这两个可以对比着记忆</strong></p><p>poll n.民意测验；(pl.)政治选举 v.获得。。。选票</p><p>（①古英语中表示：人头–&gt;民意测验<strong>②助记：pull拉–&gt;拉选票</strong>）</p><blockquote><p>poll tax 人头税</p></blockquote><p>devote v.(to)奉献，致力</p><p>(de-彻底 + vot说 + e。发下宏愿)</p></li><li><p>aerial adj.（在或来自）空中的，航空的 n.天线</p><p>（aer&#x3D;air空气 + adj后缀-ial）</p><p>air n.空气 vt.（使）通风；晾干</p><p>aeroplane n.（airplane）飞机</p><p>soar vi.高飞，翱翔；飞涨；高耸</p><p>（s&#x3D;ex向外、向上 + oar&#x3D;air空中。飞上高空)</p><p>artery n.动脉；干线，要道</p><p>（ar&#x3D;air + t + ery。“气管”–&gt;人死后没有血液的动脉）</p></li><li><p>affair n.事务；事情；事</p><p>（af-&#x3D;ad-去 + fair&#x3D;fact做。去做的事–&gt;事务）</p><p>fact n.事实，实际（做了的事）</p><p>factor n.因素，要素（做事情的必要条件）</p><p>factory n.工厂（做事情的地方）</p><p>faculty n.才能；官能；学院，系</p><p>（①做事能力；②某方面突出的做事能力–&gt;大学的系）</p><p>facility n.设备，设施；天资，才能</p><p>（facil(e)容易做的 + ity。简化做事难度的工具）</p><p>facilitate v.使变得（更）容易；使便利</p><p>affect vt.影响；（疾病）侵袭；感动</p><p>（af-&#x3D;ad-去 + fect做。去做–&gt;影响）</p><p>affection n.爱，喜爱；爱慕之情；感情（对你有影响的人你才会喜欢）</p><p>effect n.结果；效果 vt.招致；达到</p><p>effective adj.有效的，生效的</p><p>efficient adj.有效的，效率高的；有能力的（突出效率高）</p><p>effciency n.效率；功效</p><p>defect n.缺点；瑕疵</p><p>（de-&#x3D;dis-相反。没有做好–&gt;过失）</p><blockquote><p>She suffers from a sight&#x2F;speech defect.</p><p>她深受视觉&#x2F;语言缺陷的折磨。</p></blockquote><p>deficit n.赤字，逆差；亏损</p><p>deficiency n.缺乏，不足</p><p>proficiency n.(in)熟练，精通(pro-向前。向前做–&gt;做好–&gt;熟练)</p><p>profit n.利润 v.(bu,from)得利，获利</p><p>profitable adj.有利可图的</p><p>improve v.改善，改进</p><p>（im-&#x3D;in-进入 + -prov-&#x3D;profit做好 + e。进入做好的局面–&gt;改善）</p><p>improvement n.改进，进步</p><p>benefit n.利益，好处 v.有益于</p><p>beneficial adj.(to)有利的</p><p>bonus n.奖金，红利</p><p>infect vt.传染，感染</p><p>（in-进入。进入并起作用）</p><p>infectious adj.传染的，传染性的</p><p>perfect adj.完善的；完全的 <strong>v.使完美</strong></p><p>perfection n.完美</p><p>suffice v.充足，足够 vt.（食物等）使。。满足</p><p>（suf&#x3D;sub自下而上。下方源源不断做出来–&gt;充足）</p><p>sufficient adj.足够的，充分的(比enough拘谨、正式)</p><p>sacrifice n.牺牲，祭品 v.牺牲，献出</p><p>（sacred + fic + e。神圣的做法）</p><p>sacred adj.神圣的；宗教的；庄严的</p><p>saint n.圣人，基督教徒；(S-或St. 用于人、地名前)圣</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> 区分vacation和vocation</p></li><li><p><input disabled="" type="checkbox"> 区分affect和effect</p></li><li><p><input disabled="" type="checkbox"> deficit和profit是反义词</p></li><li><p><input disabled="" type="checkbox"> deficiency和proficiency是反义词</p></li><li><p><input disabled="" type="checkbox"> 区分profit和benefit</p><blockquote><p>profit是挣钱的利润，benefit是好处，不单单指钱</p></blockquote></li><li><p><input disabled="" type="checkbox"> 区分defect和deficit、defeat</p><blockquote><p>defect （没有做好）缺点、瑕疵<br>deficit赤字、亏损<br>defeat（使（对方）做不到、没有功绩）失败</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT13</title>
      <link href="/2022/05/04/English/words/wordsUnit13/"/>
      <url>/2022/05/04/English/words/wordsUnit13/</url>
      
        <content type="html"><![CDATA[<h1 id="unit-13"><a href="#unit-13" class="headerlink" title="unit 13"></a>unit 13</h1><ol start="99"><li><p>adverse adj.不利的，有害的</p><p>（ad-去 + -vers-转 + e。转过去的）</p></li><li><p>advertise vt.公告，公布；为。。。做广告 vi.登广告</p><p>（ad-去 + vert-转 + 动词后缀-ise。去转移大家的注意力–&gt;广告）</p><p>versus prep.(vs)。。。对。。。（在诉讼、比赛中）</p><blockquote><p>A versus B.A对战B。</p></blockquote><p>anniversary n.周年，周年纪念日（-ann-年 + -i- + -vers-转 + n.后缀-ary。一年又转到这一天–&gt;周年）</p><p>annual adj.每年的，一年生的 n.年刊；一年生植物</p><p>convert v.转换，变换；改变（信仰）;兑换（钱）</p><p>（con-共同 + -vert-转。完全转换）</p><p>conversion n.转换；信仰的改变</p><p>conversely adv.相反地，反过来</p><blockquote><p>You can add the fluid to the powder, or, conversely, the powder to the fluid.</p><p>你可以把液体放入粉末中，反过来，也可以把粉末放入液体中。</p></blockquote><p>conversation n.会话，谈话(互换思想的谈话)</p><p>avert v.防止，避免；转移（目光、注意力等）</p><p>（a-&#x3D;ab-离开 + -vert-转。转开、躲开）</p><p>divert vt.使转向，使改道；转移（注意力）；使娱乐</p><p>（di&#x3D;dis-反方向。①使转向；②从工作中转移注意力–&gt;使娱乐）</p><p>diverse adj.多种多样的，不同的（在一个圆圈上各个方向，四面八方的。各种各样的）</p><p><img src="https://s2.loli.net/2022/05/04/sAODGoRivPky3Uh.png" alt="image-20220504200950685"></p><p>diversion n.转向，转移；解闷；娱乐；牵制</p><p>divorce v.&amp;n.离婚，分离</p><p>invert v.倒置，倒转，颠倒（in-里。里外或上下颠倒）</p><blockquote><p>Invert the bowl onto a plate.</p><p>把碗倒扣在盘子上。</p></blockquote><p>inverse adj.相反的，倒转的，反转的 n.相反之物</p><blockquote><p>A person wealth is often in inverse proportion to their happiness.</p><p>一个人的财富通常和他们的幸福是成反比的。<br>proportion 比例</p></blockquote><p>reverse n.相反；背面 v.颠倒，倒转（re-回。前后或左右颠倒）</p><p>versatile adj.通用的；多才多艺的，多方面的</p><p>（-vers-转 + -atile。可以转向不同角度的，多面手的）</p><blockquote><p>He is a very versatile actor.</p><p>他是一个非常多才多艺的演员。</p></blockquote><p>version n.版本；译本，译文；说法（转变语言）</p><p>verse n.韵文，诗；诗节（暗喻：写韵文如同耕作，从一行转到另一行）</p><hr><p>poem n.诗（pile堆，高高堆起的一行行文字）</p><p>poet n. 诗人</p><p>poetry n. 诗歌</p><p>prose n.散文 adj.散文的（pro-向前 + -(ver)se。直接转向前–&gt;散文）</p><p>wrap v.裹，缠，卷 n.披肩，围巾（同-vers-。卷起来）</p><p>develop v.发展，开发；显现，显影；发育，生长</p><p>（de-&#x3D;dis-反 + -velop-&#x3D;warp卷。摊开–&gt;发展。&#x3D;&#x3D;显现，就是从某个角落展开，变得显眼&#x3D;&#x3D;）</p><blockquote><p>I had the film developed yesterday.</p><p>我昨天把胶片洗了出来。（让胶片显影）</p><p>film本身是胶片的意思，有电影的意思是因为早期的电影是用胶片放映的。</p></blockquote><p>envelope n.信封，信皮；封套</p><p>（en- 进入 + -velop-卷 + e。卷入其中–&gt; 信封）</p><p>worm n.虫，蠕虫(卷起来的虫子)</p><p>wreath n.花环，花圈</p><p>wrench v.猛拧；猛拉；挣脱；扭伤 n.扳手；痛苦，难受（面目扭曲）</p><p>wrinkle n.皱纹 v.起皱，皱眉</p><blockquote><p>Years may wrinkle the skin,but to give up enthusiasm wrinkle the soul.</p><p>岁月悠悠，衰微只及肌肤；而热忱抛却，颓唐必至灵魂。</p><p>岁月可能会让皮肤起皱，但放弃我们的热情，会让灵魂起皱。</p><p>enthusiasm 热情；热忱</p></blockquote><p>wrist n. 腕，腕关节</p><p>wrong adj.错的 adv.错误地 n.错误 v.委屈</p></li><li><p>advice n.劝告，忠告，(医生等的)意见（ad-去 + -vic-&#x3D;-vis-看 + e。去给看法）</p><p>advise vt.忠告，劝告；通知，告知</p></li><li><p>advisable adj.可取的，适当的，明智的</p><p>vision n. 视力，视觉；远见，洞察力；幻想，幻影；想象力</p><p>visible adj.看得见的，明显的，显著的</p><p>invisible adj.看不见的，无形的</p><p>visual adj.看的，看得见的；视觉的</p><blockquote><p>visual effect 视觉特效</p></blockquote><p>visa n.（护照等的）签证；维萨信用卡 vt.签证（看过的、验证过的文件）</p><p>envisage v.想象，设想，展望，正视(最常见的意思)</p><p>（en-里 + vis-&#x3D;face(look) + age。look in the face of 直视）</p><p>revise v.修订，校订；修正，修改</p><p>（re- 再 + vis-看 + -e。再看–&gt;校订)</p><p>supervise v.管理，监督</p><p>video n.视频 adj.电视的视频的</p><p>（vid&#x3D;vis看。对应audio音频）</p><p>evidence n.明显；显著；证据；迹象</p><p>evident adj.明显的，明白的</p><p>provide v.供应，供给</p><p>（pro- 向前 + vid看 + e。看到前方的需求所做的准备–&gt;供应、预防）</p><p>provided conj.倘若，只要，假如（假设你给我了）</p><p>provision n.供应；预备；条款（法律提供的）；(pl.)给养</p><p>prudent adj.谨慎的，稳健的</p><p>（pru-&#x3D;pro-向前 + -ud&#x3D;-vid-看 + ent。有前瞻性的–&gt;谨慎的）</p><p>view n.视野；风景；观察；见解 vt.观察；认为</p><p>scene n.景色，景象</p><p>（通shade覆盖，早期指搭台唱戏的棚子。局部）</p><p>scenery n.风景，舞台布景（整体）</p><p>interview v.&amp;n. 接见，会见；采访；面试</p><p>review v.回顾，复习 n.回顾，复习；评论</p><p>envy v.&amp;n. 羡慕，忌妒(en-&#x3D;in进入 + vy&#x3D;vis看。evil eye邪恶之眼–&gt; 忌妒)但不一定是贬义</p><p>jealous adj.(of)妒忌的，吃醋的；猜疑的，警惕的，唯恐失去</p><p>(jeal&#x3D;keen&#x3D;zeal渴望 + ous。①渴望的–&gt;妒忌的；②想知道的–&gt;猜疑的、警惕的)</p><p>zeal n.热心，热忱，热情</p><blockquote><p>与passion的区别：passion更强烈，激情</p></blockquote><p>survey v.&amp;n. 全面审视，调查；测量图，勘定（sur-super-在上 + vey&#x3D;-vis-看）</p><p>guide n.领路人；指南，导游 v.领路， 指导，支配；管理</p><p>（guid&#x3D;vid 看。带人看–&gt;指南)</p><p>guidance n.引导，指导</p><p>disguise v.&amp;n. 假装，伪装</p><p>（dis-反 + guise&#x3D;vis看。不让看见。）</p><p>mask n.面具，伪装 v.掩饰，化装</p><p>witness n.目击者，证人；证据 v.目击，目睹；作证</p><p>wit n. 智力，才智，智慧（见多识广）</p><blockquote><p>A fall into a pit, a gain in your wit.</p><p>吃一堑长一智。</p><p>pit 坑</p></blockquote><p>wise adj.有智慧的，聪明的</p><p>wisdom n. 智慧，明智；名言，格言</p><p>clever adj.聪明的，伶俐的</p><p>（分开–&gt;与笨人分开。通cliff悬崖–&gt;裂开的地方）生活中形容小孩更多一些</p><p>smart adj.聪明的；整洁漂亮的 v.剧痛，刺疼</p><p>（古英语中是，咬伤–&gt;一针见血的）生活中形容成人更多一些</p><p>cunning adj&amp;n.狡猾的，狡诈的（cun&#x3D;know知道）</p><p>cly adj.狡猾的，偷摸的</p><p>shrewd adj.机灵的，敏锐的，精明的</p><p>（来自shrew鼩鼱，通share切、割，指鼩鼱长相奇特的嘴）</p><p><img src="https://s2.loli.net/2022/05/05/pF8JC3WiHGbdmuP.png" alt="image-20220505012230696"></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>今天的重点</p><ul><li><input disabled="" type="checkbox"> 区分diverse、divert这些单词因为他们很相像</li><li><input disabled="" type="checkbox"> develop的显影的意思是怎么来的</li><li><input disabled="" type="checkbox"> wrench的各种意思</li><li><input disabled="" type="checkbox"> 区分各个聪明的意思</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT12</title>
      <link href="/2022/05/03/English/words/wordsUnit12/"/>
      <url>/2022/05/03/English/words/wordsUnit12/</url>
      
        <content type="html"><![CDATA[<h1 id="unit-12"><a href="#unit-12" class="headerlink" title="unit 12"></a>unit 12</h1><ol start="87"><li><p>admission n.允许进入；承认；入场费</p><blockquote><p>ad-朝 + miss-发送 + -ion</p><ul><li>准许进入</li><li>准许意见进入-&gt;承认</li></ul></blockquote><p>生活中常用来表示准许进入的意思，例如下图中的牌子，字面意思是“大学准许进入的办公室”，中文译为”招生办”</p></li></ol><p><img src="https://s2.loli.net/2022/05/03/NTOlRSh3LZE6WD1.png" alt="image-20220503154245114"></p><ol start="87"><li><p>admit vt.承认，供认；准许。。。进入</p><p>permit v.许可，允许 n.许可证，牌照</p><p>（per-每 + -mit- &#x3D; miss- 发。全权放手，每一步都交给你。–&gt; 官方许可）</p><p>permission n.允许同意</p><p>allow vt.允许，准许；给予</p><p>（①al-&#x3D;ad-去—+laud称赞、赞同-&gt;允许 ②通allocate分配–&gt; 给予）</p><p>allowance n.补贴，津贴；零用钱；减价，折扣；允许</p><blockquote><p>trade-in 以旧换新</p><p>a trade-in allowance 以旧换新减价</p></blockquote><h3 id="“允许”-三个单词的对比"><a href="#“允许”-三个单词的对比" class="headerlink" title="“允许” 三个单词的对比"></a>“允许” 三个单词的对比</h3><p>admit 侧重“准许进入、承认”</p><p>permit侧重“官方许可”</p><p>allow侧重“允许”</p><hr><p>mission n.使命，任务；使团，代表团</p><blockquote><p>这个词最早指的是早期教会派遣到国外传教的任务，miss就是送出去的意思</p></blockquote><p>missionary adj.教会的，传教（士） n.传教士</p><p>miss n.小姐 v.思念，未击中，错过</p><p>（①mistress的简写；②错过，通move改变位置，因错过而思念）</p><p>missing adj.漏掉的，失去的，失踪的</p><p>missile n.导弹，发射物</p><p>（miss-发送 + 名词后缀 -ile）</p><p>mess n.混乱，混杂，脏乱 v.弄脏，弄乱</p><p>（早期指定量的“派发食物”，后指失误“大杂烩”–&gt;混乱）</p><p>message</p><p>messenger n.送信者，使者（构词比较passenger通过的人–&gt;乘客）</p><p>emit vt.发出，散发；放射</p><p>（e-向外 + -mit-&#x3D;-miss-发送）</p><p>omit v.省略，删去；遗漏</p><p>（o-&#x3D;ob- 相反 + -mit-。不发–&gt; 省略）</p><p>submit v.(to)使服从，屈服；（to）呈送，提交</p><p>（sub- 在下、自下而上 + -mit-发。①地位放低–&gt;屈服；②呈上）</p><p>dismiss v.免职，解雇，开除</p><p>（dis-离开。送走–&gt;解雇）</p><p>transmit vt.传输；传播 vi.发射信号；传播</p><p>（trans-穿过。一头发到另一头）</p><p>transmission n.播送，发射；传送</p><p>commit v. 把。。交托给；致力于；犯（错误）</p><p>（com-共同。①全部发出去–&gt;交托；致力于 ②精力放在错事上）</p><p>commitee n. 委员会，全体委员（为完成一定任务而设立的专门组织）</p><p>commission vt.委任，委托 n.委员会；委任，委托（书），代办；佣金，手续费</p><p>intermittent adj. 间歇的，断断续续的</p><p>（inter-在中间 + -mit- 发送 + 辅音双写t引导adj后缀-ent。间歇发生的）</p><p>promise v.保证，答应；有。。。可能 n.承诺；希望，出息</p><p>（pro- 向前 + -mis- 发 + -e。说未来的话，把话说在前面）</p><p>promising adj.有希望的，有前途的</p><hr><h3 id="对比其他的“发誓”"><a href="#对比其他的“发誓”" class="headerlink" title="对比其他的“发誓”"></a>对比其他的“发誓”</h3><p>pledge n. 誓约；保证 v. 发誓；保证  <strong>语气更加正式，一般不会用</strong></p><p>oath n. 誓言 （助记：oral 口头的，口头宣誓）</p><hr><p>compromise n.妥协，折衷 vi. 妥协 vt. 危及，放弃（原则等）</p><p>（com- 共同 + promise承诺。折衷）</p><p>premise n. 前提 （pl.复数)房屋连地基 v. 提论，预述，假定（这个意思很少见）</p><p>（pre-在前 + -mis- 发送 + -e。①提前的论述–&gt;前提。②契约或遗嘱中预先提到的物质归属–&gt;房屋）</p></li><li><p>adore vt.崇拜，敬慕，爱慕；非常喜欢（这个意思更常用）</p><p>（ad-去 + -or-说 + -e。去说，原指赞美神）</p><p>adorable adj.讨人喜欢的</p><p>oral adj. 口头的</p><hr><p>拓展的词汇，不在考研大纲中，但很好记</p><p>orate vi.演说，演讲</p><p>orator n. 演说者</p><hr></li><li><p>advent n.（重要事件等的）到来，来临</p><p>（ad-朝 + -vent-走。走来）</p><p>adventure n.冒险，奇遇（来临的机遇–&gt;冒险）</p><p>venture v.冒险，拼；大胆说 n.冒险事业，拼，闯（adventure 变体）</p><blockquote><p>eg：She hardly dared to venture an opinon.她很难大胆说出自己的想法。</p></blockquote><p>event n.事件，事情（e-出 + -vent-走。衍生出来的结果–&gt;事件)</p><ul><li>incident 小事</li><li>event 大事</li></ul><p>eventually adv.终于，最后（eventually强调结果；finally最终，强调步骤）</p><p>invent v.发明，创造；（衍生出的意思）捏造，虚构</p><p>（in-进入 + -vent走。走入，找到–&gt;发明）</p><p>invention n.发明，创造，发明物</p><p>inventory n.详细目录，存货，总量（找到货物的清单）</p><p>prevent v. (from)预防，防止，阻止，妨碍（pre-在前。先走一步–&gt;预防）</p><p>convenience n.便利，方便；(pl.)便利设备</p><p>（con-一起 + -ven走 + -i- + -ence。走到一起–&gt;便利）</p><p>convenient adj.(to)便利的，方便的</p><blockquote><p>eg: What time would it be convenient for you to come over?什么时间你方便来找我呢？</p></blockquote><p>convention n.大会，会议；习俗，惯例，常规；公约，协定(走到一起–&gt;开大会)</p><p>conventional adj.惯例的，常规的(大家都这么”走”)</p><hr><h3 id="“惯例”单词区分"><a href="#“惯例”单词区分" class="headerlink" title="“惯例”单词区分"></a>“惯例”单词区分</h3><p>tradition n.传统；惯例</p><p>（tra-&#x3D;trans-穿过 + -dit-&#x3D;-do-给 + n.后缀ion。穿过岁月流传下来的）</p><p>conventional adj.惯例的，常规的（大家都这么走–&gt;惯例的）（思想保守的)</p><p>customary adj.习惯的，惯例的</p><p>（cus-&#x3D;com-来 + -tom&#x3D;self自己。到自己身上的行为）（个人或群体平常习惯的）</p><hr><p>revenue n.财政收入，税收</p><p>（re-回 + ven&#x3D;vent走 + -ue。走回来–&gt;收回来的钱–&gt;税收）</p><ul><li><p><img src="https://s2.loli.net/2022/05/03/1CeaUPd4AO8uVwj.png" alt="image-20220503212715258"></p><p>大名鼎鼎的IRS：interal revenue service国家税务局</p></li></ul><p>avenue n.大街，林荫路；（比喻）途径，渠道（a-&#x3D;ad-去 + ven走 + ue）</p><p>intervene v.(in)干涉，干预；插入，介入（inter-在中间 + ven走 + e。走入其中–&gt;干涉）</p><ul><li><p>注意与interrupt打断区分，比如下面的例句</p><blockquote><p>The President intervened personally in the crisis.</p><p>总统亲自介入到这次危机中。</p></blockquote></li><li><p>介入了，但是没有打断，而是带领你继续走下去</p></li></ul><p>advance n.前进，预付（提前付款） vi.前进，进展 vt.促进，推进</p><p>（助记：ad-朝 + vanc-&#x3D;vent走 + -e。朝前走–&gt;前进）</p><p>advanced adj.超前的，先进的；高级的；开明的；前进的</p><blockquote><p>advanced course 高级课程</p></blockquote><p>advantage   n.优点，长处</p></li><li><p>adverb n.副词 adj.副词的（ad-朝 + verb动词。修饰动词的词）</p><p>verb n.动词（来自word）</p><p>word n.词语；言辞</p><p>verbal  adj.用言辞的，用文字的；口头的；动词的</p><ul><li>与oral不同的是verbal表示文字表达的意思，其中包含了用嘴说，而oral专门指用嘴说</li></ul><blockquote><p>The job applicant must have good verbal skills.</p></blockquote><p>irony n. 反话，讽刺，讽刺的事（iron&#x3D;word说话 + n.后缀-y。<strong>助记：爱惹你</strong>）</p><p>​    adj.铁的；含铁的（刚好长得一样而已，词源上没有关系）</p><blockquote><ul><li>iron man 钢铁侠</li></ul><p>The irony (of it) is that the new <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/tax">tax</a> <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/system">system</a> <em>will</em> <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/burden">burden</a> <em>those it was</em> <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/intended">intended</a> <em>to</em> <a href="https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD-%E6%B1%89%E8%AF%AD-%E7%AE%80%E4%BD%93/help">help</a>.</p><p>具讽刺意味的是，新的税收制度反而将使该制度本打算要帮助的人背上沉重负担。</p></blockquote><p>sarcastic adj.讽刺的（来自sarcasm挖苦。助记：sarc&#x3D;scar伤疤 + -asm。用语言让人遍体鳞伤）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与婷宝的一天</title>
      <link href="/2022/05/03/dailyLife/2022_05_03/"/>
      <url>/2022/05/03/dailyLife/2022_05_03/</url>
      
        <content type="html"><![CDATA[<h1 id="久违的出门逛街"><a href="#久违的出门逛街" class="headerlink" title="久违的出门逛街"></a>久违的出门逛街</h1><p>也不知道为什么，我们学校的领导似乎担心的事情太多，以至于到了现在政策还是很严厉。其他的学校已经可以随意点外卖了，我们学院却不能。</p><p>这次五一假期终于有了请假的政策，却也只能出去一天。不过总好过没有，正好婷宝也刚刚隔离完，我们就一起出去玩了。</p><h1 id="理发"><a href="#理发" class="headerlink" title="理发"></a>理发</h1><p>没错，我已经3个月没有理发了，头发已经到了快爆炸的边缘，婷宝笑我像eason（确实有点像就是了），所以第一件事就是去理发，去了我们这里五星步行街的一家【TY造型】。</p><p>因为节日人多，等了好久才有理发师理，不过最后的效果还是不错。</p><h1 id="吃火锅"><a href="#吃火锅" class="headerlink" title="吃火锅"></a>吃火锅</h1><p>这才是今天的重头戏，说实话，我已经很久没吃火锅了，本来过年期间在重庆呆了一段时间，说要在那里吃。结果因为我做了兼职（什么狗屁兼职，全职！！！），完全没有时间，那段时间休息都很少，回到房间就只能睡觉，好好学习还是很重要的，这下子才真正理解了生活的苦。</p><p><img src="https://s2.loli.net/2022/05/03/AxVphdESeJZTMXG.jpg" alt="IMG_20220502_181519"></p><p><img src="https://s2.loli.net/2022/05/03/TFBEaMN6osI8Xh7.jpg" alt="IMG_20220502_160920"></p><p>这么久没有吃，这次吃的还是很过瘾，婷宝吃的肉少，我就吃了更多的肉[哈哈哈]。</p><p>其实最主要的也不是吃肉啦，重要的是</p><blockquote><p>终于和婷宝团聚！！！然后亲了个爽[少儿不宜]</p></blockquote><p>今天的英语例句</p><blockquote><p>Through play,children acted out in miniature the drama of adult life.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 吃喝玩乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT6</title>
      <link href="/2022/05/02/English/words/wordsUnit06/"/>
      <url>/2022/05/02/English/words/wordsUnit06/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-6"><a href="#UNIT-6" class="headerlink" title="UNIT 6"></a>UNIT 6</h1><h2 id="accompany相关"><a href="#accompany相关" class="headerlink" title="accompany相关"></a>accompany相关</h2><p>accompany [ə’kʌmpəni] v. 陪伴，陪同；伴随，和……一起发生，伴奏（ac-&#x3D;ad-朝 + company 陪伴。）</p><p>company [‘kʌmp(ə)nɪ] n. 公司；陪伴；宾客；连（队），（一）群，队，伙（com-共同+-pan-&#x3D;food食物 + 名词后缀-y。早期指“分食面包的人”）</p><p>companion [kəm’pænjən] n. 同伴，共事者；伴侣（compan+-ion,陪伴的人）</p><h2 id="accomplish相关"><a href="#accomplish相关" class="headerlink" title="accomplish相关"></a>accomplish相关</h2><p>accomplish [ə’kʌmpliʃ] v. 实现（计划等）；达到（目的）；完成（任务）               （ac-&#x3D;ad-朝 + com-共同 + -pli-&#x3D;fill填充 + 动词后缀-(i)sh。去全部填满）（接抽象名词，如任务、使命等）</p><p>ﬁll [fɪl] v. (with)填满，充满</p><p>full [ful] adj. （of）满的，充满的 adj.&amp;adv.完全，充分</p><p>fulfill [ful’fil] v. （fulfil）完成，履行、实践，满足（“填满”。突出“履行、实践”）</p><hr><p>complete [kem’pli:t] adj.完全的，圆满的v.完成，结束，使完美（com-共同+plete&#x3D;fill填充。全都填满t1圆满的） （接具体名词，如建筑物、工程等）</p><p>ﬁnish [‘ﬁniʃ] n. 完成；结束；磨光v.完成；结束；用完；毁掉（可表贬义。磨光：给器具上最后一道漆）</p><p>complement [‘kɔmplimənt] n. 补足物，船上的定员；补语 vt.补充，补足（来自complete）</p><p>compliment [‘kɔmplimənt] n.(pl.)问候，致意 n.&amp;v.称赞，恭维（完成社交的最后环节）</p><p>complimentary [kɔmplɪ’ment(ə)rɪ] adj. 赠送的，免费的</p><blockquote><p> complimentary breakfast 免费早餐</p></blockquote><p>implement [‘impliment] n.(pl.)工具，器具  v. 贯彻，实现（im-&#x3D;in-进入。①参与完成一件事&#x3D;&gt;工具；②填入其中&#x3D;&gt;贯彻）</p><blockquote><p>garden&#x2F;household&#x2F;agricultural implements</p><p>园艺用具&#x2F;家用工具&#x2F;农具（名词）</p><p> The changes to the national health system will be implemented next year.</p><p>国民医疗保健制度的改革将于明年实施（动词）</p></blockquote><p>plus [plʌs] prep. 加上 conj.和，而且 adj. 正的，加的 n. 加号，正号（plus&#x3D;fill。补充&#x3D;&gt;加上。add为动词，plus为介词）</p><p>plural [‘pluərəl] adj. 复数的 n.复数</p><p>surplus [‘sə:pləs] n. n.过剩，剩余；余款，余额adj.过剩的，剩余的（sur-&#x3D;super在上。超出的部分&#x3D;&gt;过剩）</p><p>⭐（surplus突出“资源过剩”；excessive突出“超出范围”：excessive exercise过度锻炼）</p><hr><p>single [‘siŋɡl] adj.单人的；单一的，单个的；未婚的，独身的</p><p>singular [‘siŋɡjulə] adj. 非凡的，卓越的；单数的</p><p>plenty [‘plenti] n.丰富，大量（plent&#x3D;plete&#x3D;fill填充）</p><p>plentiful [‘plentiful] adj.富裕的，丰富的</p><p>folk [feuk] n. 人们；民族；亲属 adj. 民间的（fol&#x3D;fill填充。拥挤的人群&#x3D;&gt;人们）</p><p>vulgar [‘vʌlɡə] adj. 粗俗的，庸俗的，本土的，通俗的，普通的（vulg&#x3D;folk。平民百姓的世俗思想&#x3D;&gt;庸俗的）</p><p>ﬂock [ﬂɔk] n.（一）群，（禽，畜等的）群；大量 v. 群集，成群</p><h2 id="finish相关"><a href="#finish相关" class="headerlink" title="finish相关"></a>finish相关</h2><p>finish [‘finiʃ] n. 完成；结束；磨光v.完成；结束；用完；毁掉（fin-终结、界限 + 动词后缀-ish）</p><p>ﬁnite [‘fainait] adj. 有限的；[数]有穷的，限定的（有终点的）</p><blockquote><p>The world’s resources are finite.</p><p>世界的资源是有限的。</p></blockquote><p>inﬁnite [‘inﬁnət] adj. 无限的，无穷的 n. 无限（没有终点的）</p><p>final [‘fainl] adj.最终的，决定性的 n. 结局；决赛；期末考试</p><p>ﬁnally [‘fainəli] adv. 最后，最终；决定性地</p><p>ﬁnance [‘faɪnæns] n. 财政，金融 v.为……提供资金（fin-+名词后缀-ance。终结债务）</p><p>ﬁnancial [fai’nænʃəl] adj. 财政的，金融的</p><p>ﬁne [fain] adj. 晴朗的，美好的，细致的v.&amp;n.罚金，罚款（①好到头的&#x3D;&gt;美好的；②结束过错&#x3D;&gt;罚款）</p><p>reﬁne [ri’fain] v. 精炼，精制，提纯；使文雅，使高尚（re-再。再次变好&#x3D;&gt;精练）</p><p>conﬁne [kən’fain] vt. 限制；使不外出，禁闭（con-&#x3D;come共同+-fin-界限+-e。全都在界限内&#x3D;&gt;限制）</p><p>deﬁne [di’fain] v. 给……下定义；阐述；阐释；限定，规定（de-向下、彻底+-fin-界限+-e。彻底给出界限&#x3D;&gt;下定义）</p><p>definite [‘definit] adj.明确的；一定的；意志坚强的，立场坚定的</p><p>deﬁnition [,diﬁ’niʃən] n. 定义，解释；（轮廓影像等的）清晰度；阐明（边角界限很明确&#x3D;&gt;清晰度）</p><h2 id="accord相关"><a href="#accord相关" class="headerlink" title="accord相关"></a>accord相关</h2><p>accord vt. 给予（欢迎、称颂等）vi.&amp;n.符合，一致（ac-&#x3D;ad-朝+-cord-&#x3D;heart。朝一条心的方向去&#x3D;&gt;一致）</p><p>heart [hɑ:t] n. 心（脏）；内心，感情；热忱；中心，要点</p><p>accordance [ə’kɔ:dəns] n. 一致，和谐，符合</p><p>accordingly [ə’kɔ:diŋli] adv. 相应地，照着办，按照；于是，因此</p><p>cord [kɔ:d] n. 绳，索（异源同形词，和heart无关。通chord弦）</p><p>cordial [‘kɔ:djəl] adj. 诚恳的，亲切的，热诚的（-cord-&#x3D;heart + 形容词后缀-ial。发自内心的）</p><p>record [ri’kɔ:d, ‘rekɔ:d] n. 记录；履历；唱片v.记录；录音（re-再次+-cord-心。再回心里）</p><p>recorder [ri’kɔ:də] n. 记录员；录音机</p><p>credit [‘kredit] n. 信用；信用贷款，赊欠；赞扬，荣誉vt.相信（不大可能的事）；把……归功于…… （-cred- &#x3D;heart心+相信+名词后缀-it）</p><p>incredible [in’kredəbl] adj. 不可相信的，惊人的，不可思议的（in-不+-cred-相信+形容词后缀-ible。同 unbelievable）</p><p> credential [kri’denʃəl] n. 凭证，（pl.）国书，证明书（-cred-相信+-ent+-ial。可供相信的证书）</p><p>⭐grant [ɡrɑ:nt, ɡrænt] v. 同意，准予；授予 n. 授予物；津贴；转让证书（通-cred-相信。因相信对方而授予权力）</p><blockquote><p>She granted their request.</p><p>她答应了他们的请求。（动词：同意、准予）</p><p>They granted her an entry visa.</p><p>他们发给她入境签证。（动词：授予）</p><p> a student&#x2F;research grant </p><p>助学金&#x2F;研究拨款（名词：授予物、津贴）</p><p>Never take other people’s help for granted.</p><p>永远不要把别人的帮助认为是理所当然的。</p><p>take sth. for granted 认为… 是理所当然的</p></blockquote><p>care [keə] n. 小心；关怀，照料v. （about）关心，介意，计较</p><p>careful [‘keəful] adj. 小心的，仔细的；细致的，精心的</p><p>caress [ke’res] vt.&amp; n. 爱抚，抚摸</p><blockquote><p>She gave the child a loving caress.</p><p>她疼爱地抚摸着孩子</p></blockquote><p>reckless [‘reklis] adj. 不注意的，大意的，卤莽的，不顾后果的（reck反过来&#x3D;care关心、顾虑 + 否定后缀- less&#x3D;loose。不关心的）</p><p> cure [kjuə] v.（of）治愈，医治；矫正 n. 治愈，痊愈；良药（通care关心、照料）</p><p>curious [‘kjuəriəs] adj. 好奇的，求知的，古怪的，爱挑剔的（cur-+中缀-i-+形容词后缀-ous。关心的）</p><p>curiosity [,kjuri’ɔsiti] n. 好奇心；古董，古玩（古玩：感兴趣的东西）</p><p>secure [si’kjuə] adj. （from, against）安全的，放心的v.得到；防护（se-分离+-cure-关心。不用操心&#x3D;&gt;安全的）</p><p>security [si’kjuəriti] n. 安全（感），防御（物），保证（人），（pl.）证券</p><p>accurate [‘ækjurət] adj. 正确无误的；准确的，精确的（ac-&#x3D;ad-朝、去 + -cur-&#x3D;care关心 + 动词后缀-ate。去小心&#x3D;&gt;精确的）</p><p>accuracy [‘ækjurəsi] n.准确（性）；精确；准确度</p><p>charity [‘tʃærəti] n. 慈善（团体），仁慈，施舍（char&#x3D;care关心+名词后缀-ity。关心别人的组织&#x3D;&gt;慈善团体）</p><p>cherish [‘tʃeriʃ] vt. 抱有，怀有（希望等）；爱护，抚育；珍爱（cher&#x3D;care关心+-动词后缀ish。抱有：珍藏）</p><p>treasure [‘treʒə] n. 财宝，财富；珍品 v. 珍爱，珍惜</p><p>caution [‘kɔ:ʃən] n. 谨慎；注意（事项），警告vt.劝  小心（caut&#x3D;care小心+名词后缀-ion）</p><p>precaution [pri’kɔ:ʃən] n. 预防，谨慎，警惕（pre-提前+caution谨慎。提前谨慎&#x3D;&gt;警惕）</p><p>cautious [‘kɔ:ʃəs] adj. （of）小心的，谨慎的</p><hr><p>core [kɔ:] n. 果核；中心，核心（通care心）</p><p>courage [‘kʌridʒ] n. 勇气，胆量（cour&#x3D;core心+名词后缀-age。来自内心—勇气）</p><p>discourage [dis’kʌridʒ] v. 使泄气，使失去信心（dis-相反。使失去勇气&#x3D;&gt;使气馁）</p><p>encourage [in’kʌridʒ] v. 鼓励，怂恿（en-&#x3D;in-进入、注入。注入勇气&#x3D;&gt;鼓励）</p><p>coward [‘kauəd] n. 懦夫，胆怯者（助记：没有勇气的人）</p><p>enlarge [in’lɑ:dʒ] vt. 扩大，放大，增大</p><p>ability [ə’biliti] n. 能力；本领；才能，才干；专门技能，天资</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> 对比surplus,excessive和incidence</p><p>surplus突出“资源过剩”；excessive突出“超出范围”：excessive exercise过度锻炼</p></li><li><p><input disabled="" type="checkbox"> grant意思较多，注意区分</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT5</title>
      <link href="/2022/05/02/English/words/wordsUnit05/"/>
      <url>/2022/05/02/English/words/wordsUnit05/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-5"><a href="#UNIT-5" class="headerlink" title="UNIT 5"></a>UNIT 5</h1><h2 id="accident相关"><a href="#accident相关" class="headerlink" title="accident相关"></a>accident相关</h2><p>accident [‘æksidənt] n. 意外，事故（ac-&#x3D;ad-朝，去 + -cid-落下 —— 名词后缀-ent。从天而降&#x3D;&gt;意外）</p><hr><p>⭐注意对比incident和incidence</p><p>incident [‘insidənt] n. 事件，事变（in-进入。落入原本计划内的事情&#x3D;&gt;不常发生的事件）</p><p>incidentally [,insi’dentəli] adv. 偶然地，附带地，顺便提及</p><blockquote><p>Quite incidentally, I found out some very useful information at the party.</p><p>我在聚会上非常偶然地发现了一些很有用的信息。</p></blockquote><p>incidence [‘insidəns] n. <strong>发生率</strong>；影响程度，影响范围</p><p>coincidence [kəu’insidəns] n. 巧合；同时发生，符合，一致（co-&#x3D;com-共同 + incidence 发生率。共同发生）</p><p>coincide [,kəuin’said] vi.  同时发生，巧合，一致，相符</p><hr><p>【异源同型词】</p><p>case [keis] n. 情况，事实，案例；箱，盒，容器（①cas&#x3D;-cid-落下。降临的事情②通catch抓，拿。盛东西的容器）</p><p>cash [kæʃ] n. 现金，现款  v. 兑现，付（或收）现款（原指装钱的箱子，后延申为现金）</p><p>cashier [kæ’ʃiə] n. 收银员，出纳员</p><hr><ul><li>当case意为“盒”时</li></ul><p>cassette [kə’set] n. 盒子；盒式磁带</p><p>capsule [‘kæpsl] n. 胶囊；太空舱（caps&#x3D;case）</p><hr><p>casual [‘kæʒjuəl] adj. 偶然的，临时的，非正式的（不常发生的)</p><blockquote><p>casual clothes 休闲服</p><p>casual workers&#x2F;labour 临时工&#x2F;零工</p></blockquote><p>casualty [‘kæʒjuəlti] n. 伤亡人员；受害人；损失的东西（偶然死亡，非正常死亡的）</p><hr><p>occasion [ə’keiʒən, əu-] n. 场合，时节，时刻，机会（oc-&#x3D;ob-朝向，相对 +-cas-&#x3D;case事件 +-ion。来临的事件，面对的事件）</p><p>occasional [ə’keiʒənəl, əu-] adj. 偶然的，非经常的，临时的</p><hr><p>chance [tʃɑ:ns, tʃæns] n. 机会；可能性 v. 碰巧，偶然发生</p><p>choose [tʃu:z] v. 选择，挑选</p><p>choice [tʃɔis] n.选择（机会），抉择，选择项；入选者 adj.精选的</p><p>disgust [dis’gnst] n.厌恶，恶心 v.使厌恶（dis-不+-gust-&#x3D;choose。不选&#x3D;&gt;厌恶）</p><p>decay [di’kei] v.&amp;n. 腐朽，腐烂；衰减，衰退（de-向下+cay&#x3D;-cid-。向下落&#x3D;&gt;衰减）</p><blockquote><p>Sugar makes your teeth decay.</p><p>糖能引起蛀牙。（动词）</p><p>This industry has been in decay for some time.</p><p>这个行业早就开始衰退了 。（名词）</p></blockquote><p>cut [kʌt] n.&amp;v.切，割，削；削减，删节 n.切口，伤口</p><p>decide [di’said] v.决定，下决心；解决，裁决（de-向下+-cid-&#x3D;cut。向下砍&#x3D;&gt;快刀斩乱麻）</p><p>decision [di’sisen] n.决定，决心；决议；决策</p><p>decisive [di’saisiv] adj.决定性的</p><blockquote><p>a decisive factor&#x2F;victory&#x2F;battle</p><p>决定性的因素&#x2F;胜利&#x2F;战役</p></blockquote><p>concise [ken’sais] adj.简明的，简洁的（砍掉所有不需要的东西）</p><p>precise [pri’sais] adj.精确的，准确的（预先裁剪好）</p><p>precision [pri’sisen] n.精确，精确度</p><p>cement [si’ment] n.水泥；胶泥，胶接剂v.胶合；巩固，加强（ce&#x3D;cut。切开的石头一石头粉末)</p><blockquote><p>The university’s exchange scheme has cemented its links with many other academic institutions.</p><p>这所大学的交流计划加强了与许多其他学术机构的联系。</p></blockquote><p>hay [hei] n.干草（h&#x3D;c。砍成一节一节的草&#x3D;&gt;干草）</p><h2 id="acclaim相关"><a href="#acclaim相关" class="headerlink" title="acclaim相关"></a>acclaim相关</h2><p>acclaim [ə’kleim] v. 向……欢呼，公认 n. 欢呼，喝彩，称赞(ac-&#x3D;ad-朝+claim&#x3D;clear喊。去喊&#x3D;&gt;欢呼）</p><hr><p>⭐关于claim</p><p>clear adv. 清晰的 v. 清楚 vi. 变清楚</p><p>clean adj. 清洁的 v. 除去污垢</p><p><strong>claim 由n双写得来，早期表示话讲清楚（大喊）</strong></p><p>claim v. 要求，声称，索赔 n. 要求，断言，索赔，权力</p><blockquote><p>The number of people claiming unemployment benefits has risen sharply this month.</p><p>这个月要求领取失业救济金的人数激增 （动词：索要、索赔）</p><p>Baggage Claim Area</p><p>行李提取处（动词：认领、索要）</p><p>The company claims that it is not responsible for the pollution in the river.</p><p>公司声称对该河流污染没有责任（动词：声称）</p><p>Can you give any evidence to support your claim?</p><p>你能给出证据支持你的说法吗？（名词：断言、说法）</p><p>She has no rightful claim to the title.</p><p>她并没有获得这一头衔的正当权利。（名词：权利）</p></blockquote><p>可以看例句找感觉，他们都表示<strong>大喊出来</strong></p><hr><p>clarify [‘klærifai] v. 澄清，阐明</p><p>clarity [‘klærəti] n. 清晰，明晰</p><p>declare [di’klee] v.宣布，宣告，声明；断言，宣称（de-向下、彻底。彻底说清楚&#x3D;&gt;声明）</p><p>declaration [,deklə’reiʃən] n.宣言，宣布，声明</p><p>exclaim [ik’skleim] v. 呼喊，惊叫，大声说</p><p>proclaim [pre’kleim] v.宣告，声明（向前喊&#x3D;&gt;宣告）</p><p>reclaim [ri’kleim] v. 要求归还，收回；开垦（召唤回来）</p><p>calendar [‘kælində] n. 日历，月历（calen&#x3D;clear。古罗马时期，每月初会有牧师在广场宣布这个月是今年的几月份，这个月有多少天，其中哪一天准备过什么节等等，所以最初的日历实际上是“喊”出来的。）</p><h2 id="accommodate相关"><a href="#accommodate相关" class="headerlink" title="accommodate相关"></a>accommodate相关</h2><p>accommodate [ə’kɔmədeit] vt.向…. 提供住处；对… 予以照顾性考虑（ac-&#x3D;ad-朝 + com-共同 + -mod-&#x3D;mode模式+动词后缀-ate。到共同的模式里来&#x3D;&gt;提供住宿）</p><p>accommodation [ə,kɔmə’deiʃən] n. 住宿，留宿；膳宿供应</p><p>mode [meud] n.方式，式样</p><p>model [‘model] n.样式，型；模范；模型，原型；模特 v.模仿</p><p>moderate [‘mɔdərət, ‘mɔdəreit] adj. 有节制的，中等的，适度的，温和的，稳健的（有尺度的）</p><p>modest [‘mɔdist] adj. 谦虚的；有节制的；适度的</p><p>modern [‘mɔdən] adj.现代的，近代的，新式的（最新模式的&#x3D;&gt;新式的）</p><p>modernization [,mɔdənai’zeiʃən] n. （modernisation） 现代化</p><p>modify [‘mɔdifai] v. 更改，修改，修饰</p><p>module [‘mɔdju:l, -dʒu:l] n. 组件，模块，模件；（航天器的）舱</p><p>mould [məuld] n.（mold）模子，铸型 v. 浇铸，造型，塑造</p><p>mood [mu:d] n. 心情，情绪；语气（情绪的模式）</p><p>commodity [kə’mɔditi] n.(pl.)日用品；商品；农&amp;矿产品；有用之物（共同模式的物品&#x3D;&gt;商品）</p><p>goods [gudz] n. (pl.)货物，商品</p><p>good [ɡud] adj. 好的；善良的；擅长的；乖的 n. 好处；利益</p><p>goodness [‘ɡudnis] n. 善良，仁慈；（食物等）精华 int. 天哪</p><hr><p>moral [‘mɔrəl, ‘mɔ:-] adj. 道德（上）的，精神上的 n. 寓意，教育意义（思想模式）</p><p>morality [mə’ræləti] n. 道德，美德</p><p>virtue [‘və:tju:] n. 德行，美德；贞操；优点；功效，效力（vir&#x3D;man。男人应有的品德&#x3D;&gt;美德） </p><blockquote><p>Patience is a virtue.</p><p>耐心是一种美德。</p></blockquote><p>virtual [‘və:tʃuəl] adj. 实际上的，事实上的；虚拟的（未在名义上或正式获承认的&#x3D;&gt;虚拟的）</p><hr><p>metre [‘mi:tɚ] n.（meter）米，公尺；仪表，计量器</p><p>metric [‘metrik] adj. 米制的，公制的</p><p>kilo [‘ki:ləu, ‘ki-] n.（kilogram&amp;kilogramme）千克</p><p>kilometre [kɪ’lɔmɪtɚ] n.(kilometer) 公里，千米（略作km）</p><p>diameter [dai’æmitɚ] n. 直径（dia-穿过&#x3D;bi-二 + meter。中心到边上两点间的距离&#x3D;&gt;直径）</p><p>parameter [pə’ræmitɚ] n. 参数，参量（para-在旁边 + meter测量。放在旁边可供参考的数据）</p><p>measure [‘meʒə] v. 测量，分派，权衡 n. 尺寸，量度器，措施，办法(mod&#x3D;met)</p><p>immense [i’mens] adj. 广大的，巨大的；[口]极好的（im-不+mense&#x3D;measure测量。无法测量的）</p><p>symmetry [‘simitri] n. 对称（性）；匀称，整齐（sym&#x3D;same相同 + metr&#x3D;meter + 名词后缀-y。两者一致）</p><p>gauge [ɡeidʒ] n. 标准尺寸；规格；量规，量表；口径 v. 测量(音似guess，有估算的意思)</p><blockquote><p>a 12-gauge shotgun一支十二口径的猎枪</p></blockquote><p>dimension [di’menʃən, dai-] n. 尺寸，尺度；维（数），度（数）（dis-分开 + mens-测量 + -ion。分开测量&#x3D;&gt;维度）</p><p>medicine [‘medisin] n. 内服药，医药；医术；医学，内科学（保持体内各项指标正常的手段）</p><p>medical [‘medikəl] adj. 医学的，医疗的，医药的；内科的</p><p>kit [kit] n. 成套工具，用具包，工具箱</p><p>remedy [‘remidi] n.药品；治疗措施v.治疗，医治；纠正，补救（re-反复表强调 + med医药 + -y。用医药治疗）</p><p>meditate [‘mediteit] v. 想，考虑，（尤指宗教上的）沉思，冥想（med测量 + 复合动词后缀-itate。测量、分析&#x3D;&gt;沉思）</p><p>meditation [,medi’teiʃən] n. 熟虑；（尤指宗教的）默想，沉思；（pl.）冥想录</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> 对比incident和incidence</p></li><li><p><input disabled="" type="checkbox"> 关于claim</p></li><li><p><input disabled="" type="checkbox"> moral 和 virtue</p><p>moral指的是道德的概念。virtue指个人的品德</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT4</title>
      <link href="/2022/05/02/English/words/wordsUnit04/"/>
      <url>/2022/05/02/English/words/wordsUnit04/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-4"><a href="#UNIT-4" class="headerlink" title="UNIT 4"></a>UNIT 4</h1><h2 id="academic相关"><a href="#academic相关" class="headerlink" title="academic相关"></a>academic相关</h2><p>academic [,ækə’demik] adj. 学院的，学术性的；大学的；理论的（源自希腊神话中的雅典英雄阿卡德摩斯（Akademos） ，后来柏拉图（Plato ）在他的家中讲课）</p><p>academy [ə’kædəmi] n. (高等)专科院校；学术社团，协会，研究院</p><p>accent [‘æksənt; ək’sent] n. 口音，腔调；重音（符号） vt. 重读 （ac-&#x3D;ad- 朝 + cent&#x3D;chant 唱。说话像唱歌&#x3D;&gt;口音）</p><p>chant [tʃɑːnt; tʃænt]] v. 反复说或吟唱  n. 赞美歌；圣歌</p><p>charm [tʃɑrm] n. 吸引力，魔力 v. 迷人，（使）陶醉（具有魔力的咒语）</p><p>concert [‘kɔnsə:t] n. 音乐会，演奏会（ con-&#x3D;come 来、一起 + cert&#x3D;chant 。一起唱歌&#x3D;&gt;音乐会）</p><h2 id="accept相关"><a href="#accept相关" class="headerlink" title="accept相关"></a>accept相关</h2><p>accept [ək’sept] vt. 接受，认可 vi. 同意 （ac-&#x3D;ad- + -cept-&#x3D;have 拿&#x3D;&gt;去拿&#x3D;&gt;接受）</p><p>acceptable [ək’septəbl] adj. 可接受的，合意的</p><p>acceptance [ək’septəns] n. 接受，接收，验收</p><p>except [ik’sept] prep. 除……之外  v. 除外；反对（拿出去&#x3D;&gt; 除外）</p><p>exception [ik’sepʃən] n. 例外，除外；反对；异议</p><p>exceptional [ik’sepʃənəl] adj. 例外的，异常的</p><blockquote><p>There are exceptions to every rule.</p><p>每条规则皆有例外。</p></blockquote><p> ⭐susceptible [sə’septəbl] adj. 易受影响的，易受感动的（sus-&#x3D;sub- 在下面 +-cept- 拿 +-ible&#x3D;-able。“拉下水的 ”→易受影响的）</p><blockquote><p>These plants are particularly susceptible to frost.</p><p>这些植物很容易受霜冻的影响</p></blockquote><p>receive [ri’si:v] v. 收到，遭到，接见 （re- +-ceive-&#x3D;have 拿）</p><p>reception [ri’sepʃən] n. 接待，招待会，接收，接受</p><p>receipt [ri’si:t] n. 收据，收条；收到，接到 [invoice 发票] (只是小票，并不是用来报销的发票)</p><blockquote><p>Make sure you are given a receipt for everything you buy.</p><p>买什么东西都一定记着要收据。</p></blockquote><p>recipe [‘resipi] n. 烹饪法，食谱；诀窍，方法（拿回来，最早指医生处方里的“服用”，后指食谱）</p><p>recipient [ri’sipiənt] n. 接收者</p><blockquote><p>recipients of awards</p><p>领奖者</p></blockquote><p>conceive [kən’si:v] v. (of)设想，构思，想象；以为；怀胎，怀有（①拿到一起&#x3D;&gt;构思；②将精子和卵子拿到一起&#x3D;&gt;怀孕）</p><blockquote><p>He conceived the plot for this ﬁlm while he was still a student.</p><p>他还是个学生的时候就已经构想出了这部影片的情节。</p><p>Do you know exactly when you conceived?</p><p>你知道自己怀孕的确切时间吗？</p></blockquote><p>concept [‘kɔnsept] n. 概念，观念，设想（构思出的想法）</p><p>deceive [di’si:v] v. 欺骗，蒙蔽（de-&#x3D;dis- 相反。往反方向带、带偏&#x3D;&gt;欺骗蒙蔽）</p><p>deceit [di’si:t] n. 欺骗行为（只是骗人）</p><hr><p>fraud [frɔ:d] n. 欺诈，诈骗；骗子；假货（犯罪行为）</p><p>frustrate [‘frʌstreit] vt. 挫败，阻挠，使灰心（被欺骗）</p><hr><p>perceive [pə’si:v] v. 察觉，感知；理解（per- 每一步都能抓住）</p><p>period [‘piəriəd] n. 时期，时代；学时；周期；句号（-iod-&#x3D;-it- 走。每一步都走一遍&#x3D;&gt;周期、句号）</p><p>periodical [,piəri’ɔdikəl] n. 期刊，杂志 adj. 周期的，定期的</p><p>capture [‘kæptʃə] v.&amp;n. 捕获，俘虏；夺得，攻占（-cap-&#x3D;have持有，拿。抓住）</p><p>captive [‘kæptiv] n. 俘虏 adj. 被俘虏的，被监禁的</p><p>capable [‘keipəbl] adj. 有本领的，有能力的；(of)可以……的，能……的（能抓起来的&#x3D;&gt;有能力的）</p><p>capacity [kə’pæsəti] n. 容量，溶剂；能量，能力；接受力</p><p>cable n. 电报；电缆；缆，索 v. 拍电报（早期固定、抓住船只的绳子）</p><p>hedge [hedʒ] n. 篱笆，树篱，障碍物 v. 用树篱为主（早期的羊圈）</p><p>cater [‘keitə] v. (for&amp;to)满足，迎合；(for)提供饮食及服务（cat&#x3D;-capt- 拿。“采办、准备食品”）</p><p>chase [tʃeis] v.&amp;n. 追求，追逐（去抓）</p><hr><p>purchase [‘pə:tʃəs] v. 买，购买 n. 购买的物品(pur-&#x3D;pro- 向前。向前追逐，后延申为“购买”）[<strong>formal</strong>]</p><p>buy vt.买  [<strong>normal</strong>]</p><hr><p>have [hæv] v. 有，具有；体会经受；从事；使</p><p>heavy [‘hevi] adj. 重的，重型的；沉重的</p><p>heave v. （用力）举，提，拉；扔 n. 举起（举起、投掷重的东西）</p><blockquote><p>He heaved the bag onto his shoulder.</p><p>他把袋子抗上肩膀</p></blockquote><p>behave [bi’heiv] v. 举止，举动，表现；运转，开动</p><p>behavior [bi’heivjə] n.(behaviour)行为，举止；（机器等）运转情况</p><h2 id="access相关"><a href="#access相关" class="headerlink" title="access相关"></a>access相关</h2><p>access [‘ækses] n. 进入；接入；到达 vi. 存取，访问(ac-&#x3D;ad- 朝 + -cess- 走。朝一个地方走&#x3D;&gt;进入）</p><p>accessory [ək’sesəri] n. 配件，附属品；（为全套衣服增加美感的）服饰（跟着主体走&#x3D;&gt;附属品）</p><blockquote><p>clothes and accessories  服饰与配饰</p></blockquote><p>success [sək’ses] n. 成就，成功；成功的事务，有成就的人(suc-&#x3D;sub-在下、在后 + -cess-走。①在后面走&#x3D;&gt;追逐目标&#x3D;&gt;成功②一直走下去&#x3D;&gt;成功）</p><p>succeed vi. 成功；继承，接替 vt. 接替；继……之后（-ceed-&#x3D;-cess-）</p><p>successful [sək’sesful] adj.圆满的；顺利的；成功的</p><p>succession [sək’seʃən] n. 连续，系列；继任，继承（在后面跟着&#x3D;&gt;连续、继承）</p><p>successive [sək’sesiv] adj. 连续的，接连的</p><p>successor [sək’sesə] n. 接替的人或物，继任者</p><hr><p>excess [ik’ses] n. 过量；过剩；超额；无节制 adj. 过量的，额外的（ex-向外 + -cess- 走。走出去）</p><p>excessive [ik’sesiv] adj. 过多的；过分的；额外的</p><p>exceed [ik’si:d] v. 超过，胜过；越出</p><p>exceedingly [ik’si:diŋli] adv. 极端地，非常</p><hr><p>necessary[‘nesisəri] adj. 必需的，必要的；必然的 n. 必需品（ne&#x3D;no不 + -cess-走 + -ary。不能走的，不能少的）</p><p>necessitate [nɪ’sesɪteɪt] v. 使成为必要，需要（necess + -itate）</p><p>necessity [ni’sesəti, nə-] n. 必要性，必然性</p><p>process [ˈprɔ-ses; prəˈses] n. 过程，进程，工艺，工序 v. 加工，处理（ pro-向前。向前走）</p><p>procession [prə’seʃ(ə)n] n. 队列</p><p>proceed [prə’siːd] v. 进行，继续下去；发生</p><blockquote><p>His lawyers have decided not to proceed with the case.</p><p>他的律师已经决定不再继续打那场官司了。</p></blockquote><p>proceeding [prə’si:dɪŋ] n. 行动，进行(pl.)会议录，学报</p><p>procedure [prə’si:dʒə] n. 程序，手续，步骤</p><blockquote><p>You must follow correct procedure at all times.</p><p>你必须时刻按照正确的步骤操作。</p></blockquote><p>precede [pri:’si:d] v. 领先（于），在（……之前）；优先，先于（pre- 在前。走在前面）</p><p>preceding [pri:’si:diŋ] adj. 在前的，在先的</p><p>precedent [‘presi:dənt] n. 先例</p><p>recede [ri’si:d] v. 退回，后退，收回；贬值（re-回。走回来&#x3D;&gt;后退）</p><p>recession [rɪ’seʃ(ə)n] n. 衰退，不景气</p><blockquote><p>The economy is in deep recession.</p><p>经济正处于严重的衰退之中。</p></blockquote><p>⭐cease [si:s] v.&amp;n. 停止，终止（cease&#x3D;-cess- “走了”→ 停止）</p><p>predecessor [‘predəsesɚ] n. 前任，前辈（pre-之前 +decess死亡 +-or→之前死亡的人→前辈）</p><p>concede [kən’si:d] vt. 承认容许（con-强调。走开&#x3D;&gt;退让）</p><p>concession [kən’seʃən] n. 让步，妥协；特许（权）</p><p>ancestor [‘ænsestɚ] n. 祖先（an-&#x3D;ant-在前。走在前面的人）</p><p>ancient [‘einʃənt] adj. 古代的，古老的（anc-&#x3D;ant-在前 +-i-+ -ent 。先前的）</p><p>antique [æn’ti:k] adj. 古式的，过时的 n. 有价值的古物，古董</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> susceptible adj. 易受影响的，易受感动的</p></li><li><p><input disabled="" type="checkbox"> accept和receive区分</p><p>accept是主观接受，receive是客观上的拿到了</p></li><li><p><input disabled="" type="checkbox"> deceit和fraud区分</p><p>deceit只是骗人，而fraud是犯罪行为</p></li><li><p><input checked="" disabled="" type="checkbox"> cease注意和cause区分</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT3</title>
      <link href="/2022/05/02/English/words/wordsUnit03/"/>
      <url>/2022/05/02/English/words/wordsUnit03/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-3"><a href="#UNIT-3" class="headerlink" title="UNIT 3"></a>UNIT 3</h1><h2 id="absorb相关"><a href="#absorb相关" class="headerlink" title="absorb相关"></a>absorb相关</h2><p>absorb [əb’sɔ:b, -‘zɔ:b] vt. 吸收（⽔、光、蒸汽等）；使全神贯注；吞并&#x2F;兼并（ab-离开+sorb吸。吸⾛→吸收）</p><ul><li>sorb来自soup汤</li></ul><p>supper [‘sʌpə] n. 晚餐（以汤为主）</p><p>sip [sip] v. ⼩⼝地喝，抿，呷 n. ⼀⼩⼝的量</p><p>spoon [spu:n] n. 匙，勺⼦，调羹</p><p>spade [‘speid] n. 铁锹，铲⼦（形似⼤勺⼦）</p><p>suck [sʌk] v.&amp;n. 吸，舐；吸收（取）（c&#x3D;k&#x3D;q&#x3D;p。sap：植物体内的汁液，对⽐sip）</p><blockquote><p>you suck. 你真菜&#x2F;垃圾。</p><p>起源于一种吸果冻大赛，人们回对吸的慢的人说you suck(你快吸)，之后变成对差劲的人的评价</p></blockquote><p>soak [səuk] v. 浸泡，浸湿，浸透（吸水）</p><p>soap [səup] n. 肥皂（结合记忆）</p><h2 id="abstract相关"><a href="#abstract相关" class="headerlink" title="abstract相关"></a>abstract相关</h2><p>abstract [‘æbstrækt] adj. 抽象的 n. 摘要，⽂摘，梗概 vt. 提取；摘录要点（abs-&#x3D;ab-离开 + tract&#x3D;drag拉、抽。从中抽出要点→抽象的）</p><p>⭐drag [dræɡ] v. 拖，拖曳</p><p>attract [ə’trækt] vt. 引起的注意（或兴趣等），吸引；引起；激起（at-朝向。朝⼀个⽅向拉→吸引）</p><p>attractive [ə’træktiv] adj. 吸引⼈的，引⼈注意的；漂亮的，迷⼈的</p><hr><p>⭐注意区分下面这些单词</p><p>distract [dis’trækt] v. 分散；使分心；打扰；使⼼情烦乱（dis-相反。往反方向拉→使分心）</p><p>extract [ik’strækt, ‘ekstrækt] v. 拔出，抽出；摘录 n. 抽取物；精华；选集（ex-向外。拉出来→抽出、摘录）</p><p>subtract [səb’trækt] v. （from）减（去），扣掉（sub-在下面。往下拉→减去）</p><blockquote><p>Four subtracted from ten equals six.</p><p>10减去4等于6。</p></blockquote><p>contract [‘kɔntrækt, kən’trækt] n.（承包）合同，契约 v. 订合同&amp;契约；使缩小（con-共同、⼀起。拉到⼀张纸上→合同）</p><hr><p>⭐注意区分下面的单词</p><p>track [træk] n. 跑道，小路；轨迹，轮迹 v. 跟踪，追踪（足迹、轨道。实际存在的）</p><p>trace [treis] n. 痕迹，踪迹；极少量 v. 描绘；跟踪，追踪（追寻、追溯。犹指追寻看不见的踪迹，或者指“历史的踪迹”这种飘渺的存在）</p><blockquote><p>He attempted to cover up all the traces of his crime.</p><p>他试图掩盖他犯罪的蛛丝马迹。</p></blockquote><p>trail [treil] n. 踪迹，痕迹；小路 v. 追踪，跟踪；拖，拖曳（拖在后面的）</p><blockquote><p>Wherever that playboy went, he left behind him a trail of broken hearts.</p><p>那个花花公子不管到哪儿，身后都留下了⼀串破碎的心。</p><p>The Canadian team is trailing by six points.</p><p>加拿大队落后了6分。</p></blockquote><hr><p>trolley [‘trɔli] n. ⼿推⻋；（英）⽆轨电⻋，（美）有轨电⻋</p><p>tractor [‘træktə] n. 拖拉机，牵引⻋</p><p>track(美)&#x2F;lorry(英) n. 卡车</p><p>tram [træm] n. 有轨电车（早期指煤矿井下的有轨运煤车）</p><p>van [væn] n. 有篷汽车；有篷货运车厢</p><hr><p>draw [drɔ:] v. 拉；画；汲取；引出；（to）挨近 n. 平局；拖曳（ 通drag：早期日耳曼语组口语g(u)和w(u)发音类似 ）</p><blockquote><p>Suddenly he drew a knife and held it to my throat.</p><p>他突然拔出⼀把刀抵住了我的喉咙。（动词“拔、拉”）</p><p>Draw a line at the bottom of the page.</p><p>在本页的底部画⼀条线。（动词“画”）</p><p>He waved his hands to draw her attention.</p><p>他挥动双手来吸引她的注意力。（动词“吸引”）</p><p>The game ended in a draw.</p><p>比赛以平局告终。（名词“平局”）</p></blockquote><p>drawing [‘drɔ:iŋ] n. 绘图，图样</p><p>drawer [drɔ:(r)] n. 抽屉（可以拉的）</p><p>dragon [‘dræɡən] n. 龙（画龙的时候，拉出一条长线）</p><p>drawback [‘drɔ:bæk] n. 欠缺，缺点；退还的关税（拉回来，拖后腿）</p><blockquote><p>This is the one major drawback of the new system.</p><p>这是新系统的⼀⼤缺点。 </p></blockquote><p>draft [drɑ:ft, dræft] n. 草稿，草案，草图 v. 起草，草拟</p><p>withdraw [wið’drɔ:, wiθ-] v. 收回，撤消；撤离，退出；提取（钱）（with-相反，通wide。往反方向拉→收回）</p><blockquote><p>Once in court, he withdrew the statement he’d made to the police.</p><p>⼀上法庭，他便推翻了自己对警方的供词。</p></blockquote><p>retreat [ri’tri:t] v. 撤退，退却（re-回+treat&#x3D;tract。往回拉→撤退）（退缩）</p><p>trigger [‘triɡə] n. 扳机 vt. 触发，引起（ trig&#x3D;drag + g + -er。拉动扳机）</p><blockquote><p>Some people ﬁnd that certain foods trigger their headaches.</p><p>有些⼈发现某些⻝物导致他们头疼。</p></blockquote><p>⭐trait [treit] n. 特征，特点，特性（描绘出来的特点）</p><p>portray [pɔr’treɪ] v. 描写，描述；画（⼈物、景象等）（por-&#x3D;pro-向 前+tray&#x3D;drag。画出来展现在大家面前）</p><p>portrait [‘pɔrtrɪt] n. 肖像，画像</p><h2 id="accelerate相关"><a href="#accelerate相关" class="headerlink" title="accelerate相关"></a>accelerate相关</h2><p>accelerate [ək’seləreit] v. 使加速，使增速，促进 vi. 加快，增加（ac-&#x3D;at-朝 + celer&#x3D;gallop飞奔 + 动词后缀-ate。向前飞奔→加速）</p><p>⭐gallop [‘ɡæləp] v.&amp;n. 奔驰，飞奔（ 通wallop&#x3D;well leap，双脚或四脚离地）</p><blockquote><p>We galloped through the woods.</p><p>我们骑马从林中飞驰而过。（动词）</p><p>At the sound of gunﬁre the horse suddenly broke into a gallop.</p><p>枪声⼀响，那匹⻢突然⻜奔起来。（名词）</p></blockquote><p>leap [li:p] v. 跳，跳跃 n. 跳跃，飞跃（朝前跳、跨越）</p><p>loop [lu:p] n. 圈，环（捕捉动物的绳索）</p><p>jump [dʒʌmp] v.&amp;n. 跳跃，跳动，跳过；暴涨，猛增（泛指“跳”）</p><p>⭐hop [hɔp] v. ⼈单足跳；跳上（车等） n. 蹦跳；短程飞行（单足跳）</p><h2 id="abuse相关"><a href="#abuse相关" class="headerlink" title="abuse相关"></a>abuse相关</h2><p>abuse [ə’bju:z, ə’bju:s] vt. 滥⽤；虐待，辱骂；诋毁 n. 滥⽤；恶习；弊端（ab-离开。偏离正轨的使⽤→滥⽤）</p><p>use [ju:z] n. 使&amp;应用；用法&amp;途；益&amp;用处 vt. 用；消耗</p><p>usage [‘juːsɪdʒ] n. 使用，用法；习惯，习俗；惯用法</p><p>used [ju:zd] adj. 用旧了的，旧的；习惯于……；过去惯&amp;经常</p><p>useful [‘ju:sful] adj. 有用的，实用的；有益的，有帮助的</p><p>usual [‘ju:ʒuəl] adj. 通常的，平常的（常用的→平常的）</p><p>usually [ˈjuːʒuəli] adv. 通常，平常</p><p>unusual [,ʌn’ju:ʒuəl] adj. 不平常的，与众不同的</p><p>utilize [‘ju:tilaiz] vt. 利⽤</p><blockquote><p>The Romans were the ﬁrst to utilize concrete as a building material.</p><p>罗马人首先使用混凝土作建筑材料。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> distract、extract、subtract 区分</li><li><input disabled="" type="checkbox"> track、trace 、trail区分</li><li><input checked="" disabled="" type="checkbox"> trait 特点</li><li><input checked="" disabled="" type="checkbox"> gallop 飞奔</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT2</title>
      <link href="/2022/05/02/English/words/wordsUnit02/"/>
      <url>/2022/05/02/English/words/wordsUnit02/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-2"><a href="#UNIT-2" class="headerlink" title="UNIT 2"></a>UNIT 2</h1><h2 id="abound相关"><a href="#abound相关" class="headerlink" title="abound相关"></a>abound相关</h2><p>abound vi. 大量存在，充满，富于（ab 离开 + ound&#x3D;water 水 &#x3D;&gt; 水离开 &#x3D;&gt; 溢出来）</p><p>water 水、浇水   wet 湿的   wash 洗</p><p>aboundance n. 丰富，充裕   aboundant adj. 充足的</p><p>redundant [ri’dʌndənt] adj. 多余的，过剩的；（⻝物）丰富的；被解雇的（red-&#x3D;re-再。往回流→多余、过剩的）</p><h2 id="abrupt相关"><a href="#abrupt相关" class="headerlink" title="abrupt相关"></a>abrupt相关</h2><p>abrupt adj. 突然的，出其不意的，（行为）粗鲁无礼的（ab-离开；-rupt-打断。断开的→出其不意的、不按套路出牌的，与大家走了不同的方向）</p><hr><h4 id="interrupt和interpret区分"><a href="#interrupt和interpret区分" class="headerlink" title="interrupt和interpret区分"></a>interrupt和interpret区分</h4><p>interrupt 打断</p><p>interpret 解释；翻译</p><hr><p>bankrupt adj. 破产的；彻底缺乏的 vt. 使破产 n. 破产者（货币兑换商因资⾦短缺而被折断的条凳[不理解的话看下面]）</p><p>bank（堆放货币的条凳 &#x3D;&gt; 早期的银行）</p><p>bench n. 长凳，台，座 （和bank很相似）</p><p>banquet n.（正式的）宴会 vi. 参加宴会 vt. 宴请（摆在⻓凳上的⼩点⼼）</p><p>corrupt v. 贿赂，收买，腐蚀 adj. 腐败的，贪污的（cor-&#x3D;com-共同。共同打破规则→腐败）</p><blockquote><p>Violence on television corrupts the minds of children.</p><p>电视上的暴⼒镜头腐蚀了孩⼦们的思想。</p></blockquote><p>disrupt vt. 使混乱，使崩溃，使分裂，使瓦解（dis-分开。分开打断→分裂、瓦解）</p><p>erupt v. （尤指火山）爆发（e-向外。向外打破 &#x3D;&gt; 爆发）</p><h2 id="absence相关"><a href="#absence相关" class="headerlink" title="absence相关"></a>absence相关</h2><p>absence n. 缺乏，不存在，缺席（ab- + sence&#x3D;essence&#x3D;is是，存在。不存在→缺席）</p><p>absent adj. 缺席的；缺乏的，不存在的；⼼不在焉的</p><blockquote><p>absent-minded 大脑不在线；走神</p></blockquote><p>essence n. 本质，实质；精华（es&#x3D;is+辅⾳双写s引导名词后缀-ence）</p><p>essential adj. 本质的，基本的；净化的 n. 本质；要素</p><p>entity n. 实体；存在（物）；组织，机构；本质（ent&#x3D;es&#x3D;is+名词后缀-ity）</p><blockquote><p>One division of the company was broken oﬀ as a separate entity.</p><p>这家公司的⼀个部⻔脱离成了⼀个分开的实体。</p></blockquote><p>presence n. 出席，到场，存在，在（pre-在 前+sence。在前⾯出现→出席、到场）</p><p>present adj. 出席的，现在的 n. 现在，礼物 v. 赠送，提出</p><blockquote><p>由“出席的”延申出“现在”的意思，再由“现在”延申出“现在的”</p></blockquote><p>presently adv. ⼀会⼉，不久；现在，⽬前</p><p>represent v. 描述，表示；代表，代理；阐明，说明（再次出现→代表）</p><p>representative n. 代表，代理⼈ adj.（of）典型的，有代表性的</p><hr><h4 id="representative和agent区分"><a href="#representative和agent区分" class="headerlink" title="representative和agent区分"></a>representative和agent区分</h4><p>这两个词都有代表，代理人的意思，但是</p><p>agent：ag-&#x3D;act 行动 + ent …的人。替你行动的人 &#x3D;&gt; 代理人</p><p>而representative的级别更高，属于全权代理的人</p><hr><p>interest n.（in）兴趣， 要性；利益 v.（in）使发⽣兴趣（inter-在⾥⾯；est&#x3D;es&#x3D;is。①心里想的事→兴趣；②钱里的钱→利益）</p><p>hobby [‘hɔbi] n. 业余爱好，嗜好，兴趣（级别更高，会花时间投入，而interest只是感兴趣，不一定会去做）</p><p>sin n. 罪，罪恶 v. 犯罪（真实存在的罪⾏）</p><h2 id="absolute相关"><a href="#absolute相关" class="headerlink" title="absolute相关"></a>absolute相关</h2><p>absolute adj. 绝对的，完全的；确实的，肯定的（ab-离开+solute&#x3D;solve解开、松<br>开→完全松开、没有束缚→绝对的、完全的）</p><p>⭐solution n. 解答，解决办法；溶解，溶液（so-&#x3D;se- 分离 + lut&#x3D;loose解开 + 名词后缀-ion。解开→解决）</p><blockquote><p>lose失败的意思就是由loose解开得来，意为“与胜利远离”，就是失败了</p></blockquote><p>solve v. 解决，解答   soluble adj. 可溶的</p><p>resolve v. 决心；（使）分解，溶解；决议 n. 解决；决心（re-再、反复表强调+solve解决。⼀定解决→决心 ）</p><p>resolution n. 坚决，决⼼；决定，决议</p><p>resolute adj. 坚决的，果断的</p><p>dissolve v.（使）溶解，（使）融化；解散，取消（dis-分开+solve。分解、溶解）</p><hr><h4 id="lose-loss和loose区分"><a href="#lose-loss和loose区分" class="headerlink" title="lose,loss和loose区分"></a>lose,loss和loose区分</h4><p>lose [lu:z] v. 丢失，迷路，输掉，亏本，失败，⾛慢，使沉湎于</p><p>loss [lɔs, lɔ:s] n. 丧失，遗失；损失，损耗，亏损；失败</p><p>loose [lu:s] adj.（宽）松的；不精确的；⾃由的，散漫的</p><p>【注】lose和loose读音是不同的</p><hr><p>loosen v. 解开，放松（loose+en）</p><p>undo v. 松开，解开</p><hr><p>⭐luxury n. 奢侈，华贵；奢侈品 adj. 奢华的，豪华的（lux&#x3D;loose松开。没有节制&#x3D;&gt;奢侈）</p><p>luxurious [lʌɡ’ʒʊrɪəs] adj. 奢侈的；放纵的</p><p>analyse [‘ænəlaiz] vt.（analyze）分析，分解（ana-&#x3D;on在上 + lyse&#x3D;loose解开。在事情上分解&#x3D;&gt;分析）</p><p>analysis [ə’næləsis] n.（pl.analyses）分析；分解</p><p>analytic [,ænə’lɪtik. -kəl] adj.（analytical）分析的；分解的</p><hr><p>relax [rɪ’læks] v.（使）松驰，放松（re-回+lax&#x3D;lose。回到松懈的状态→放松）</p><p>release [rɪ’li:s] v. 释放，解放；发表，发⾏ n. 释放，豁免，放松（re-回+lease&#x3D;loose。撒⼿→释放）</p><p>relish [‘relɪʃ] n. 美味，味道，调味品，⻝欲，乐趣 v. 喜欢，品味（re-回+lish&#x3D;loose。释放⾹味→美味）</p><p>dilute [dai’lju:t, di-] vt. 稀释，冲淡 adj. 稀释的，冲淡的（di-&#x3D;dis分 开+lute&#x3D;loose。分解→稀释。对比dissolve溶解 ）</p><blockquote><p>Large classes dilute the quality of education that children receive.</p><p>大班上课会降低孩⼦所受教育的质量。</p></blockquote><p>laundry [‘lɔ:ndri, ‘lɑ:n-] n. 洗⾐房（店）；待洗⾐物，所洗⾐物（laund&#x3D;loose解开。与赃物分开冲洗）</p><p>lavatory [‘lævətəri, tɔ:ri] n. 厕所，盥洗室（lavat&#x3D;laund）</p><p><img src="https://s2.loli.net/2022/06/09/ScVlbMPnwyh5BoQ.jpg"></p><p>这个是飞机上你可以看到的厕所标志，下面的vacant是空的，未被占用的意思</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><input disabled="" type="checkbox"> interrupt和interpret区分</li><li><input disabled="" type="checkbox"> representative和agent区分</li><li><input checked="" disabled="" type="checkbox"> lose,loss和loose区分</li><li><input checked="" disabled="" type="checkbox"> ⭐solution n. 解答，解决办法；溶解，溶液（so-&#x3D;se- 分离 + lut&#x3D;loose解开 + 名词后缀-ion。解开→解决）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正斜杠(&quot; / &quot;)和反斜杠(&quot; &#92; &quot;)的区别</title>
      <link href="/2022/05/02/forwardAndBackwordSlash/"/>
      <url>/2022/05/02/forwardAndBackwordSlash/</url>
      
        <content type="html"><![CDATA[<h1 id="正斜杠-“-x2F-“-和反斜杠-“-“-的区别"><a href="#正斜杠-“-x2F-“-和反斜杠-“-“-的区别" class="headerlink" title="正斜杠(“ &#x2F; “)和反斜杠(“ \ “)的区别"></a>正斜杠(“ &#x2F; “)和反斜杠(“ \ “)的区别</h1><blockquote><p>反斜杠“\”是电脑出现了之后为了表示程序设计里的特殊含义才发明的专用标点。所以除了程序设计领域外，任何地方都不应该使用反斜杠。</p></blockquote><p><img src="https://s2.loli.net/2022/03/28/AnhzNDmES4yCteo.png" alt="slash"></p><p>英语：</p><blockquote><p><code>/ </code>英文是forward slash, <code>\</code>是backward slash<br>        形象些比喻的话，<code>/</code>是一个人站立着向前倾倒, 而<code>\</code>是一个人站立着向后倾倒。</p></blockquote><p>在系统中的区别：</p><blockquote><p>在绝大多数地方，用的都是&#x2F;（slash），包括Mac&#x2F;Linux，也包括URL。&#x3D;&#x3D;你唯一需要记住的是，Microsoft这个怪鸡在自己的操作系统里面偏要用\（backslash），使得自己与众不同。&#x3D;&#x3D;</p></blockquote><p>在Unix系统中，&#x2F;表示目录；\表示跳脱字符将特殊字符变成一般字符<br>Windows由于使用斜杠&#x2F;作为DOS命令提示符的参数标志了，为了不混淆，所以采用反斜杠\作为路径分隔符。所以目前windows系统上的文件浏览器都是用反斜杠\作为路径分隔符。<br>随着发展，DOS系统已经被淘汰了，命令提示符也用得很少，斜杠和反斜杠在大多数情况下可以互换，没有影响。现在在cmd中，已经不区分正斜杠和反斜杠了！</p><p>作为目录分割符</p><ul><li><p>Unix中只用斜杠(“ &#x2F; “)</p></li><li><p>Linux中目前正反斜杠后支持</p></li></ul><p>作为运算符号</p><ul><li><p>&#x2F; 表示除法（%是取余，还有取模的）</p></li><li><p>\表示转意。比如 \n 是换行</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
            <tag> 趣闻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript_如何遍历Object</title>
      <link href="/2022/05/02/ts%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/05/02/ts%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="如何遍历Object"><a href="#如何遍历Object" class="headerlink" title="如何遍历Object"></a>如何遍历Object</h1><p>不要使用 for in，<a href="https://stackoverflow.com/questions/65300784/declare-key-type-of-for-in-loop-in-typescript">参考这里</a></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，const是常量，如果你还需要在循环中对他进行改变，可以使用var变量</p><p>这个<code>Object.entries(obj))</code>是关键，它可以把obj（一个不可迭代的对象）转成一个可以迭代的对象</p>]]></content>
      
      
      <categories>
          
          <category> 编程文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语单词UNIT1</title>
      <link href="/2022/05/01/English/words/wordsUnit01/"/>
      <url>/2022/05/01/English/words/wordsUnit01/</url>
      
        <content type="html"><![CDATA[<h1 id="UNIT-1"><a href="#UNIT-1" class="headerlink" title="UNIT 1"></a>UNIT 1</h1><h2 id="abandon相关"><a href="#abandon相关" class="headerlink" title="abandon相关"></a>abandon相关</h2><p>abandon vt.放弃丢弃</p><p>（①a-&#x3D;at 朝向，处于…中 + bandon 禁令 &#x3D;&gt; 处于禁令中 —&gt; 放弃自身权利）</p><p>同源词汇</p><ul><li><p>band n.条，带，乐队（绑在一起的）一群 v.绑</p></li><li><p>bind v.捆，绑，包括</p></li></ul><p>bound adj.束缚的，一定的（当你做一件事，会遇到另一个绑定的事）</p><p>n.界限 v.&amp;n.跳（跃）</p><blockquote><p>You’re bound to feel nervous about your interview.</p></blockquote><p>bounce n.&#x2F;vi. 弹起 （拟声词：蹦）</p><p>boundary n. 边界线</p><p>bandage n. 绷带  v. 用绷带扎（读音很相似）</p><p>husband n.丈夫（hus&#x3D;house; hut 茅屋）（与房子绑定的人）</p><p>bend v.（使）弯曲；屈从  n. 弯曲；曲折（给射箭的弓绑弦—&gt;弓弯曲了）</p><p>bond n.结合（物），粘接（剂）；债券（本金与利息绑定）契约（绑定言行）</p><p>bundle n. 捆，包，束</p><blockquote><p>a bundle of money 一捆钱</p></blockquote><p>bunch n.（一）束，捆，串</p><hr><h4 id="bundle-amp-bunch区分："><a href="#bundle-amp-bunch区分：" class="headerlink" title="bundle&amp;bunch区分："></a>bundle&amp;bunch区分：</h4><p>bundle是用外力将不相关的东西绑在一起</p><p>bunch是天生的，自然就在一起</p><hr><p>banner n. 横幅，条状的旗（帜）（band条带 + er）</p><h2 id="abatement相关"><a href="#abatement相关" class="headerlink" title="abatement相关"></a>abatement相关</h2><p>abatement n. 减（免）税，打折，减少</p><p>（a-&#x3D;ad&#x3D;at 朝，去 + bate&#x3D;beat 打 –&gt; 去打压）</p><p>beat n.敲打；（心脏等）跳动 v.打败 <strong>（连击）</strong></p><p>hit v.打击 n.击中，成功而风行一时的事物 <strong>（单击）</strong></p><blockquote><p>They’ve released an album of their greatest hits(冲击人们而流行).</p></blockquote><p>battle n. 战役战斗 v. 战斗，斗争</p><p>combat v.&amp;n.战斗，搏斗 （com 来 + bat&#x3D;beat –&gt; 来一起打）</p><blockquote><p>to combat crime 可作动词</p></blockquote><p>come v.来，出现于，产生，是，成为，开始</p><p>bat n. 球拍，球棒；蝙蝠（①击打工具②蝙蝠拍打翅膀的声音：“啪”）</p><blockquote><p>batman 蝙蝠侠</p></blockquote><hr><p>程度依次减轻</p><p>war 战争 –&gt; battle 战役 –&gt; combat 打架</p><hr><p>fight v.&amp;n. 打（仗），搏斗</p><p>conflict n. 战斗，冲突 v.（with）抵触</p><p>battery n. 电池（组），（器具等）一组，一套</p><ul><li>batter 痛击，猛击</li></ul><p>boot n.靴，（车后座的）行李箱，解雇(一脚踢出去)</p><blockquote><p>beat 靴是给骑马人穿的，用来打马肚</p></blockquote><p>button n. 纽扣，开关（按钮） v. 扣紧</p><p>debate v.&amp;n. 争论，辩论（de 向下，彻底 –&gt;彻底打败)</p><p>bacterium n.(复)bacteria 细菌（来自希腊语bakterion棍、杆）</p><h2 id="abnormal相关"><a href="#abnormal相关" class="headerlink" title="abnormal相关"></a>abnormal相关</h2><p>abnormal adj. 反常的 （ab 离开）</p><p>nor conj.&amp;adv. 不（norm就是不偏左右的，标准）</p><p>norm n. 准则，规范</p><p>normal adj. 正常的（合乎准则的）</p><p>normalization n. 正常化</p><p>enormous adj. 巨大的，庞大的（e- 向外 -ous …的。超出规范的，超出本来体积的）</p><h2 id="aboard相关"><a href="#aboard相关" class="headerlink" title="aboard相关"></a>aboard相关</h2><p>aboard adv.&amp;prep. 在船(飞机，车)上，上传（在板上）</p><p>blackboard 黑板</p><p>board n. 板，全体委员（围着板坐的），伙食（板上的食物）  v. 上船</p><p>embark v. (使)上船，着手，从事（em&#x3D;in 进入 + bark 树皮–&gt;木船 &#x3D;&gt;开始新项目）</p><p>border n. 便捷 v. 交界，接近（专指国界）（船只的边缘&#x3D;&gt;边界国界）</p><p>cupboard n. 碗柜</p><p>keyboard n. 键盘 vt. 用键盘输入</p><p>abroad adv. 到国外，在传播，在流传（去&#x2F;在宽广的地方）</p><p>broad adj. 宽的，广阔的</p><p>overseas adj. 外国的，海外的  adv. 在海外</p><p>sea 海，大量</p><p>soul n. 灵魂，心灵，精神，精力，人</p><p>broadcast v.&amp;n. 广播</p><p>cast v. 投，扔，铸造（投入黄金），投票 n. 演员表（投在大屏幕上）</p><p>fore adv. 在前面  adj. 先前的，在前部  n. 前部</p><blockquote><p>before 以前(be&#x3D;是 + fore &#x3D;&gt;是前面的) </p></blockquote><p>forecast v.&amp;n. 预测预报（提前播出来）</p><p>breadth n. 宽度，幅度</p><blockquote><p>long&#x2F;length&amp;wide&#x2F;width</p></blockquote><h2 id="abolish相关"><a href="#abolish相关" class="headerlink" title="abolish相关"></a>abolish相关</h2><p>abolish vt. 废除（法律，习惯等）；取消（ab-离开 + ol 生长 + ish v.后缀 &#x3D;&gt; 不再生长）</p><p>old adj. 年老的</p><p>adult 成年人（ad- 朝 + ult&#x3D;音似old 去长大）</p><p>adolescent n. 青少年 adj. 青春期的（泛指年轻人；adolesc&#x3D;adult + ent adj后缀&#x3D;&gt; 去长大的）</p><p>teenager（专指十几岁的）（teen 十 + age 岁 + er 人）</p><p>elder adj. 年长的  n. 长辈</p><p>elderly adj. 较老的，年长的 n. 到了晚年的人</p><p>altitude n. 高度海拔，高处，高地（alt&#x3D;old 生长的，高的 + itude 名词后缀）</p><p>attitude n. 态度，看法</p><p>enhance v. 提高，增强（en&#x3D;in 注入，加强 + hance&#x3D;old 使生长）</p><p>coalition n. 结合体，同盟；联合，结合（co&#x3D;com 共同 + al 生长 + item n.后缀&#x3D;&gt;共同生长）</p><p>obsolete adj. 已废弃的，过时的（obs&#x3D;ob 相反 + olete&#x3D;old &#x3D;&gt; 不再生长的）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p><input disabled="" type="checkbox"> band和bind区分</p><p>band n. 条，带，乐队 v.绑</p><p>bind v. 捆，绑，包括</p></li><li><p><input disabled="" type="checkbox"> war,battle,combat区分</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
            <tag> 考研英语 </tag>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Youtube_SpringBoot+Angular实战</title>
      <link href="/2022/04/26/%5BYoutube%5DSpringBoot+Angular%E5%AE%9E%E6%88%98/"/>
      <url>/2022/04/26/%5BYoutube%5DSpringBoot+Angular%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Springboot和angular开发web项目"><a href="#使用Springboot和angular开发web项目" class="headerlink" title="使用Springboot和angular开发web项目"></a>使用Springboot和angular开发web项目</h1><h2 id="这个教程是面对谁的"><a href="#这个教程是面对谁的" class="headerlink" title="这个教程是面对谁的"></a>这个教程是面对谁的</h2><p>&#x3D;&#x3D;初学者&#x3D;&#x3D;，但前提是你熟悉各种java，nodejs，angular环境的安装，初步熟悉Java代码，明白JPA、JDBC等数据库交互的大概原理和使用方法</p><h1 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h1><h2 id="springboot项目创建"><a href="#springboot项目创建" class="headerlink" title="springboot项目创建"></a>springboot项目创建</h2><p>准备spring的依赖和项目POM参数</p><p>在<a href="https://start.spring.io/">spring快速开始界面</a>，选择你的参数</p><p>可以点击explore查看具体的pom文件参数，也可以点击generate直接下载工程文件</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>创建model，与数据库里的数据产生映射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token comment">//    @Id make it to be the primary key</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> jobTitle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> imageUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> employeeCode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有几个注解你要认识</p><ul><li>@Entity<br><code>@Entity</code> make sure that this class is mapped to any database that we have configured on the classpath</li><li>@Id<br>告诉springboot这是Id</li><li>@GeneratedValue(strategy &#x3D; GenerationType.AUTO)<br>告诉spring用何种方式生成这些值</li><li>@Column(nullable &#x3D; false, updatable &#x3D; false)<br>这是告诉Spring注解的这一行在数据库中不能为空，一旦赋值也不能被更新</li></ul><p>接下来配置一些数据库选项</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#MySQL Configuration</span><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost::3306/employeemanager</span><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span><span class="token comment">#设置数据库引擎</span><span class="token key attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.dialect.MySQL5Dialect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="会出现的问题"><a href="#会出现的问题" class="headerlink" title="会出现的问题"></a>会出现的问题</h3><p>springboot首先会报<code>CLIENT_PLUGIN_AUTH is required.</code></p><p>原因如下，是版本的问题</p><blockquote><p>The Spring Boot project creator will download the latest MySQL connector (currently Version 8) so if you are running an older version of MySQL then the CLIENT_PLUGIN_AUTH error probably results from this.</p></blockquote><p>你需要在pom.xml文件中修改mysql连接的版本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后确保<code>#MySQL Configuration</code>中有</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可连接成功</p><p>如果你的数据库已经存在，就可以正确连接，并且Hibernat会帮你自动创建表，表名就是你的实体类名称</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hibernate: create table employee <span class="token punctuation">(</span>id bigint not null, email varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, employee_code varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> not null, image_url varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, job_title varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, name varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, phone varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>, primary key <span class="token punctuation">(</span>id<span class="token punctuation">))</span> <span class="token assign-left variable">engine</span><span class="token operator">=</span>MyISAMHibernate: create table hibernate_sequence <span class="token punctuation">(</span>next_val bigint<span class="token punctuation">)</span> <span class="token assign-left variable">engine</span><span class="token operator">=</span>MyISAMHibernate: insert into hibernate_sequence values <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建repo仓库"><a href="#创建repo仓库" class="headerlink" title="创建repo仓库"></a>创建repo仓库</h3><p>我们需要一种方式来保存这个表中的内容，Jpa就是我们的mechanism</p><p>建立一个接口，接口拓展Jpa仓库，我们需要告诉Jpa，这个仓库是为哪个类准备的，并且告诉它主键的类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeRepo</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span>employee<span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h3><p>有了接口，我们需要使用服务，这样我们就可以在controller中使用它对仓库进行操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EmployeeRepo</span> employeeRepo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">EmployeeService</span><span class="token punctuation">(</span><span class="token class-name">EmployeeRepo</span> employeeRepo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>employeeRepo <span class="token operator">=</span> employeeRepo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有几点</p><ol><li>@Service</li></ol><p>这是声明这个类是服务</p><ol start="2"><li>@Autowired</li></ol><p>注入employee对象</p><ol start="3"><li>@Transactional</li></ol><p>使用这个注解的类或者方法表示该类里面的所有方法或者这个方法的事务由spring处理，来保证事务的<a href="https://so.csdn.net/so/search?q=%E5%8E%9F%E5%AD%90%E6%80%A7&spm=1001.2101.3001.7020">原子性</a>，即是方法里面对数据库操作，如果失败则spring负责回滚操作，成功则提交操作。</p><ol start="4"><li>因为我们要在服务中对仓库进行操作，所以也要引入仓库对象employeeRepo</li></ol><p>接下来我们就可以在服务类中写一些查询用户的代码，例如添加用户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加用户</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        employee<span class="token punctuation">.</span><span class="token function">setEmployeeCode</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> employeeRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//查询所有用户</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">findAllEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> employeeRepo<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//更新用户</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> employeeRepo<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的重点是通过id查询用户和通过Id删除用户，这会涉及两个要点问题，我们先看删除用户</p><ol><li><p>通过Id删除用户</p><p>由于employee Repo中没有定义这个方法，我们需要自己定义，所以需要在repo接口类中去实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">deleteEmployeeById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>这里需要注意的是，此处的方法是spring自动识别的，你需要完整的写出delete、Employee、By等等关键字，这是重要的接口，spring无法识别的话就无法帮你生成查询语句，会报错</strong></p><p>然后在服务中写删除方法</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;删除用户    public void delEmp(Long id)&#123;        employeeRepo.delEmpById(id);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;这是我们自定义方法的实现方式&#x3D;&#x3D;</p></li><li><p>通过Id查询用户</p><p>首先这是一个自定义方法，所以步骤和上面的一样，其次，查询用户时可能会出现没有找到id对应用户的情况，如果这时候还是要返回employee对象，明显是有问题的。</p><p>所以我们可以返回一个异常，在repo接口类中将方法修改为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">findEmployeeById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p><p>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测</p><p>Optional 类的引入很好的解决空指针异常。</p></blockquote><p>然后可以将方法写为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过id查找用户</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">findEmployeeById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> employeeRepo<span class="token punctuation">.</span><span class="token function">findEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">UserNotFoundException</span><span class="token punctuation">(</span><span class="token string">"user by id "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" was not found."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以看到我们新建了一个异常对象，<code>orElseThrow()</code>在前面的方法出现异常时会返回<code>UserNotFoundException</code>定义的信息<code>&quot;user by id &quot; + id + &quot; was not found.&quot;</code>。</p><p>为了使这个异常类可以使用，我们需要将异常类方法写一下，新建一个包exception，写如下类，需要继承<code>RuntimeException</code></p><pre class="line-numbers language-none"><code class="language-none">public class UserNotFoundException extends RuntimeException&#123;    public UserNotFoundException(String s) &#123;        super(s);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>super(s)可以调用父类的有参方法把s这个字符串传进去</p><p>&#x3D;&#x3D;这是我们处理异常的方式&#x3D;&#x3D;</p></li></ol><h3 id="回顾api设计，创建controller"><a href="#回顾api设计，创建controller" class="headerlink" title="回顾api设计，创建controller"></a>回顾api设计，创建controller</h3><p><img src="https://s2.loli.net/2022/04/21/7N6RshTckyH3W8G.png" alt="image-20220421164623585"></p><p>我们现在已经完成了数据库和服务的部分，现在需要controller来控制用户的操作</p><p>controller中不应该放置真正的逻辑代码，应该专注于接收请求，处理请求和返回请求</p><p>我们新建一个EmployeeResour.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>employeemanager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>employeemanager<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Employee</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>employeemanager<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">EmployeeService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @projectName: employeemanager * @package: com.hengxing.employeemanager * @className: EmployeeResource * @author: HengxingStu * @description: 整个程序的控制器，专注于处理请求 * @date: 4/21/2022 4:54 PM * @version: 1.0 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/employee"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeResource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">EmployeeService</span> employeeService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EmployeeResource</span><span class="token punctuation">(</span><span class="token class-name">EmployeeService</span> employeeService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>employeeService <span class="token operator">=</span> employeeService<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回所有用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getAllEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> allEmp <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">findAllEmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>allEmp<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//通过id返回用户</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/find/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">getEmployeeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">findEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>employee<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加用户</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Employee</span> newEmployee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">addEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>newEmployee<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//更新用户</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">updateEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Employee</span> updateEmployee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">updateEmp</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>updateEmployee<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除用户</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">deleteEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        employeeService<span class="token punctuation">.</span><span class="token function">delEmp</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来逐步拆解这些代码</p><p>首先，这个文件是整个程序的控制器，需要处理请求，所以我们需要告诉spring这是一个rest风格的controller，使用<code>@RestController</code></p><p><code>@RequestMapping(&quot;/employee&quot;)</code>告诉spring将<code>/employee</code>的请求发送给当前类或方法来处理，并且可以层层递进</p><p>由于在controller中我们需要使用服务，所以也需要对服务进行声明和注入<code>@RestController</code></p><p>编写Mapping，每个mapping就对应一个api，我们可以使用如下的http方式</p><ul><li><p><code>@GetMapping(&quot;/all&quot;)</code></p><p>通过get方法，这种方法只能接收零星的参数，接收参数时使用实例&lt;通过id返回用户&gt;方法中的方式，要注意的是，如下图所示的两个字段必须相同</p><p><img src="https://s2.loli.net/2022/04/21/XTr7NKpcUSZGL1l.png" alt="image-20220421170534313"></p></li><li><p><code>@PostMapping(&quot;/add&quot;)</code></p><p>通过post方法，可以在requestbody中通过JSON等方式传递信息，使用方法是在controller的mapping方法参数中注解<code>@RequestBody</code></p></li><li><p><code>@PutMapping(&quot;/update&quot;)</code></p><p>使用put方法，因为我们要修改数据库中的信息&#x3D;&#x3D;这一部分存疑，我并不知道为何使用put，需要补习http协议的知识&#x3D;&#x3D;</p></li><li><p><code>@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</code></p><p>也是通过get方法，只不过会告诉spring这是一个删除操作，方法中也可以在<code>ResponseEntity&lt;?&gt;</code>直接写问号，因为你不必返回任何信息，只需要返回状态码就行</p></li></ul><h3 id="使用PostMan进行api调试"><a href="#使用PostMan进行api调试" class="headerlink" title="使用PostMan进行api调试"></a>使用PostMan进行api调试</h3><p>postman可以帮我们发送各种http请求，比浏览器方便多了，安装方法略，自己找吧，应用总在更新，每天的安装方式都不同</p><p>或者可以使用<a href="https://httpie.io/">http Pi</a>，这是一个完全命令行的工具</p><h4 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h4><p>如果我们使用get方法向<code>http://localhost:8080/employee/all</code>发送请求，可以得到回复<code>[]</code>，里面没有信息是因为你还没添加用户，不过你可以在你的调试窗口看到http的状态码</p><p><img src="https://s2.loli.net/2022/04/21/aXvR6MoeCqiQlTf.png" alt="image-20220421183904855"></p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>使用POST方式向<code>http://localhost:8080/employee/add</code>发送请求，并在Body中附带你要添加的用户信息</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"daniel@encrpt.com"</span><span class="token punctuation">,</span>  <span class="token property">"imageUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.bootdey.com/img/Content/avatar/avatar1.png"</span><span class="token punctuation">,</span>  <span class="token property">"jobTitle"</span><span class="token operator">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Daniel Craig"</span><span class="token punctuation">,</span>  <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"1331497835"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你会得到以下回复</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;id&quot;: 1,  &quot;name&quot;: &quot;Daniel Craig&quot;,  &quot;email&quot;: &quot;daniel@encrpt.com&quot;,  &quot;jobTitle&quot;: &quot;JavaScript&quot;,  &quot;phone&quot;: &quot;1331497835&quot;,  &quot;imageUrl&quot;: &quot;https:&#x2F;&#x2F;bootdey.com&#x2F;img&#x2F;Content&#x2F;anatar&#x2F;avatar1.png&quot;,  &quot;employeeCode&quot;: &quot;a34c8fd0-e3d2-4b5c-837e-a123990f0be0&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新用户"><a href="#更新用户" class="headerlink" title="更新用户"></a>更新用户</h4><p>使用put方法<code>http://localhost:8080/employee/update</code>进行修改</p><p>不过要上传完整信息</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Daniel Craig"</span><span class="token punctuation">,</span>        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"daniel@encrpt.com"</span><span class="token punctuation">,</span>        <span class="token property">"jobTitle"</span><span class="token operator">:</span> <span class="token string">"JavaScript"</span><span class="token punctuation">,</span>        <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"1331497835"</span><span class="token punctuation">,</span>        <span class="token property">"imageUrl"</span><span class="token operator">:</span> <span class="token string">"https://bootdey.com/img/Content/avatar/avatar1.png"</span><span class="token punctuation">,</span>        <span class="token property">"employeeCode"</span><span class="token operator">:</span> <span class="token string">"a34c8fd0-e3d2-4b5c-837e-a123990f0be0"</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如这里我们修改了图片连接，你也可以自行修改更明显的地方</p><h5 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> org.hibernate.InstantiationException: No default constructor <span class="token keyword">for</span> entity:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是以为你的实体类没有默认的构造方法，加上就好了，在本例中是这样的</p><p><code>public Employee() &#123;&#125;</code></p><h2 id="前端部分-angular"><a href="#前端部分-angular" class="headerlink" title="前端部分-angular"></a>前端部分-angular</h2><h3 id="前端设计"><a href="#前端设计" class="headerlink" title="前端设计"></a>前端设计</h3><p>现在来看我们的前端部分的设计</p><p><img src="https://s2.loli.net/2022/04/21/PkfTGUFuASDtCH8.png" alt="image-20220421192055948"></p><p>UI就是用户在页面看到的，UI会连接到一个component中，component又可以访问一个service，这个service就是我们访问后端的方法</p><p>关于Angular如何使用可以去看官网文档</p><p>首先需要Angular中创建一个Service，这是我们访问后端的http服务</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Injectable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/core'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HttpClient <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/common/http'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Employee <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./employee'</span><span class="token punctuation">;</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  providedIn<span class="token operator">:</span><span class="token string">'root'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> apiServerUrl <span class="token operator">=</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> http<span class="token operator">:</span> HttpClient<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Employee<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>Employee<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiServerUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/employee/all</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">addEmploye</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span>Employee<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiServerUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/employee/add</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>employee<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">updateEmploye</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">put</span><span class="token generic class-name"><span class="token operator">&lt;</span>Employee<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiServerUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/employee/update</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>employee<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token function">deleteEmploye</span><span class="token punctuation">(</span>employeeId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">delete</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>apiServerUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/employee/delete/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employeeId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@Injectable</code>可以将服务作为依赖注入到组件中，更多关于此的内容请查看<a href="https://angular.cn/guide/architecture-services">angular依赖注入</a>，下图是依赖注入的原理</p><p><img src="https://angular.cn/generated/images/guide/architecture/injector-injects.png" alt="angular依赖注入"></p><p>你可以看到我们定义了访问api的各种请求，但这其中用到了一些实体类的内容，Angular并不能直接访问spring的内部类，所以我们需要在angular中创建一个镜像类</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  jobTitle<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  imageUrl<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  employeeCode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义好了服务，你就可以在component中使用它，先在构造方法中注入服务</p><h3 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h3><p><code>Uncaught Error: Type HttpClient does not have &#39;ɵmod&#39; property</code></p><p>stackOverflow的回答</p><ol><li>Don’t import HttpClient on app.module.ts</li><li>Don’t import HttpClientModule in app.component.ts</li><li>Don’t inject HttpClient directly in your app.component.ts, instead use a service.</li></ol><p>This are 3 errors&#x2F;bad practices I can see!</p><p>你可以查看这位回答者在下面给出了进一步的回答</p><blockquote><p>tutorial must be old,In angular we should import modules, i.e HttpClientModule.this will load all exported classes inside this particular module &amp; after that you can just use HttpClient as a injected variable inside component&#x2F;service constructor. Try creating module yourself to understand it better.</p></blockquote><p>言下之意就是&#x3D;&#x3D;应该引入HttpClientModule&#x3D;&#x3D;这个模组而不是HttpClient这个模块</p><h3 id="启动angular服务器"><a href="#启动angular服务器" class="headerlink" title="启动angular服务器"></a>启动angular服务器</h3><p>这时，你会发现你得到了一个错误<code>Access to XMLHttpRequest at &#39;http://localhost:8080/employee/all&#39; from origin &#39;http://localhost:4200&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p><p>因为你的web服务器和后端服务器使用的是不同的域名，后端拒绝了你的访问，你可以查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨域资源分享文档</a></p><p>为了解决跨域问题，你需要在后端中设置<code>CORS configuration</code>，在SpringBootApplication启动类中添加如下方法</p><pre class="line-numbers language-none"><code class="language-none">@Beanpublic CorsFilter corsFilter()&#123;CorsConfiguration corsConfiguration &#x3D; new CorsConfiguration();corsConfiguration.setAllowCredentials(true);corsConfiguration.setAllowedOrigins(Arrays.asList(&quot;http:&#x2F;&#x2F;localhost:4200&quot;));corsConfiguration.setAllowedHeaders(Arrays.asList(&quot;Origin&quot;, &quot;Access-Control-Allow-Origin&quot;,&quot;Content-Type&quot;,&quot;Accept&quot;, &quot;Authorization&quot;, &quot;Origin, Accept&quot;, &quot;X-Requested-With&quot;,&quot;Access-Control-Request-Method&quot;, &quot;Access-Control-Request-Headers&quot;));corsConfiguration.setExposedHeaders(Arrays.asList(&quot;Origin&quot;,&quot;Content-Type&quot;,&quot;Accept&quot;,&quot;Authorization&quot;, &quot;Access-Control-Allow-Origin&quot;, &quot;Access-Control-Allow-Credentials&quot;));corsConfiguration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource &#x3D; new UrlBasedCorsConfigurationSource();urlBasedCorsConfigurationSource.registerCorsConfiguration(&quot;&#x2F;**&quot;,corsConfiguration);return new CorsFilter(urlBasedCorsConfigurationSource);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>app.component.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar navbar-expand-lg navbar-dark bg-dark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-brand<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Employee Manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#navbarColor02<span class="token punctuation">"</span></span> <span class="token attr-name">aria-controls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-toggler-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>collapse navbar-collapse<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbarColor02<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar-nav mr-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-item active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#exampleModal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Employee <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>(current)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-inline my-2 my-lg-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchName<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control mr-sm-2<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search employees..<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>let employee of employees<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-6 col-xl-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card m-b-30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-body row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;employee?.imageUrl&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-fluid rounded-circle w-60<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-6 card-title align-self-center mb-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>Emma A. Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>m-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Graphics Designer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group list-group-flush<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-envelope float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>Email : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>PaulGoyette@gmail.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-phone float-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>Phone : 000 123-456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>float-right btn-group btn-group-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-pencil<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Delete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-times<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>social-links list-inline mb-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-inline-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Facebook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-facebook-f<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-inline-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Twitter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-twitter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-inline-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Skype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-skype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>styless.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* You can add global styles to this file, and also import other style files */</span><span class="token comment">/* import Bootstrap*/</span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span class="token selector">body</span><span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f5f5f5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.card</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 1px 2px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.05<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 2px 0 <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.05<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.w-60</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1, h2, h3, h4, h5, h6</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 10px<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> 600<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.social-links li a</span> <span class="token punctuation">&#123;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>89<span class="token punctuation">,</span>206<span class="token punctuation">,</span>181<span class="token punctuation">,</span>.85<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #707070<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，在引入employee的时候使用了<code>employee?.imageUrl</code>这个问号是为了防止服务器在emploee不存在时报错</p><p>现在介绍一种控制按钮展现页面的方法，通过统一的方法控制modal的展现</p><p>在按钮上通过<code>(click)=&quot;onOpenModal(null, &#39;add&#39;)&quot;</code>，控制并调用对应的modal，当我们点击按钮，就会触发<code>onOpenModal</code>方法，同时传入需要的参数，参数有何作用稍候解释，我们来看方法的代码</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">onOpenModal</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> mode<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main-container'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'button'</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-toggle'</span><span class="token punctuation">,</span><span class="token string">'modal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'add'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    button<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-target'</span><span class="token punctuation">,</span><span class="token string">'#addEmployeeModal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'edit'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      button<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-target'</span><span class="token punctuation">,</span><span class="token string">'#updateEmployeeModal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'delete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      button<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-target'</span><span class="token punctuation">,</span><span class="token string">'#deleteEmployeeModal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    container<span class="token operator">?.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入onOpenModal方法后，我们首先要做的是获取容器，通过Id找到了main-container，在这个容器中创建新的元素，我们这里创建的是button，为其附带了modal的参数，并且设置了不显示，通过我们传入的参数，我们可以通过id设置对应的<code>data-target</code>，指向各个modal。</p><p>最后一步就是通过在container中添加子元素，并点击，完成了业务逻辑。</p><p>在调试整个项目的逻辑时可以用开发者工具</p><p><img src="https://s2.loli.net/2022/04/22/X1W5lnIP3hQMUJz.png" alt="image-20220422185820205"></p><h3 id="angular表单"><a href="#angular表单" class="headerlink" title="angular表单"></a>angular表单</h3><p>若要使用angular的表单，在<code>app.module.ts</code>中引入</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FormsModule <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@angular/forms'</span><span class="token punctuation">;</span>imports<span class="token operator">:</span> <span class="token punctuation">[</span>    FormsModule  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>引入表单后就可以直接使用</p><h4 id="添加员工组件"><a href="#添加员工组件" class="headerlink" title="添加员工组件"></a>添加员工组件</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Add Employee Modal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmployeeModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmployeeModalLabel<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmployeeModalLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#addForm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span> <span class="token attr-name">(ngSubmit)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onAddEmloyee(addForm)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email Address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Job title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobTitle<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobTile<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Job title<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Phone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Phone<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Image URL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imageUrl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imageUrl<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Image URL<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add-employee-form<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addForm.invalid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>Save changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们来解析其中的要点</p><p><strong>表单部分</strong></p><p>首先除去主要的html部分，我们要绑定form表单，所以在form标签为这个DOM对象起一个名字</p><p><code> &lt;form #addForm=&quot;ngForm&quot; (ngSubmit)=&quot;onAddEmloyee(addForm)&quot;&gt;</code></p><p>这个ngForm，我并不明白它的意思，猜想应该是绑定了表单的类型，但我的html和js方面的知识不到家，并不了解</p><p><code>(ngSubmit)</code>是绑定了方法，并将这个表单作为ngForm类型的数据传参</p><blockquote><p> []表示绑定属性，()表示绑定事件，[()]表示双向绑定</p></blockquote><p>其次，每个input中的name会被当做这个表单数据的key，所以一定要有，并为其添加<code>ngModel </code>样式</p><p><code>&lt;input type=&quot;text&quot; ngModel name=&quot;name&quot; class=&quot;form-control&quot; id=&quot;name&quot; placeholder=&quot;Name&quot; required&gt;</code></p><p>最后，为提交按钮设置表单检查，如果表单未完成，则不能点击。使用属性绑定<code>[disabled]=&quot;addForm.invalid&quot;</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addForm.invalid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>Save changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦我们点击提交，angular就会自动帮我们把表单数据作为参数传给<code>ngSubmit</code>绑定的函数</p><p><strong>逻辑部分</strong></p><p><strong>先空着</strong></p><h4 id="修改员工组件"><a href="#修改员工组件" class="headerlink" title="修改员工组件"></a>修改员工组件</h4><p>我们这次从修改按钮先来看</p><p>在html部分我们可以看到，修改标签被我们写成这样</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onOpenModal(employee , 'edit')<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary tooltips<span class="token punctuation">"</span></span> <span class="token attr-name">data-placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span> <span class="token attr-name">data-original-title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-pencil<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中的click绑定了onOpenModal方法，传入当前的employee和字符串edit。它会执行onOpenModal方法（这里我们由于传入了新的员工数据，所以需要创建一个新的对象，所以进行了更新），进而执行<code>onUpdateEmloyee</code></p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> editEmployee<span class="token operator">:</span> Employee <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">'edit'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>editEmployee <span class="token operator">=</span> employee<span class="token punctuation">;</span><span class="token comment">//将接收到的参数赋值给要修改的新对象 </span>    button<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'data-target'</span><span class="token punctuation">,</span><span class="token string">'#updateEmployeeModal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>container<span class="token operator">?.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** * onUpdateEmloyee * 修改用户信息的方法 */</span> <span class="token keyword">public</span> <span class="token function">onUpdateEmloyee</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//employeeService调用updateEmploye方法，这里就已经修改了，然后我们再调用subscribe重新获取用户</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>employeeService<span class="token punctuation">.</span><span class="token function">updateEmploye</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>response<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>error<span class="token operator">:</span> HttpErrorResponse<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>employeeService</code>的<code>getEmployees</code>方法重新获取用户信息（相当于刷新界面）</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>employeeService<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>response<span class="token operator">:</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>employees <span class="token operator">=</span> response<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span>error<span class="token operator">:</span> HttpErrorResponse<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这便是我们完整的业务逻辑</p><p>现在需要在html中写出Edit Modal</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Edit Modal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmployeeModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employeeEditModalLabel<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">*ngIf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employees?.length == 0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-lg-12 col-md-12 col-xl-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmployeeModalLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Edit Employee &#123;&#123;editEmployee?.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#editForm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.name&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">aria-describedby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emailHelp<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 这里隐藏着id和employeeCode --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.id&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.employeeCode&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userCode<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userCode<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email Address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.email&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Job title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.jobTitle&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobTitle<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobTitle<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Job title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Phone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.phone&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Image URL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ngModel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;editEmployee?.imageUrl&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imageUrl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imageUrl<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Image URL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Close<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onUpdateEmloyee(editForm.value)<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>Save changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们一一介绍</p><p>首先是如何绑定表单，还是在<code>&lt;form&gt;标签</code>中写入<code>#editForm=&quot;ngForm&quot;</code>这样就将此表单声明为一个名为editForm的ngForm组件，其次在提交按钮绑定事件，调用更新方法，传入<code>editForm.value</code></p><p>其次，这里使用的是<code>editEmployee</code>这是在onOpenModal传入的参数，也就是我们要修改的对象。</p><p>你还可以看到id和employeeCode，但我们对他进行了隐藏，因为我们不希望用户修改这些信息，不过我们还是需要这些信息，因为我们如果没有id和employeeCode，我们的服务器就会误认为这是一个新的用户，为他分配新的id。</p><p><strong>Tips：清楚表单里的数据</strong></p><p>添加一个用户之后，再次点击添加，你会看到上一次添加的用户信息依然存在，解决这个问题，只需要在onAddEmloyee方法中（完成业务逻辑后）添加如下代码，就可以清空</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">addForm<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除员工组件"><a href="#删除员工组件" class="headerlink" title="删除员工组件"></a>删除员工组件</h4><p>有了前两个的经验，第三个就容易多了。</p><p>首先我们知道当点击删除按钮时，会通过<code>onOpenModal</code>引导到<code>deleteEmployeeModal</code>的模组中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Delete Modal --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployeeModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span> <span class="token attr-name">aria-labelledby</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteModelLabel<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>document<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteModelLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Are you sure you want to delete employee &#123;&#123;deleteEmployee?.name&#125;&#125;?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-secondary<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>No<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">(click)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onDeleteEmloyee(deleteEmployee?.id)<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-danger<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个modal中的按钮和onDeleteEmloyee方法绑定了，同时，我们需要将当前的用户的id传给删除的方法，这就需要我们再创建一个对象deleteEmployee</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">public</span> deleteEmployee<span class="token operator">:</span> Employee <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接收用户的id，调用deleteEmployee</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/**   * onDeleteEmloyee   * 删除用户信息的方法   */</span>   <span class="token keyword">public</span> <span class="token function">onDeleteEmloyee</span><span class="token punctuation">(</span>employeeId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//employeeService调用updateEmploye方法，这里就已经修改了，然后我们再调用subscribe重新获取这个用户</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>employeeService<span class="token punctuation">.</span><span class="token function">deleteEmploye</span><span class="token punctuation">(</span>employeeId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>response<span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span>error<span class="token operator">:</span> HttpErrorResponse<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="没有员工时的提示"><a href="#没有员工时的提示" class="headerlink" title="没有员工时的提示"></a>没有员工时的提示</h4><p>使用ngIf对数组长度进行判断，如果为零就显示</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- Notification for no employees --&gt;&lt;div *ngIf&#x3D;&quot;employees?.length &#x3D;&#x3D; 0&quot; class&#x3D;&quot;col-lg-12 col-md-12 col-xl-12&quot;&gt;  &lt;div class&#x3D;&quot;alert alert-info&quot; role&#x3D;&quot;alert&quot;&gt;    &lt;h4 class&#x3D;&quot;alert-heading&quot;&gt;NO EMPLOYEES!&lt;&#x2F;h4&gt;    &lt;p&gt;No Employees were found.&lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="纯前端的简单搜索组件"><a href="#纯前端的简单搜索组件" class="headerlink" title="纯前端的简单搜索组件"></a>纯前端的简单搜索组件</h4><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="完整的表单"><a href="#完整的表单" class="headerlink" title="完整的表单"></a>完整的表单</h2><p>通过ngsubmit来提交，可以提交</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">#registerForm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ngForm<span class="token punctuation">"</span></span> <span class="token attr-name">(ngSubmit)</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register(registerForm)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>UserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control form-control-lg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control form-control-lg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Confirm Password Again<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>passwordAgain<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>passwordAgain<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control form-control-lg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Confirm your password again<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>NickName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ngModel</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control form-control-lg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Enter your nickname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-center mt-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">[disabled]</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>registerForm.invalid<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> loginService<span class="token operator">:</span>LoginService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token function">register</span><span class="token punctuation">(</span>form<span class="token operator">:</span> NgForm<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>password <span class="token operator">==</span> form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>passwordAgain<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token operator">=</span> form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>username      <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>password <span class="token operator">=</span> form<span class="token punctuation">.</span>value<span class="token punctuation">.</span>password      <span class="token keyword">this</span><span class="token punctuation">.</span>loginService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"验证失败，请检查两次密码的拼写"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java JPA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【尚硅谷】用户画像日志记录</title>
      <link href="/2022/04/24/ITguiguUserProfile/"/>
      <url>/2022/04/24/ITguiguUserProfile/</url>
      
        <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><p>Ubuntu16.04</p><p><img src="https://s2.loli.net/2022/05/01/6TJx48l2XBd1Lsc.png" alt="image-20220404141952340"></p><h2 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h2><p>伪分布式配置</p><p>以Hadoop2.7.5版本为例</p><p>准备好安装文件</p><p><img src="https://s2.loli.net/2022/03/29/NCtIg8ao7cO3Ehw.jpg" alt="img"></p><p><img src="https://s2.loli.net/2022/03/29/GpjSbDFnZM8mzAv.jpg" alt="img"></p><p>解压安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> hadoop-2.7.5.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完后，在当前的目录下会出现一个名为 hadoop-2.7.5 的文件目录，这个目录就是 hadoop 的安装目录。</p><p>在 Hadoop 中包含了 3 个技术组件，分别是：</p><ul><li><p>分布式存储技术 - HDFS</p></li><li><p>分布式资源管理技术 - Yarn</p></li><li><p>分布式计算技术 - MapReduce</p></li></ul><p>那么，我们常说的 Hadoop 安装，实际上就包含了 HDFS 的安装、Yarn 的安装以及 MapReduce 的安装，我们接下来分别配置安装。</p><p>【JDK安装】</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查jdk版本，是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/29/8AD7Um9kwiNCLBR.jpg" alt="img"></p><p>成功后是这样的。</p><p>查看javahome的位置</p><p><img src="https://s2.loli.net/2022/03/29/qZH9oYPwVlJ7EBI.jpg" alt="img"></p><p>把Hadoop放到&#x2F;usr&#x2F;local下，并创建软连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> hadoop-2.7.5 /usr/local<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/local/hadoop-2.7.5/ /usr/local/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>给Hadoop文件夹赋予权限（生产环境不推荐）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> hadoop-2.7.5/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置环境变量</p><ul><li><p>局部环境变量：~&#x2F;.bashrc</p></li><li><p>全局环境变量：&#x2F;etc&#x2F;profile</p></li></ul><p>这里我图方便配置全局了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/usr/local/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin:./:<span class="token variable">$JAVA_HOME</span>/bin<span class="token comment">#JAVA_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64<span class="token builtin class-name">export</span> <span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置后生效一下</p><p>source &#x2F;etc&#x2F;profile</p><p>输入Hadoop的命令，你将看到</p><p>这时Hadoop安装好了，现在配置伪分布式：</p><p>这是它的配置文件以及路径</p><img src="https://s2.loli.net/2022/03/30/U76RD1ZkrQdjVHJ.png" alt="image-20220330154053686" style="zoom:80%;" /><ol><li>配置Hadoop运行环境</li></ol><p>hadoop_env.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The java implementation to use.  </span><span class="token comment">#这里最好直接写绝对路径了，搞不清楚怎么在这里写变量，这样写最保险</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/lib/jvm/java-8-openjdk-amd64/  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>core-site.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hengxing:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/data/hadoopdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>hdfs-site.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/data/hadoopdata/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>为了保证元数据的安全一般配置多个不同目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/data/hadoopdata/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>datanode 的数据存储目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>HDFS 的数据块的副本存储个数, 默认是3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>mapred-site.xml</li></ol><p>在hadoop的相关目录中没有此文件，但是有一个mapred-site.xml.template文件，将该文件复制一份为mapred-site.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> mapred-site.xml.template mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>yarn-site.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 指定ResourceManager的地址--></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hengxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定reducer获取数据的方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.local-dirs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///data/hadoopdata/yarn/nodemanager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>创建相关目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/hadoopdata/name<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/hadoopdata/data<span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/hadoopdata/yarn/nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时给予权限<code>sudo chmod -R 777 /data/</code></p><ol start="7"><li>对HDFS集群进行格式化，HDFS集群是用来存储数据的。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs namenode <span class="token parameter variable">-format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看到下图内容说明成功 <img src="https://s2.loli.net/2022/03/30/Ai47ENBrP3Rl6fF.png" alt="image-20220330160138305"></p><p>启动集群</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop-daemon.sh start namenode <span class="token comment">#启动主节点</span>hadoop-daemon.sh start datanode <span class="token comment">#启动从节点</span>yarn-daemon.sh start resourcemanageryarn-daemon.sh start nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>启动HDFS集群</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop-daemon.sh start namenode <span class="token comment">#启动主节点</span>hadoop-daemon.sh start datanode <span class="token comment">#启动从节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/29/s8gKjXZhbcSGnqA.jpg" alt="img"></p><ol start="2"><li>启动YARN集群</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yarn-daemon.sh start resourcemanageryarn-daemon.sh start nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/30/KGPnXZraIL1TMkw.png" alt="image-20220330160554080"></p><p><img src="https://s2.loli.net/2022/03/30/aAOcXnigJWzCvKw.png" alt="image-20220330160606652"></p><ol start="3"><li>启动作业历史服务器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mr-jobhistory-daemon.sh start historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/29/flKV6z5o2uAdZUx.jpg" alt="img"></p><p>jps可以查看是否启动成功</p><p>也可以在浏览器的ui界面查看，网址见截图</p><p><img src="https://s2.loli.net/2022/03/29/NxleSpOs8EK7M2G.jpg" alt="img"></p><p><img src="https://s2.loli.net/2022/03/29/TQelB4fsNnKAhXL.jpg" alt="img"></p><p>用自带的圆周率程序测试一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> jar /usr/local/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.5.jar pi <span class="token number">4</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/29/C1mM8Diwpy6OToY.jpg" alt="img"></p><p>关闭命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop-daemon.sh stop namenodehadoop-daemon.sh stop datanodeyarn-daemon.sh stop resourcemanageryarn-daemon.sh stop nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>关闭节点安全模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs dfsadmin <span class="token parameter variable">-safemode</span> leave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到[There are 2 missing blocks. The following files may be corrupted:]</p><p><a href="https://stackoverflow.com/questions/19205057/how-to-fix-corrupt-hdfs-files">外网上的解决方式</a> &lt;–  点击即可进入 </p><p>找到中断文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:~$ hdfs <span class="token function">fsck</span> -list-corruptfileblocksConnecting to namenode via http://hengxing:50070/fsck?ugi<span class="token operator">=</span>hengxing<span class="token operator">&amp;</span><span class="token assign-left variable">listcorruptfileblocks</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token assign-left variable">path</span><span class="token operator">=</span>%2FThe list of corrupt files under path <span class="token string">'/'</span> are:blk_1073741838/tmp/hadoop-yarn/staging/history/done/2022/03/24/000000/job_1648112897030_0001-1648113971406-hengxing-QuasiMonteCarlo-1648114019450-4-1-SUCCEEDED-default-1648113983899.jhistblk_1073741839/tmp/hadoop-yarn/staging/history/done/2022/03/24/000000/job_1648112897030_0001_conf.xmlThe filesystem under path <span class="token string">'/'</span> has <span class="token number">2</span> CORRUPT files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除它</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs <span class="token function">fsck</span> %你文件的路径% <span class="token parameter variable">-delete</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Hadoop-跑MapReduce-Job-的时候卡住-unhealthy-nodes-x3D-1"><a href="#Hadoop-跑MapReduce-Job-的时候卡住-unhealthy-nodes-x3D-1" class="headerlink" title="Hadoop 跑MapReduce Job 的时候卡住,unhealthy-nodes&#x3D;1"></a>Hadoop 跑MapReduce Job 的时候卡住,unhealthy-nodes&#x3D;1</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:~$ <span class="token function">yarn</span> <span class="token function">node</span> <span class="token parameter variable">-list</span> <span class="token parameter variable">-all</span><span class="token number">22</span>/03/30 <span class="token number">22</span>:38:39 INFO client.RMProxy: Connecting to ResourceManager at hengxing/192.168.59.140:8032Total Nodes:1         Node-Id     Node-StateNode-Http-AddressNumber-of-Running-Containers  hengxing:40085      UNHEALTHY    hengxing:8042                           <span class="token number">0</span>hengxing@hengxing:~$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节点被判断为unhealthy，有以下几点原因：</p><ul><li>节点的磁盘空间占用达到了阈值</li><li>节点的文件存储位置没有权限创建文件</li></ul><p>通常可以用以下几种方式解决</p><ul><li>提高阈值、清理磁盘空间</li><li>给hadoop存文件的文件夹修改权限和拥有者、直接重新设置存储文件夹（记得别放在home文件夹下，会有权限问题）</li></ul><p>你可以看到报错里说</p><p>local-dir are bad，说明这个文件有问题，应该是没权限新建job文件，被判定为了不健康</p><h2 id="Hive安装"><a href="#Hive安装" class="headerlink" title="Hive安装"></a>Hive安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载解压，加软连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> xvfz apache-hive-2.3.7-bin.tar.gz <span class="token parameter variable">-C</span> /usr/local/<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> apache-hive-2.3.7-bin/ hive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Hive Home</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=</span>/usr/local/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HIVE_HOME</span>/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$CLASSPATH</span>:/usr/local/hadoop/lib/*:.:/usr/local/hive/lib/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义仓库目录</p><pre class="line-numbers language-none"><code class="language-none">hdfs dfs -mkdir -p &#x2F;user&#x2F;hengxing&#x2F;warehouse#修改读写权限：&#x2F;usr&#x2F;local$ hdfs dfs -chmod 777 &#x2F;user&#x2F;hengxing&#x2F;warehouse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置文件</p><p>新建conf下的hive-site.xml，注意配置文件中的<value></value>中的内容必须在同一行上且不能有空格，即不能包含换行符和空格，否则就会出错，请检查其它的配置是否还在存在这类问题。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment">&lt;!--Licensed to the Apache Software Foundation (ASF) under one or morecontributor license agreements. See the NOTICE file distributed withthis work for additional information regarding copyright ownership.The ASF licenses this file to You under the Apache License, Version 2.0(the "License"); you may not use this file except in compliance withthe License. You may obtain a copy of the License athttp://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/metastore?createDatabaseIfNotExist=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>JDBC connect string for a JDBC metastore.To use SSL to encrypt/authenticate the connection, provide database-specific SSL flag in the connection URL.For example, jdbc:postgresql://myhost/db?ssl=true for postgres database.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hengxing:9000/user/hengxing/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>location of default database for the warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--     &lt;property>        &lt;name>hive.metastore.local&lt;/name>        &lt;value>true&lt;/value>    &lt;/property>    在0.10 0.11或者之后的hive版本 hive.metastore.local 属性不再使用,请去掉 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Driver class name for a JDBC metastore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.PersistenceManagerFactoryClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.datanucleus.api.jdo.JDOPersistenceManagerFactory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>class implementing the jdo persistence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://hengxing:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外在这里注意一点，这个文件中的<code>hive.metastore.local</code>配置在0.10 0.11或者之后的hive版本 hive.metastore.local 属性不再使用，请删掉，否则会报如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARN conf.HiveConf: HiveConf of name hive.metastore.local does not exist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把jdbc依赖包导入到hive&#x2F;lib下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/hive/lib$ <span class="token function">cp</span> ~/pkg/mysql-connector-java-5.1.49/mysql-connector-java-5.1.49.jar ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化hive元数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/hive$ ./bin/schematool <span class="token parameter variable">-dbType</span> mysql <span class="token parameter variable">-initSchema</span> root <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功后返回</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/apache-hive-2.3.7-bin/lib/log4j-slf4j-impl-2.6.2.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: Found binding <span class="token keyword">in</span> <span class="token punctuation">[</span>jar:file:/usr/local/hadoop-2.7.5/share/hadoop/common/lib/slf4j-log4j12-1.7.10.jar<span class="token operator">!</span>/org/slf4j/impl/StaticLoggerBinder.class<span class="token punctuation">]</span>SLF4J: See http://www.slf4j.org/codes.html<span class="token comment">#multiple_bindings for an explanation.</span>SLF4J: Actual binding is of <span class="token builtin class-name">type</span> <span class="token punctuation">[</span>org.apache.logging.slf4j.Log4jLoggerFactory<span class="token punctuation">]</span>Metastore connection URL: jdbc:mysql://localhost:3306/metastore?createDatabaseIfNotExist<span class="token operator">=</span>trueMetastore Connection Driver <span class="token builtin class-name">:</span> com.mysql.jdbc.DriverMetastore connection User: rootStarting metastore schema initialization to <span class="token number">2.3</span>.0Initialization script hive-schema-2.3.0.mysql.sqlInitialization script completedschemaTool completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以在MySQL中看到新创建的数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> metastore          <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span>+--------------------+<span class="token number">5</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动hive元存储thrift服务器"><a href="#启动hive元存储thrift服务器" class="headerlink" title="启动hive元存储thrift服务器"></a>启动hive元存储thrift服务器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:~/pkg$ hive <span class="token parameter variable">--service</span> metastore <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">64323</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hive打开DEBUG模式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hive <span class="token parameter variable">--hiveconf</span> <span class="token assign-left variable">hive.root.logger</span><span class="token operator">=</span>DEBUG,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为root用户授权</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39; with grant option;mysql&gt; flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>mysql警告</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Wed Mar <span class="token number">30</span> 01:15:25 CST <span class="token number">2022</span> WARN: Establishing SSL connection without server<span class="token string">'s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn'</span>t set. For compliance with existing applications not using SSL the verifyServerCertificate property is <span class="token builtin class-name">set</span> to <span class="token string">'false'</span><span class="token builtin class-name">.</span> You need either to explicitly disable SSL by setting <span class="token assign-left variable">useSSL</span><span class="token operator">=</span>false, or <span class="token builtin class-name">set</span> <span class="token assign-left variable">useSSL</span><span class="token operator">=</span>true and provide truststore <span class="token keyword">for</span> server certificate verification.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为MySQL在高版本需要指明是否进行SSL连接，在mysql连接字符串url中加入ssl&#x3D;true或者false即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">jdbc:mysql://127.0.0.1:3306/framework?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后可能会报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Path does not chain with any of the trust anchors<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则可以关掉SSL连接<code>useSSL=false</code></p><h3 id="HIVE无法正常启动，报找不到jdbc的驱动类"><a href="#HIVE无法正常启动，报找不到jdbc的驱动类" class="headerlink" title="HIVE无法正常启动，报找不到jdbc的驱动类"></a>HIVE无法正常启动，报找不到jdbc的驱动类</h3><p>通过启动脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable">$HIVE_HOME</span>./bin/hive  <span class="token parameter variable">--hiveconf</span> <span class="token assign-left variable">hive.root.logger</span><span class="token operator">=</span>DEBUG,console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动报如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">16</span>/08/25 <span class="token number">19</span>:06:18 <span class="token punctuation">[</span>main<span class="token punctuation">]</span>: DEBUG bonecp.BoneCPDataSource: JDBC URL <span class="token operator">=</span> jdbc:mysql://slave1:3306/hive?createDatabaseIfNotExist<span class="token operator">=</span>true, Username <span class="token operator">=</span> hive, partitions <span class="token operator">=</span> <span class="token number">1</span>, max <span class="token punctuation">(</span>per partition<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span>, min <span class="token punctuation">(</span>per partition<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>, idle max age <span class="token operator">=</span> <span class="token number">60</span> min, idle <span class="token builtin class-name">test</span> period <span class="token operator">=</span> <span class="token number">240</span> min, strategy <span class="token operator">=</span> DEFAULT<span class="token number">16</span>/08/25 <span class="token number">19</span>:06:19 <span class="token punctuation">[</span>BoneCP-pool-watch-thread<span class="token punctuation">]</span>: ERROR bonecp.BoneCP: Failed to acquire connection to jdbc:mysql://slave1:3306/hive?createDatabaseIfNotExist<span class="token operator">=</span>true. Sleeping <span class="token keyword">for</span> <span class="token number">7000</span> ms. Attempts left: <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是报没有找到连接mysql的jdbc驱动，&#x3D;&#x3D;但是实际上$HIVE_HOME&#x2F;lib下已经有mysql的驱动包了&#x3D;&#x3D;</p><p>说明驱动包没有问题，经过百度后发现是配置文件$HIVE_HOME&#x2F;conf&#x2F;hive-site.xml内配置有问题：</p><blockquote><p>原因是配置文件中的<value></value>中的内容必须在同一行上且不能有空格，即不能包含换行符和空格，否则就会出错，请检查其它的配置是否还在存在这类问题。</p></blockquote><p>上一个问题解决了，接着又报下面的错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FAILED: Execution Error, <span class="token builtin class-name">return</span> code <span class="token number">1</span> from org.apache.hadoop.hive.ql.exec.DDLTask. MetaException<span class="token punctuation">(</span>message:Got exception: java.net.ConnectException Call From hengxing/192.168.59.140 to localhost:9000 failed on connection exception: java.net.ConnectException: Connection refused<span class="token punctuation">;</span> For <span class="token function">more</span> details see:  http://wiki.apache.org/hadoop/ConnectionRefused<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网上查相关资料的话，会说这是因为hdfs的datanode没启动，但我的明显不是这样，仔细看报错，他说<code>From hengxing/192.168.59.140 to localhost:9000</code>的连接失败，<code>localhost:9000</code>可用吗？我们telnet一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/hadoop/etc/hadoop$ telnet localhost <span class="token number">9000</span>Trying <span class="token number">127.0</span>.0.1<span class="token punctuation">..</span>.telnet: Unable to connect to remote host: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并不行，仔细想想这是哪里的配置，哦，是元数据服务的地址。我应该设置的是hdfs的地址，hdfs的地址又是什么呢？看看你Hadoop的webUI</p><p><img src="https://s2.loli.net/2022/03/30/dehg6lTj8X2GbDO.png" alt="image-20220330165909687"></p><p>是<code>hengxing:9000</code>，telnet一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/hadoop/etc/hadoop$ telnet hengxing <span class="token number">9000</span>Trying <span class="token number">192.168</span>.59.140<span class="token punctuation">..</span>.Connected to hengxing.Escape character is <span class="token string">'^]'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你看，hdfs是启动的，把hive-site.xml中的<code>hive.metastore.warehouse.dir</code>配置变成这个地址吧</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hengxing:9000/user/hengxing/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>location of default database for the warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，问题来了，按理说这两个地址都是我当前的本机啊，并没有本质的区别，可是别忘记，这是两张不同的网卡，你用ifconfig看一下</p><p><img src="https://s2.loli.net/2022/03/30/uaxs4mFhE8YSlbW.png" alt="image-20220330170822427"></p><p>明白了吧，网卡不同，它所在的端口也就不同。</p><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>在hive中创建一个数据库，用来存放你系统的数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">hive&gt; create database ecommerce;OKTime taken: 0.099 secondshive&gt; show databases;OKdefaultecommerceTime taken: 0.031 seconds, Fetched: 2 row(s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在MySQL中建数据库，存放原始数据，这里的数据是假设由真实数据导入的，作为业务最初始的数据集。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; create database ecommerce charset&#x3D;utf8;Query OK, 1 row affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h3><p>这些数据内容，主要可以分为：用户信息，商品信息，订单信息，运营相关信息，服务相关信息五大类，我们后续可以根据这个标准做标签建模。</p><ul><li>用户信息表（t_member）</li><li>用户地址表（t_member_addr）</li><li>商品信息表（t_commodity）</li><li>商品类别信息表（t_commodity_cate）</li><li>订单表（t_order）</li><li>订单商品表（t_order_commodity）</li><li>优惠券表（t_coupon）</li><li>用户优惠券表（t_coupon_member）</li><li>订单优惠券表（t_coupon_order）</li><li>快递表（t_delivery）</li><li>反馈表（t_feedback）</li><li>商店表（t_shop）</li><li>商家订单表（t_shop_order，订单对于卖家也有记录）</li><li>后台用户表（t_user，员工表）</li></ul><p>要打开mysql远程连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/etc/mysql/mysql.conf.d$ <span class="token function">vim</span> mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到bind-address &#x3D; 127.0.0.1这一行<br>        改为bind-address &#x3D; 0.0.0.0即可</p><p>把ddl文件拖进navicat执行</p><img src="https://s2.loli.net/2022/03/30/o2aDupv3lzPebNS.png" alt="image-20220330184253874" style="zoom: 67%;" /><img src="https://s2.loli.net/2022/03/30/AdHDMq1RiNSP9sJ.png" alt="image-20220330184331847" style="zoom:67%;" /><p>一共14张表</p><h3 id="配置sqoop做数据迁移"><a href="#配置sqoop做数据迁移" class="headerlink" title="配置sqoop做数据迁移"></a>配置sqoop做数据迁移</h3><p>解压sqoop安装包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:~/pkg$ <span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz <span class="token parameter variable">-C</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为sqoop添加软连接（可选）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> sqoop-1.4.7.bin__hadoop-2.6.0/ sqoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加mysql的连接器jar包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:~/pkg/mysql-connector-java-5.1.49$ <span class="token function">cp</span> mysql-connector-java-5.1.49-bin.jar /usr/local/sqoop-1.4.7.bin__hadoop-2.6.0/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外注意，还应该把hive-site.xml拷贝到sqoop&#x2F;conf下面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/sqoop$ <span class="token function">cp</span> /usr/local/hive/conf/hive-site.xml conf/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加环境变量，便于以后执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#sqoop</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SQOOP_HOME</span><span class="token operator">=</span>/usr/local/sqoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$SQOOP_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改配置文件，加入hive的环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/sqoop/conf$ <span class="token function">mv</span> sqoop-env-template.sh sqoop-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=</span>/usr/local/hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传<code>datamigrate.sh</code>脚本，检查脚本是否有错误，执行，脚本内容在后</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install dos2unix #下载dos转unix工具hengxing@hengxing:~&#x2F;profile_tool$ dos2unix datamigrate.sh dos2unix: converting file datamigrate.sh to Unix format ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function-name function">sq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sqoop <span class="token function">import</span> <span class="token punctuation">\</span><span class="token parameter variable">--connect</span> jdbc:mysql://localhost:3306/ecommerce <span class="token punctuation">\</span><span class="token parameter variable">--username</span> root <span class="token punctuation">\</span><span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token punctuation">\</span><span class="token parameter variable">--table</span> <span class="token variable">$1</span> <span class="token punctuation">\</span>--num-mappers <span class="token number">1</span> <span class="token punctuation">\</span>--hive-import <span class="token punctuation">\</span>--fields-terminated-by <span class="token string">"<span class="token entity" title="\t">\t</span>"</span> <span class="token punctuation">\</span>--hive-overwrite <span class="token punctuation">\</span>--hive-database ecommerce <span class="token punctuation">\</span>--hive-table <span class="token variable">$1</span><span class="token punctuation">&#125;</span>sq t_commoditysq t_commodity_catesq t_couponsq t_coupon_membersq t_coupon_ordersq t_deliverysq t_feedbacksq t_membersq t_member_addrsq t_ordersq t_order_commoditysq t_shopsq t_shop_ordersq t_user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yarn-杀死-application-命令"><a href="#yarn-杀死-application-命令" class="headerlink" title="yarn 杀死 application 命令"></a>yarn 杀死 application 命令</h4><p><img src="https://s2.loli.net/2022/03/30/rEjN8LHM2iwocUJ.png" alt="image-20220330211003135"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> application <span class="token parameter variable">-kill</span> application_1648627463824_0001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可杀死</p><h4 id="hive没有找到类HiveConf"><a href="#hive没有找到类HiveConf" class="headerlink" title="hive没有找到类HiveConf"></a>hive没有找到类HiveConf</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">22</span>/03/31 <span class="token number">14</span>:30:23 ERROR hive.HiveConfig: Could not load org.apache.hadoop.hive.conf.HiveConf. Make sure HIVE_CONF_DIR is <span class="token builtin class-name">set</span> correctly.<span class="token number">22</span>/03/31 <span class="token number">14</span>:30:23 ERROR tool.ImportTool: Import failed: java.io.IOException: java.lang.ClassNotFoundException: org.apache.hadoop.hive.conf.HiveConf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们先看hive命令中有没有这个类</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/hive/lib$ jar tf hive-common-2.3.7.jar <span class="token operator">|</span> <span class="token function">grep</span> HiveConf.classorg/apache/hadoop/hive/conf/HiveConf.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有，只是没找到。所以我设置了下面的环境变量，注意是在<code>/etc/profile</code>下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_CONF_DIR</span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/conf<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CLASSPATH</span><span class="token operator">=</span><span class="token variable">$HADOOP_CLASSPATH</span><span class="token builtin class-name">:</span><span class="token variable">$HIVE_HOME</span>/lib/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是并没有什么卵用，网上还推荐了一步，将hive 里面的lib下的<code>hive-exec-**.jar</code> 放到sqoop 的lib 下，最后成功了。</p><h2 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h2><h3 id="下载、安装、配置"><a href="#下载、安装、配置" class="headerlink" title="下载、安装、配置"></a>下载、安装、配置</h3><p>地址:<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-8-5">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-6-8-5</a></p><p>下载后，上传并解压</p><p>把es放到&#x2F;usr&#x2F;local下，并创建软连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-snf</span> elasticsearch-6.8.5/ es<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hengxing@hengxing:/usr/local/es$ <span class="token builtin class-name">cd</span> config/hengxing@hengxing:/usr/local/es/config$ <span class="token function">ls</span>elasticsearch.yml  log4j2.properties  roles.yml  users_rolesjvm.options        role_mapping.yml   <span class="token function">users</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改elasticsearch.yml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#-----集群名称------</span>cluster.name: hengxing<span class="token comment"># ------- Node名称 -----------</span><span class="token comment"># Use a descriptive name for the node:</span>node.name: hengxing_node1<span class="token comment"># ------------- Paths ---------------</span><span class="token comment"># Path to directory where to store the data (separate multiple locations by comma):</span>path.data: /home/hengxing/data/esdata/data<span class="token comment"># Path to log files:</span>path.logs: /home/hengxing/data/esdata/logs<span class="token comment"># ------------------ Network -------------------</span><span class="token comment"># Set the bind address to a specific IP (IPv4 or IPv6):0.0.0.0是允许所有IP访问</span>network.host: <span class="token number">0.0</span>.0.0<span class="token comment"># Set a custom port for HTTP:</span>http.port: <span class="token number">9200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改jvm.options</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## You should always set the min and max JVM heap</span><span class="token comment">## size to the same value. For example, to set</span><span class="token comment">## the heap to 4 GB, set:</span><span class="token comment">##</span><span class="token parameter variable">-Xms1g</span><span class="token parameter variable">-Xmx1g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/es/bin/elasticsearch <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问地址<a href="http://hengxing:9200/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0">http://hengxing:9200/，可以看到</a></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"hengxing_node1"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"hengxing"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"NnCvOW_LRLmTKrdApgxWRw"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"6.8.5"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"78990e9"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2019-11-13T20:04:24.100411Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"7.7.2"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"5.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"5.0.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>[报错]max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [655360]</p><p>sudo vim &#x2F;etc&#x2F;sysctl.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">655360</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再执行<code>sysctl -p</code>即可</p><p>启动成功后可以访问</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"hengxing_node1"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_name"</span> <span class="token operator">:</span> <span class="token string">"hengxing"</span><span class="token punctuation">,</span>  <span class="token property">"cluster_uuid"</span> <span class="token operator">:</span> <span class="token string">"NnCvOW_LRLmTKrdApgxWRw"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"number"</span> <span class="token operator">:</span> <span class="token string">"6.8.5"</span><span class="token punctuation">,</span>    <span class="token property">"build_flavor"</span> <span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    <span class="token property">"build_type"</span> <span class="token operator">:</span> <span class="token string">"tar"</span><span class="token punctuation">,</span>    <span class="token property">"build_hash"</span> <span class="token operator">:</span> <span class="token string">"78990e9"</span><span class="token punctuation">,</span>    <span class="token property">"build_date"</span> <span class="token operator">:</span> <span class="token string">"2019-11-13T20:04:24.100411Z"</span><span class="token punctuation">,</span>    <span class="token property">"build_snapshot"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"lucene_version"</span> <span class="token operator">:</span> <span class="token string">"7.7.2"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_wire_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"5.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"minimum_index_compatibility_version"</span> <span class="token operator">:</span> <span class="token string">"5.0.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"tagline"</span> <span class="token operator">:</span> <span class="token string">"You Know, for Search"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kibana安装"><a href="#kibana安装" class="headerlink" title="kibana安装"></a>kibana安装</h2><h3 id="下载、安装、配置-1"><a href="#下载、安装、配置-1" class="headerlink" title="下载、安装、配置"></a>下载、安装、配置</h3><p>【下载地址】<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-6-8-5">https://www.elastic.co/cn/downloads/past-releases/kibana-6-8-5</a></p><p>老一套，接着去改配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server.host: <span class="token string">"hengxing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/local/kibana/bin/kibana <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cause: undefined, path: <span class="token punctuation">[</span> <span class="token string">'basePath'</span> <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> FATAL  Error: <span class="token punctuation">[</span>server.basePath<span class="token punctuation">]</span>: must start with a slash, don't end with one<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是因为写了basepath，并且报错写的很明显了。在这里可以注释掉</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>在DevTools中 <code>PUT /usertag</code></p><p>再去Dashboard中的Index Management中就可以看到这个查询</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>为了试验，我们添加一个查询<code>PUT /user</code>，然后添加一条数据</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">POST /user/_doc/<span class="token number">1</span><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Tifa"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能在控制台得到反馈</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>  <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"_version"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"result"</span> <span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"_seq_no"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"_primary_term"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对这用户数据进行查询<code>GET /user/_search</code>，可以得到用户数据</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Tifa"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">17</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要进行条件查询，附加条件即可，不过我们还要多加两条数据，还是按照刚才的post方法</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Cloud"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Tifa"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Aurith"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>查询名字为Cloud<strong>或</strong>年龄大于18小于20岁的</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /user/_search<span class="token punctuation">&#123;</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Cloud"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">20</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.287682</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.287682</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Cloud"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Aurith"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">18</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询名字为Cloud<strong>且</strong>年龄大于18小于20岁的</p><p>结果：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.287682</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"_index"</span> <span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>        <span class="token property">"_type"</span> <span class="token operator">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span>        <span class="token property">"_id"</span> <span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>        <span class="token property">"_score"</span> <span class="token operator">:</span> <span class="token number">1.287682</span><span class="token punctuation">,</span>        <span class="token property">"_source"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"Cloud"</span><span class="token punctuation">,</span>          <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="项目架构和工具类"><a href="#项目架构和工具类" class="headerlink" title="项目架构和工具类"></a>项目架构和工具类</h1><h2 id="IDEA项目"><a href="#IDEA项目" class="headerlink" title="IDEA项目"></a>IDEA项目</h2><p>新建Maven项目，参数如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">GroupId：com.hengxingArtifactid：EcommerceUserProfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>依赖文件POM，及版本信息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--定义版本信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spark.version</span><span class="token punctuation">></span></span>2.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spark.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springboot.version</span><span class="token punctuation">></span></span>2.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springboot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">></span></span>6.8.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--自动生成getter/setter等方法，为配合此依赖还需安装插件lombok--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.59<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--json转换器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring boot 相关依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springboot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springboot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springboot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springboot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spark 相关依赖，需要core、sql和hive--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_$&#123;scala.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spark.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_$&#123;scala.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spark.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-hive_$&#123;scala.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spark.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;fastjson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;elasticsearch.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;elasticsearch.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Java High Level REST Client --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;elasticsearch.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开发环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build.profile.id</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build.profile.id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 此标签可以切换生产环境和开发环境 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--生产环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build.profile.id</span><span class="token punctuation">></span></span>prod<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build.profile.id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--用resource定义打包时的资源文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 过滤其中的配置，符合条件的使用maven配置将其覆盖 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--除了这里声明的配置，其他的都可以被maven默认的配置覆盖--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>application-*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application-$&#123;build.profile.id&#125;.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装lombok插件</p><p><img src="https://s2.loli.net/2022/03/31/kbnKUB7RZyXJVrE.png" alt="image-20220331210805710"></p><p>设置远程连接，将服务器中hive的<code>hive-site.xml</code>文件拷贝至resources文件夹下</p><h2 id="编写类文件"><a href="#编写类文件" class="headerlink" title="编写类文件"></a>编写类文件</h2><h3 id="个人标签展示"><a href="#个人标签展示" class="headerlink" title="个人标签展示"></a>个人标签展示</h3><p>编写用户标签提取的文件，分成两种，一种是平台用户标签，另一种是个人用户标签提取，分别写两个包</p><p>SparkUtil.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SparkSession</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkUtils</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义一个Spark Session的会话池</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SparkSession</span><span class="token punctuation">></span></span> sessionPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化spark session的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SparkSession</span> <span class="token function">initSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//先判断会话池中是否由session，如果有，直接用，没就创建</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> sessionPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> sessionPool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"hadoop.home.dir"</span><span class="token punctuation">,</span><span class="token string">"C:\\tmp\\hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SparkSession</span> session <span class="token operator">=</span> <span class="token class-name">SparkSession</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">appName</span><span class="token punctuation">(</span><span class="token string">"UserProfile-etl"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">master</span><span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"es.nodes"</span><span class="token punctuation">,</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span>  <span class="token comment">//elasticsearch的节点</span>                <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"es.port"</span><span class="token punctuation">,</span><span class="token string">"9200"</span><span class="token punctuation">)</span>   <span class="token comment">//elasticsearch的端口</span>                <span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string">"ex.index.auto.create"</span><span class="token punctuation">,</span><span class="token string">"false"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enableHiveSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//启用hive支持</span>                <span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionPool<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>memberEtl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>etls<span class="token punctuation">.</span>platform</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">SparkUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Dataset</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Row</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SparkSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberEtl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"hadoop.home.dir"</span><span class="token punctuation">,</span><span class="token string">"C:\\tmp\\hadoop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//初始化一个sparksession</span>        <span class="token class-name">SparkSession</span> session <span class="token operator">=</span> <span class="token class-name">SparkUtils</span><span class="token punctuation">.</span><span class="token function">initSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        写sql查询想要的数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberSex</span><span class="token punctuation">></span></span> memberSexes <span class="token operator">=</span> <span class="token function">memberSexEtl</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberChannel</span><span class="token punctuation">></span></span> memberChannels <span class="token operator">=</span> <span class="token function">memberChannelEtl</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberMpSub</span><span class="token punctuation">></span></span> memberMpSubs <span class="token operator">=</span> <span class="token function">memberMpSubEtl</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MemberHeat</span> memberHeat <span class="token operator">=</span> <span class="token function">memberHeatEtl</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        拼成想要展示的结果，给前端</span>        <span class="token class-name">MemberVo</span> memberVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memberVo<span class="token punctuation">.</span><span class="token function">setMemberSexes</span><span class="token punctuation">(</span>memberSexes<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberVo<span class="token punctuation">.</span><span class="token function">setMemberChannels</span><span class="token punctuation">(</span>memberChannels<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberVo<span class="token punctuation">.</span><span class="token function">setMemberMpSubs</span><span class="token punctuation">(</span>memberMpSubs<span class="token punctuation">)</span><span class="token punctuation">;</span>        memberVo<span class="token punctuation">.</span><span class="token function">setMemberHeat</span><span class="token punctuation">(</span>memberHeat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//控制台打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=====ETL数据来啦=====\n"</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>memberVo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//统计平台用户性别分布</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberSex</span><span class="token punctuation">></span></span> <span class="token function">memberSexEtl</span><span class="token punctuation">(</span><span class="token class-name">SparkSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//写sql，查询得到一个dataset</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> dataset <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select sex as memberSex, count(id) as sexCount "</span> <span class="token operator">+</span>                <span class="token string">"from ecommerce.t_member group by sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先将dataset转成list</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> dataset<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将list转成流，进行每一行数据的遍历，转成memberSex</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberSex</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">MemberSex</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//用户注册渠道的分布统计</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberChannel</span><span class="token punctuation">></span></span> <span class="token function">memberChannelEtl</span><span class="token punctuation">(</span><span class="token class-name">SparkSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> dataset <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>                <span class="token string">"select member_channel as memberChannel, count(id) as channelCount "</span> <span class="token operator">+</span>                        <span class="token string">" from ecommerce.t_member group by member_channel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> dataset<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberChannel</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">MemberChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    * sql中if()的用法    * if(&lt;筛选条件>,&lt;匹配时返回>,&lt;不匹配时返回>)    * */</span>    <span class="token comment">//媒体平台关注分布统计</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberMpSub</span><span class="token punctuation">></span></span> <span class="token function">memberMpSubEtl</span><span class="token punctuation">(</span><span class="token class-name">SparkSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> sub <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>                <span class="token string">"select count(if(mp_open_id !='null',true,null)) as subCount, "</span> <span class="token operator">+</span>                        <span class="token string">" count(if(mp_open_id ='null',true,null)) as unSubCount "</span> <span class="token operator">+</span>                        <span class="token string">" from ecommerce.t_member"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> sub<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberMpSub</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">MemberMpSub</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//平台用户热度分布统计</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MemberHeat</span> <span class="token function">memberHeatEtl</span><span class="token punctuation">(</span><span class="token class-name">SparkSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//reg，complete从用户表中提取</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> reg_complete_count <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>                <span class="token string">"select count(if(phone = 'null',true,null)) as reg,"</span> <span class="token operator">+</span>                <span class="token string">" count(if(phone != 'null',true,null)) as complete"</span> <span class="token operator">+</span>                <span class="token string">" from ecommerce.t_member"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//order, orderAgain从订单表中提取</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> order_andAgain_count <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select"</span> <span class="token operator">+</span>                <span class="token string">" count(if(t.orderCount = 1,true,null)) as order,"</span> <span class="token operator">+</span>                <span class="token string">" count(if(t.orderCount >= 2,true,null)) as orderAgain"</span> <span class="token operator">+</span>                <span class="token string">" from (select count(order_id) as orderCount, member_id from ecommerce.t_order group by member_id) as t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//coupon,买了消费券人数，从t_coupon_member表提取，对member_id进行去重，然后count</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> coupon_count <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select"</span> <span class="token operator">+</span>                <span class="token string">" count(distinct member_id) as coupon from ecommerce.t_coupon_member "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//最终合并</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> heat <span class="token operator">=</span> coupon_count<span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span>reg_complete_count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">crossJoin</span><span class="token punctuation">(</span>order_andAgain_count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先将dataset转成list</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> heat<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这一次我们只有一条数据，取出第一个就可以了，这里是为了复用代码</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberHeat</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">MemberHeat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//    定义一个最终想要生成的ViewObject，用来展示饼图</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberVo</span><span class="token punctuation">&#123;</span>        <span class="token comment">//由四部分构成</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberSex</span><span class="token punctuation">></span></span> memberSexes<span class="token punctuation">;</span>    <span class="token comment">//性别统计信息</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberChannel</span><span class="token punctuation">></span></span> memberChannels<span class="token punctuation">;</span> <span class="token comment">//渠道统计信息</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MemberMpSub</span><span class="token punctuation">></span></span> memberMpSubs<span class="token punctuation">;</span> <span class="token comment">//是否关注媒体平台统计</span>        <span class="token keyword">private</span> <span class="token class-name">MemberHeat</span> memberHeat<span class="token punctuation">;</span>  <span class="token comment">//用户热度统计</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberSex</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> memberSex<span class="token punctuation">;</span><span class="token comment">//性别编号</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> sexCount<span class="token punctuation">;</span>   <span class="token comment">//当前性别的count数量</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberChannel</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> memberChannel<span class="token punctuation">;</span>      <span class="token comment">//渠道编号</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> channelCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberMpSub</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> subCount<span class="token punctuation">;</span>   <span class="token comment">//已关注的用户统计数</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> unSubCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MemberHeat</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> reg<span class="token punctuation">;</span>        <span class="token comment">//只注册未填手机号的用户</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> complete<span class="token punctuation">;</span>   <span class="token comment">//填了手机号的</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> order<span class="token punctuation">;</span>    <span class="token comment">//下过单</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderAgain<span class="token punctuation">;</span> <span class="token comment">//多次下单</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> coupon<span class="token punctuation">;</span>     <span class="token comment">//买过消费券的用户统计数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确配置环境并使用，需要以下几个条件：</p><blockquote><p>1、打开hive、spark、Hadoop以及hive元数据服务</p><p>2、在resource下放hive-site.xml</p><p>3、配置hive on spark</p><p>4、打开hive支持</p></blockquote><h4 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h4><h5 id="Caused-by-java-lang-NullPointerException"><a href="#Caused-by-java-lang-NullPointerException" class="headerlink" title="Caused by: java.lang.NullPointerException"></a>Caused by: java.lang.NullPointerException</h5><p>编写完文件后连接测试</p><p>报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">22</span>:30:37.257 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> WARN hive.ql.metadata.Hive - Failed to access metastore. This class should not accessed <span class="token keyword">in</span> runtime.org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientat Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientCaused by: java.lang.reflect.InvocationTargetException: null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是完整的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">00:02:42.923 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> WARN hive.ql.metadata.Hive - Failed to access metastore. This class should not accessed <span class="token keyword">in</span> runtime.org.apache.hadoop.hive.ql.metadata.HiveException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientat org.apache.hadoop.hive.ql.metadata.Hive.getAllDatabases<span class="token punctuation">(</span>Hive.java:1236<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.reloadFunctions<span class="token punctuation">(</span>Hive.java:174<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.<span class="token operator">&lt;</span>clinit<span class="token operator">></span><span class="token punctuation">(</span>Hive.java:166<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.session.SessionState.start<span class="token punctuation">(</span>SessionState.java:503<span class="token punctuation">)</span>at org.apache.spark.sql.hive.client.HiveClientImpl.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveClientImpl.scala:192<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.hive.client.IsolatedClientLoader.createClient<span class="token punctuation">(</span>IsolatedClientLoader.scala:264<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata<span class="token punctuation">(</span>HiveUtils.scala:366<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata<span class="token punctuation">(</span>HiveUtils.scala:270<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveExternalCatalog.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveExternalCatalog.scala:65<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SharedState$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$internal</span><span class="token variable">$SharedState</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SharedState.scala:166<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SharedState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SharedState.scala:86<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$$</span>anonfun<span class="token variable">$sharedState</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$$</span>anonfun<span class="token variable">$sharedState</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at scala.Option.getOrElse<span class="token punctuation">(</span>Option.scala:121<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sharedState<span class="token variable">$lzycompute</span><span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sharedState<span class="token punctuation">(</span>SparkSession.scala:100<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SessionState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SessionState.scala:157<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveSessionState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveSessionState.scala:32<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$SparkSession</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SparkSession.scala:978<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sessionState<span class="token variable">$lzycompute</span><span class="token punctuation">(</span>SparkSession.scala:110<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sessionState<span class="token punctuation">(</span>SparkSession.scala:109<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span><span class="token variable">$$</span>anonfun<span class="token variable">$getOrCreate</span><span class="token variable">$5</span>.apply<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span><span class="token variable">$$</span>anonfun<span class="token variable">$getOrCreate</span><span class="token variable">$5</span>.apply<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at scala.collection.mutable.HashMap<span class="token variable">$$</span>anonfun<span class="token variable">$foreach</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at scala.collection.mutable.HashMap<span class="token variable">$$</span>anonfun<span class="token variable">$foreach</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at scala.collection.mutable.HashTable<span class="token variable">$class</span>.foreachEntry<span class="token punctuation">(</span>HashTable.scala:230<span class="token punctuation">)</span>at scala.collection.mutable.HashMap.foreachEntry<span class="token punctuation">(</span>HashMap.scala:40<span class="token punctuation">)</span>at scala.collection.mutable.HashMap.foreach<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span>.getOrCreate<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at com.hengxing.ecommerceuserprofile.utils.SparkUtils.initSession<span class="token punctuation">(</span>SparkUtils.java:32<span class="token punctuation">)</span>at com.hengxing.ecommerceuserprofile.etls.platform.MemberEtl.main<span class="token punctuation">(</span>MemberEtl.java:24<span class="token punctuation">)</span>Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance<span class="token punctuation">(</span>MetaStoreUtils.java:1523<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>RetryingMetaStoreClient.java:86<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy<span class="token punctuation">(</span>RetryingMetaStoreClient.java:132<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy<span class="token punctuation">(</span>RetryingMetaStoreClient.java:104<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient<span class="token punctuation">(</span>Hive.java:3005<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.getMSC<span class="token punctuation">(</span>Hive.java:3024<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.getAllDatabases<span class="token punctuation">(</span>Hive.java:1234<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">42</span> common frames omittedCaused by: java.lang.reflect.InvocationTargetException: nullat sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance<span class="token punctuation">(</span>MetaStoreUtils.java:1521<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">48</span> common frames omittedCaused by: java.lang.NullPointerException: nullat java.lang.ProcessBuilder.start<span class="token punctuation">(</span>ProcessBuilder.java:1012<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.runCommand<span class="token punctuation">(</span>Shell.java:404<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.run<span class="token punctuation">(</span>Shell.java:379<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell<span class="token variable">$ShellCommandExecutor</span>.execute<span class="token punctuation">(</span>Shell.java:589<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.execCommand<span class="token punctuation">(</span>Shell.java:678<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.execCommand<span class="token punctuation">(</span>Shell.java:661<span class="token punctuation">)</span>at org.apache.hadoop.security.ShellBasedUnixGroupsMapping.getUnixGroups<span class="token punctuation">(</span>ShellBasedUnixGroupsMapping.java:83<span class="token punctuation">)</span>at org.apache.hadoop.security.ShellBasedUnixGroupsMapping.getGroups<span class="token punctuation">(</span>ShellBasedUnixGroupsMapping.java:52<span class="token punctuation">)</span>at org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback.getGroups<span class="token punctuation">(</span>JniBasedUnixGroupsMappingWithFallback.java:50<span class="token punctuation">)</span>at org.apache.hadoop.security.Groups.getGroups<span class="token punctuation">(</span>Groups.java:89<span class="token punctuation">)</span>at org.apache.hadoop.security.UserGroupInformation.getGroupNames<span class="token punctuation">(</span>UserGroupInformation.java:1352<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.open<span class="token punctuation">(</span>HiveMetaStoreClient.java:436<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveMetaStoreClient.java:236<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SessionHiveMetaStoreClient.java:74<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">53</span> common frames omitted00:02:42.924 <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO hive.metastore - Trying to connect to metastore with URI thrift://hengxing:9083Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> java.lang.IllegalArgumentException: Error <span class="token keyword">while</span> instantiating <span class="token string">'org.apache.spark.sql.hive.HiveSessionState'</span><span class="token builtin class-name">:</span>at org.apache.spark.sql.SparkSession$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$SparkSession</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SparkSession.scala:981<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sessionState<span class="token variable">$lzycompute</span><span class="token punctuation">(</span>SparkSession.scala:110<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sessionState<span class="token punctuation">(</span>SparkSession.scala:109<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span><span class="token variable">$$</span>anonfun<span class="token variable">$getOrCreate</span><span class="token variable">$5</span>.apply<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span><span class="token variable">$$</span>anonfun<span class="token variable">$getOrCreate</span><span class="token variable">$5</span>.apply<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at scala.collection.mutable.HashMap<span class="token variable">$$</span>anonfun<span class="token variable">$foreach</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at scala.collection.mutable.HashMap<span class="token variable">$$</span>anonfun<span class="token variable">$foreach</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at scala.collection.mutable.HashTable<span class="token variable">$class</span>.foreachEntry<span class="token punctuation">(</span>HashTable.scala:230<span class="token punctuation">)</span>at scala.collection.mutable.HashMap.foreachEntry<span class="token punctuation">(</span>HashMap.scala:40<span class="token punctuation">)</span>at scala.collection.mutable.HashMap.foreach<span class="token punctuation">(</span>HashMap.scala:99<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$Builder</span>.getOrCreate<span class="token punctuation">(</span>SparkSession.scala:878<span class="token punctuation">)</span>at com.hengxing.ecommerceuserprofile.utils.SparkUtils.initSession<span class="token punctuation">(</span>SparkUtils.java:32<span class="token punctuation">)</span>at com.hengxing.ecommerceuserprofile.etls.platform.MemberEtl.main<span class="token punctuation">(</span>MemberEtl.java:24<span class="token punctuation">)</span>Caused by: java.lang.reflect.InvocationTargetExceptionat sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$SparkSession</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SparkSession.scala:978<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">12</span> <span class="token function">more</span>Caused by: java.lang.IllegalArgumentException: Error <span class="token keyword">while</span> instantiating <span class="token string">'org.apache.spark.sql.hive.HiveExternalCatalog'</span><span class="token builtin class-name">:</span>at org.apache.spark.sql.internal.SharedState$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$internal</span><span class="token variable">$SharedState</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SharedState.scala:169<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SharedState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SharedState.scala:86<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$$</span>anonfun<span class="token variable">$sharedState</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession<span class="token variable">$$</span>anonfun<span class="token variable">$sharedState</span><span class="token variable">$1</span>.apply<span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at scala.Option.getOrElse<span class="token punctuation">(</span>Option.scala:121<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sharedState<span class="token variable">$lzycompute</span><span class="token punctuation">(</span>SparkSession.scala:101<span class="token punctuation">)</span>at org.apache.spark.sql.SparkSession.sharedState<span class="token punctuation">(</span>SparkSession.scala:100<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SessionState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SessionState.scala:157<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveSessionState.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveSessionState.scala:32<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">17</span> <span class="token function">more</span>Caused by: java.lang.reflect.InvocationTargetExceptionat sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.internal.SharedState$.org<span class="token variable">$apache</span><span class="token variable">$spark</span><span class="token variable">$sql</span><span class="token variable">$internal</span><span class="token variable">$SharedState</span><span class="token variable">$$</span>reflect<span class="token punctuation">(</span>SharedState.scala:166<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">25</span> <span class="token function">more</span>Caused by: java.lang.reflect.InvocationTargetExceptionat sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.spark.sql.hive.client.IsolatedClientLoader.createClient<span class="token punctuation">(</span>IsolatedClientLoader.scala:264<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata<span class="token punctuation">(</span>HiveUtils.scala:366<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveUtils$.newClientForMetadata<span class="token punctuation">(</span>HiveUtils.scala:270<span class="token punctuation">)</span>at org.apache.spark.sql.hive.HiveExternalCatalog.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveExternalCatalog.scala:65<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">30</span> <span class="token function">more</span>Caused by: java.lang.RuntimeException: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientat org.apache.hadoop.hive.ql.session.SessionState.start<span class="token punctuation">(</span>SessionState.java:522<span class="token punctuation">)</span>at org.apache.spark.sql.hive.client.HiveClientImpl.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveClientImpl.scala:192<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">38</span> <span class="token function">more</span>Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClientat org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance<span class="token punctuation">(</span>MetaStoreUtils.java:1523<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>RetryingMetaStoreClient.java:86<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy<span class="token punctuation">(</span>RetryingMetaStoreClient.java:132<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy<span class="token punctuation">(</span>RetryingMetaStoreClient.java:104<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient<span class="token punctuation">(</span>Hive.java:3005<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.Hive.getMSC<span class="token punctuation">(</span>Hive.java:3024<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.session.SessionState.start<span class="token punctuation">(</span>SessionState.java:503<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">39</span> <span class="token function">more</span>Caused by: java.lang.reflect.InvocationTargetExceptionat sun.reflect.NativeConstructorAccessorImpl.newInstance0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>at sun.reflect.NativeConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>NativeConstructorAccessorImpl.java:62<span class="token punctuation">)</span>at sun.reflect.DelegatingConstructorAccessorImpl.newInstance<span class="token punctuation">(</span>DelegatingConstructorAccessorImpl.java:45<span class="token punctuation">)</span>at java.lang.reflect.Constructor.newInstance<span class="token punctuation">(</span>Constructor.java:423<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.MetaStoreUtils.newInstance<span class="token punctuation">(</span>MetaStoreUtils.java:1521<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">45</span> <span class="token function">more</span>Caused by: java.lang.NullPointerExceptionat java.lang.ProcessBuilder.start<span class="token punctuation">(</span>ProcessBuilder.java:1012<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.runCommand<span class="token punctuation">(</span>Shell.java:404<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.run<span class="token punctuation">(</span>Shell.java:379<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell<span class="token variable">$ShellCommandExecutor</span>.execute<span class="token punctuation">(</span>Shell.java:589<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.execCommand<span class="token punctuation">(</span>Shell.java:678<span class="token punctuation">)</span>at org.apache.hadoop.util.Shell.execCommand<span class="token punctuation">(</span>Shell.java:661<span class="token punctuation">)</span>at org.apache.hadoop.security.ShellBasedUnixGroupsMapping.getUnixGroups<span class="token punctuation">(</span>ShellBasedUnixGroupsMapping.java:83<span class="token punctuation">)</span>at org.apache.hadoop.security.ShellBasedUnixGroupsMapping.getGroups<span class="token punctuation">(</span>ShellBasedUnixGroupsMapping.java:52<span class="token punctuation">)</span>at org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback.getGroups<span class="token punctuation">(</span>JniBasedUnixGroupsMappingWithFallback.java:50<span class="token punctuation">)</span>at org.apache.hadoop.security.Groups.getGroups<span class="token punctuation">(</span>Groups.java:89<span class="token punctuation">)</span>at org.apache.hadoop.security.UserGroupInformation.getGroupNames<span class="token punctuation">(</span>UserGroupInformation.java:1352<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.open<span class="token punctuation">(</span>HiveMetaStoreClient.java:436<span class="token punctuation">)</span>at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>HiveMetaStoreClient.java:236<span class="token punctuation">)</span>at org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.<span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SessionHiveMetaStoreClient.java:74<span class="token punctuation">)</span><span class="token punctuation">..</span>. <span class="token number">50</span> <span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我以为是没开metastore服务，但是打开之后还是报错</p><p>测试一下服务有没有正常启动</p><p><img src="https://s2.loli.net/2022/04/01/KwWPz3bgVijA1dy.png" alt="image-20220401225351386"></p><p>说明启动起来了</p><p>又一想，sparkshell能不能启动呢，果然启动的时候报错，说连不上hive，并且有两个包引入错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Caused by: java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient······<span class="token operator">&lt;</span>console<span class="token operator">></span>:14: error: not found: value spark       <span class="token function">import</span> spark.implicits._              ^<span class="token operator">&lt;</span>console<span class="token operator">></span>:14: error: not found: value spark       <span class="token function">import</span> spark.sql              ^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然不知道它是怎么想着连接hive的，但是总要试着解决，去网上查了一下sparkonhive的配置方法：</p><blockquote><p>配置spark on hive很简单，把hive-site.xml软链接到spark的conf目录下即可，spark会自动读取该配置来识别metastore的地址。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> <span class="token parameter variable">-snf</span> /usr/local/hive/conf/hive-site.xml /usr/local/spark/conf/hive-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再重新启动sparkshell，好了，现在没有上面那个报错了，并且成功查询到hive中的数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Spark context Web UI available at http://192.168.59.140:4040Spark context available as <span class="token string">'sc'</span> <span class="token punctuation">(</span>master <span class="token operator">=</span> local<span class="token punctuation">[</span>*<span class="token punctuation">]</span>, app <span class="token function">id</span> <span class="token operator">=</span> local-1648828695614<span class="token punctuation">)</span>.Spark session available as <span class="token string">'spark'</span><span class="token builtin class-name">.</span>Welcome to      ____              __     / __/__  ___ _____/ /__    _<span class="token punctuation">\</span> <span class="token punctuation">\</span>/ _ <span class="token punctuation">\</span>/ _ `/ __/  '_/   /___/ .__/<span class="token punctuation">\</span>_,_/_/ /_/<span class="token punctuation">\</span>_<span class="token punctuation">\</span>   version <span class="token number">2.1</span>.0      /_/         Using Scala version <span class="token number">2.11</span>.8 <span class="token punctuation">(</span>OpenJDK <span class="token number">64</span>-Bit Server VM, Java <span class="token number">1.8</span>.0_292<span class="token punctuation">)</span>Type <span class="token keyword">in</span> expressions to have them evaluated.Type :help <span class="token keyword">for</span> <span class="token function">more</span> information.scala<span class="token operator">></span> spark.sql<span class="token punctuation">(</span><span class="token string">"select * from ecommerce.t_user"</span><span class="token punctuation">)</span>.show<span class="token punctuation">(</span>false<span class="token punctuation">)</span>+---+---------+-------------+-----------+-------------------+-------------------+<span class="token operator">|</span><span class="token function">id</span> <span class="token operator">|</span>user_name<span class="token operator">|</span>user_password<span class="token operator">|</span>user_phone <span class="token operator">|</span>create_time        <span class="token operator">|</span>update_time        <span class="token operator">|</span>+---+---------+-------------+-----------+-------------------+-------------------+<span class="token operator">|</span><span class="token number">1</span>  <span class="token operator">|</span>一号员工     <span class="token operator">|</span><span class="token number">111111</span>       <span class="token operator">|</span><span class="token number">15678990989</span><span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span><span class="token operator">|</span><span class="token number">2</span>  <span class="token operator">|</span>二号员工     <span class="token operator">|</span><span class="token number">111111</span>       <span class="token operator">|</span><span class="token number">15678990989</span><span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span><span class="token operator">|</span><span class="token number">3</span>  <span class="token operator">|</span>三号员工     <span class="token operator">|</span><span class="token number">111111</span>       <span class="token operator">|</span><span class="token number">15678990989</span><span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span><span class="token number">2019</span>-08-01 08:31:46<span class="token operator">|</span>+---+---------+-------------+-----------+-------------------+-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但这只是本地的sparkshell没问题，程序还是有报错</p><p>咨询了一位学长，学长给了我一个解决方案，我们看一下</p><p><a href="https://www.modb.pro/db/143244">Spark 之访问 Hive 空指针异常</a></p><p>因为学长说我的rootcause应该是<code> Caused by: java.lang.NullPointerException</code>，这里还要普及一个小知识点</p><blockquote><p>看报错的时候要从下网上看，最下面的是最根本的原因</p></blockquote><p>根据文章所说的添加了winutils.exe就行，具体的原因还是–&gt;<code>Spark需要用到Hadoop中的一些类库&amp;使用winutils.exe文件初始化Hive的上下文</code></p><h5 id="table-or-view-not-found"><a href="#table-or-view-not-found" class="headerlink" title="table or view not found"></a>table or view not found</h5><p>如果遇到<code>table or view not found</code>，我是因为sparkSession没有打开hive支持</p><h3 id="热词词云"><a href="#热词词云" class="headerlink" title="热词词云"></a>热词词云</h3><h5 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h5><p>将文件上传至hdfs中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs dfs <span class="token parameter variable">-put</span> /data/SogouQ.sample.txt /data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="类文件"><a href="#类文件" class="headerlink" title="类文件"></a>类文件</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>etls<span class="token punctuation">.</span>platform</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span><span class="token class-name">SparkConf</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaPairRDD</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaRDD</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">JavaSparkContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function2</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">PairFunction</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">scala<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">/** * @projectName: EcommerceUserProfile * @package: com.hengxing.ecommerceuserprofile.etls.platform * @className: HotWordEtl * @author: HengxingStu * @description: TODO * @date: 4/12/2022 11:19 PM * @version: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotWordEtl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个javaspark context ，方便后面调用transform操作</span>        <span class="token class-name">SparkConf</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"Hot word etl"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JavaSparkContext</span> jsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.先从hdfs读数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"HADOOP_USER_NAME"</span><span class="token punctuation">,</span><span class="token string">"hengxing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JavaRDD</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linesRdd <span class="token operator">=</span> jsc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"hdfs://hengxing:9000/data/SogouQ.sample.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.mapToPair得到二元组，准备word count</span>        <span class="token class-name">JavaPairRDD</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> pairRDD <span class="token operator">=</span> linesRdd<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> word <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.以word为key，通过reducebykey聚合</span>        <span class="token class-name">JavaPairRDD</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> countRdd <span class="token operator">=</span> pairRDD<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token punctuation">,</span> <span class="token class-name">Integer</span> integer2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> integer <span class="token operator">+</span> integer2<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//排序，但是由于sortbykey只能根据第一个元素进行排序，所以排序前需要调整参数位置</span><span class="token comment">//       1.exchange position first</span>        <span class="token class-name">JavaPairRDD</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> swapedRdd <span class="token operator">=</span> countRdd<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> stringIntegerTuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> stringIntegerTuple2<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        2.count desc</span>        <span class="token class-name">JavaPairRDD</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> sortedRdd <span class="token operator">=</span> swapedRdd<span class="token punctuation">.</span><span class="token function">sortByKey</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        3.exchange again,back to previous,extract TopN,get a list finally</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> resultlist <span class="token operator">=</span> sortedRdd<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringTuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> integerStringTuple2<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        print</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hotWordCount<span class="token operator">:</span> resultlist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hotWordCount<span class="token punctuation">.</span>_1 <span class="token operator">+</span> <span class="token string">"=== count "</span> <span class="token operator">+</span> hotWordCount<span class="token punctuation">.</span>_2 <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="平台近期数据增量"><a href="#平台近期数据增量" class="headerlink" title="平台近期数据增量"></a>平台近期数据增量</h3><p>SQL中的模板字符串<code>&#39;%s&#39;</code>，这样就可以将字符插进去，就像这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">最后合成的字符串 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>你的<span class="token constant">SQL</span>字符串<span class="token punctuation">,</span> 要添加的字符串<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GrowthEtl.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>etls<span class="token punctuation">.</span>platform</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">SparkUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dateutils<span class="token punctuation">.</span></span><span class="token class-name">DateStyle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hengxing<span class="token punctuation">.</span>ecommerceuserprofile<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dateutils<span class="token punctuation">.</span></span><span class="token class-name">DateUtil</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Dataset</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Row</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SparkSession</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span></span><span class="token class-name">StructType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">scala<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Month</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneId</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrowthEtl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SparkSession</span> session <span class="token operator">=</span> <span class="token class-name">SparkUtils</span><span class="token punctuation">.</span><span class="token function">initSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrowthLineVo</span><span class="token punctuation">></span></span> growthLineVo <span class="token operator">=</span> <span class="token function">growthEtl</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>growthLineVo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//自定义VIewObject，统计每日数据</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">GrowthLineVo</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 每天新增注册数、总用户数、总订单数、总流水GMV</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> day<span class="token punctuation">;</span>  <span class="token comment">//日期</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> regCount<span class="token punctuation">;</span>  <span class="token comment">// 每天新增注册数</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> memberCount<span class="token punctuation">;</span>  <span class="token comment">// 每天平台总用户数</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderCount<span class="token punctuation">;</span>  <span class="token comment">// 每天总订单数</span>        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> gmv<span class="token punctuation">;</span>  <span class="token comment">// 每天平台订单总流水金额</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrowthLineVo</span><span class="token punctuation">></span></span> <span class="token function">growthEtl</span><span class="token punctuation">(</span><span class="token class-name">SparkSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 指定“当前日期”是2019.11.30，这是数据决定的</span>        <span class="token class-name">LocalDate</span> now <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token class-name">Month</span><span class="token punctuation">.</span><span class="token constant">NOVEMBER</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> nowDay <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> sevenDayBefore <span class="token operator">=</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">addDay</span><span class="token punctuation">(</span>nowDay<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 近七天注册人数统计（总量、新增）</span>        <span class="token class-name">String</span> memberSql <span class="token operator">=</span> <span class="token string">"select date_format(create_time,'yyyy-MM-dd') as day,"</span> <span class="token operator">+</span>                <span class="token string">" count(id) as regCount, max(id) as memberCount "</span> <span class="token operator">+</span>                <span class="token string">" from ecommerce.t_member where create_time >='%s' "</span> <span class="token operator">+</span>                <span class="token string">" group by date_format(create_time,'yyyy-MM-dd') order by day"</span><span class="token punctuation">;</span>        memberSql <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>memberSql<span class="token punctuation">,</span> <span class="token class-name">DateUtil<span class="token punctuation">.</span>DateToString</span><span class="token punctuation">(</span>sevenDayBefore<span class="token punctuation">,</span> <span class="token class-name">DateStyle</span><span class="token punctuation">.</span><span class="token constant">YYYY_MM_DD_HH_MM_SS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> memberDs <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>memberSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 近七天订单和流水统计（新增总流水）</span>        <span class="token class-name">String</span> orderSql <span class="token operator">=</span> <span class="token string">"select date_format(create_time,'yyyy-MM-dd') as day,"</span> <span class="token operator">+</span>                <span class="token string">" max(order_id) orderCount, sum(origin_price) as gmv"</span> <span class="token operator">+</span>                <span class="token string">" from ecommerce.t_order where create_time >='%s' "</span> <span class="token operator">+</span>                <span class="token string">"group by date_format(create_time,'yyyy-MM-dd') order by day"</span><span class="token punctuation">;</span>        orderSql <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>orderSql<span class="token punctuation">,</span> <span class="token class-name">DateUtil<span class="token punctuation">.</span>DateToString</span><span class="token punctuation">(</span>sevenDayBefore<span class="token punctuation">,</span> <span class="token class-name">DateStyle</span><span class="token punctuation">.</span><span class="token constant">YYYY_MM_DD_HH_MM_SS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> orderDs <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>orderSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 联接两个查询结果，按照day进行内连接</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">,</span> <span class="token class-name">Row</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tuple2Dataset <span class="token operator">=</span> memberDs<span class="token punctuation">.</span><span class="token function">joinWith</span><span class="token punctuation">(</span>orderDs<span class="token punctuation">,</span> memberDs<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalTo</span><span class="token punctuation">(</span>orderDs<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"day"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"inner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先转换成list，然后遍历，取出每一天的数据，转成VO，放入新的list</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">,</span> <span class="token class-name">Row</span><span class="token punctuation">></span><span class="token punctuation">></span></span> tuple2s <span class="token operator">=</span> tuple2Dataset<span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrowthLineVo</span><span class="token punctuation">></span></span> vos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历二元组List，包装 GrowthLineVo</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">,</span> <span class="token class-name">Row</span><span class="token punctuation">></span></span> tuple2 <span class="token operator">:</span> tuple2s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Row</span> row1 <span class="token operator">=</span> tuple2<span class="token punctuation">.</span><span class="token function">_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// memberSql结果</span>            <span class="token class-name">Row</span> row2 <span class="token operator">=</span> tuple2<span class="token punctuation">.</span><span class="token function">_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// orderSql结果</span>            <span class="token class-name">JSONObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//提取row类型里的所有字段</span>            <span class="token class-name">StructType</span> schema <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">fieldNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> as <span class="token operator">=</span> row1<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> as<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            schema <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            strings <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">fieldNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> as <span class="token operator">=</span> row2<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> as<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">GrowthLineVo</span> growthLineVo <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toJavaObject</span><span class="token punctuation">(</span><span class="token class-name">GrowthLineVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>growthLineVo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 七天前，再之前的订单流水总和（GMV）</span>        <span class="token class-name">String</span> preGmvSql <span class="token operator">=</span> <span class="token string">"select sum(origin_price) as totalGmv from ecommerce.t_order where create_time &lt;'%s'"</span><span class="token punctuation">;</span>        preGmvSql <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>preGmvSql<span class="token punctuation">,</span> <span class="token class-name">DateUtil<span class="token punctuation">.</span>DateToString</span><span class="token punctuation">(</span>sevenDayBefore<span class="token punctuation">,</span> <span class="token class-name">DateStyle</span><span class="token punctuation">.</span><span class="token constant">YYYY_MM_DD_HH_MM_SS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Dataset</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Row</span><span class="token punctuation">></span></span> gmvDs <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>preGmvSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> previousGmv <span class="token operator">=</span> gmvDs<span class="token punctuation">.</span><span class="token function">collectAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出第0行，第0列</span>        <span class="token class-name">BigDecimal</span> preGmv <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>previousGmv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 之前每天的增量gmv取出，依次叠加，得到总和</span>        <span class="token class-name">BigDecimal</span> currentGmv <span class="token operator">=</span> preGmv<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GrowthLineVo</span> growthLineVo <span class="token operator">=</span> vos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentGmv <span class="token operator">=</span> currentGmv<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>growthLineVo<span class="token punctuation">.</span><span class="token function">getGmv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加上当天GMV新增量</span>            growthLineVo<span class="token punctuation">.</span><span class="token function">setGmv</span><span class="token punctuation">(</span>currentGmv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> vos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签系统"><a href="#标签系统" class="headerlink" title="标签系统"></a>标签系统</h3><p>首先保证es、kibana安装完成，然后在kibana命令行中写如下命令：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /tag/_doc/_mapping?pretty <span class="token punctuation">&#123;</span> <span class="token property">"_doc"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"memberId"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"channel"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"subOpenId"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>“address”<span class="token operator">:</span> <span class="token punctuation">&#123;</span> “type”<span class="token operator">:</span> “text” <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"regTime"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"orderCount"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"orderTime"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"orderMoney"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"float"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"favGoods"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"keyword"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"freeCouponTime"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"couponTimes"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"chargeMoney"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"double"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"overTime"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token property">"feedBack"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常情况返回</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"acknowledged"</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以在dashboard-&gt;Index Management-&gt;选择你的查询index并点击-&gt;mapping，可以查看到提交的mapping</p><p>执行UserTagEtl.java可以将用户标签数据存入es，接着可以在es中查到数据<code>GET /usertag/_search</code>，其中的total表示有1000条数据</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>----省略一万字-----<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习</title>
      <link href="/2022/04/02/Spring%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/02/Spring%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Spring学习</p><p>[TOC]</p><h1 id="Spring基础知识"><a href="#Spring基础知识" class="headerlink" title="Spring基础知识"></a>Spring基础知识</h1><h2 id="一、Spring框架简介"><a href="#一、Spring框架简介" class="headerlink" title="一、Spring框架简介"></a>一、Spring框架简介</h2><h3 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h3><blockquote><p>Spring是一个JEE开发框架，开源，轻量级，功能强大。</p><p>Spring框架的核心特性是&#x3D;&#x3D;依赖注入(DI)&#x3D;&#x3D;与&#x3D;&#x3D;面向切面编程(AOP)&#x3D;&#x3D;，Spring框架可以看作是一个控制反转的容器。尽管Spring主要用于JEE应用开发，但实际上这2个核心特性可用于任何Java项目。</p><p>Spring框架是Java EE开发中最流行的框架，已经成为JEE事实上的标准，全世界的开发人员都在使用Spring框架开发各种应用。</p></blockquote><h3 id="框架的优点："><a href="#框架的优点：" class="headerlink" title="框架的优点："></a>框架的优点：</h3><ul><li><strong>松耦合</strong>，组件（Bean）之间依赖很松，模块可以轻松替换</li><li><strong>简单，非侵入式</strong>，组件（Bean）本身只是简单的Java对象，无需任何特殊处理，非常简单</li></ul><h3 id="核心技术：DI-x2F-IOC和AOP"><a href="#核心技术：DI-x2F-IOC和AOP" class="headerlink" title="核心技术：DI&#x2F;IOC和AOP"></a>核心技术：<strong>DI&#x2F;IOC</strong>和<strong>AOP</strong></h3><ul><li><p>依赖注入Dependency Injection，也称控制反转Inversion of Control</p><blockquote><p>Java程序中，Java类是基本的代码组织单位。当某个类要使用另一个类时，自然的做法是创建另一个类的对象，然后调用该对象的方法。这样做在程序规模较小时没什么问题，但当程序规模很大时这些类之间过于紧密的耦合会导致后续开发维护困难。例如要替换其中某个类，就不得不修改所有涉及这个类的代码。</p><p>控制反转(Inversion of Control &#x2F; IoC)与依赖注入（Dependency Injection &#x2F; DI）就是为解决这个问题。上面提到类里面创建另外一个类对象会造成耦合太紧，Spring框架就把创建类的行为从类中拿出来放到Spring框架里去做，类与类之间创建关系就没有了。</p><p>&#x3D;&#x3D;本来由类控制其所依赖的类对象的创建，现在把创建动作放到Spring框架里了，由框架控制所有类对象的创建，这就是“控制反转”。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;框架创建了类所依赖的对象，然后把这些对象传给（注入）依赖它们的类，这就是“依赖注入”。&#x3D;&#x3D;</p><p>所以可以看到，Spring框架中控制反转(Inversion of Control &#x2F; IoC)与依赖注入（Dependency Injection &#x2F; DI）实际上讲的是同一个事情，只是角度不同。</p></blockquote></li><li><p>面向切面编程(Aspect Oriented Programming&#x2F;AOP)</p><blockquote><p>面向切面编程的主要作用是，在不修改源代码的情况下，可以给目标类打补丁，让其执行补丁中的代码。</p><p>例如，用户类中有个登录方法，现在需要加用户登录日志。使用AOP就不需要修改用户登录方法，只需把日志代码注入到用户登录方法前后，让其执行。日志代码就是“切面”，插入代码的地方（用户类的登录方法）就是“连接点”。</p><p>也就是说，可以&#x3D;&#x3D;方便地修改项目功能&#x3D;&#x3D;</p></blockquote></li></ul><h2 id="二、怎么使用"><a href="#二、怎么使用" class="headerlink" title="二、怎么使用"></a>二、怎么使用</h2><h3 id="1-导入依赖包"><a href="#1-导入依赖包" class="headerlink" title="1. 导入依赖包"></a>1. 导入依赖包</h3><p>在POM.xml文件中加入依赖，注意<code>org.springframework</code>这几个包的版本必须一致</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建一个类，提供get和set方法"><a href="#2-创建一个类，提供get和set方法" class="headerlink" title="2. 创建一个类，提供get和set方法"></a>2. 创建一个类，提供get和set方法</h3><p>在你的包中创建类，例如我是在<code>src=&gt;main=&gt;java=&gt;com.hengxing.spring</code>中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">//此处省略getter、setter、toString方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写配置文件-applicationContext-xml"><a href="#3-编写配置文件-applicationContext-xml" class="headerlink" title="3.编写配置文件-applicationContext.xml"></a>3.编写配置文件-applicationContext.xml</h3><p>在resources文件夹上右键，选择<code>new=&gt;XML Configuration File=&gt;Spring Config</code>，将下面的内容贴进去</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema- instance<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans     http://www. springframework.org/schema/beans/spring-beans-4.3.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 将 User 对象交给 spring 容器管理，其中 name 任意，class 为全包名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.spring.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到中间的bean了吗？这就是你在spring中创建的对象，现在要调用它就不用再new了，比如我现在写一个测试方法，继续往下看</p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4.使用"></a>4.使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUseSpring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//读取spring核心配置文件，并创建出文件中配置的类的对象</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//直接向spring要对象，getBean(&lt;这个对象的id>, &lt;对象的类型>);</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就省去了一步new的过程。现在我们只省略了一步，如果我们的对象变多，那就能体现出这种方式的简便。运行后就可以看到：</p><p><img src="https://s2.loli.net/2022/03/27/G21z7fomPHAilZW.png" alt="image-20220327214739808"></p><p>这个对象里面的值是null？当然，因为你没有对他进行赋值操作，它默认就是null。</p><p>如果你想对它进行赋值，小小修改一下你的bean，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"user"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.hengxing.spring.User"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"Cloud"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span> value<span class="token operator">=</span><span class="token string">"17"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它就会打印出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">User<span class="token punctuation">&#123;</span>username<span class="token operator">=</span><span class="token string">'Cloud'</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再进一步，如果你想为这个对象添加一个类（比如现在我要让Cloud拥有一辆车）</p><p>首先你需要创建一个Car的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token comment">//此处省略getter、setter、toString方法</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改User类，为它添加car属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token comment">//此处省略getter、setter、toString方法</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再小小修改一下你的bean添加car的bean，在user的bean中添加car属性，注意这里的标签变成了<code>ref</code>，因为你引用的是对象</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.spring.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>红旗<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑色<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.spring.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cloud<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>17<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新执行一下你的测试方法，你甚至不用改动一个字，它会打印出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">User<span class="token punctuation">&#123;</span>username<span class="token operator">=</span><span class="token string">'Cloud'</span>, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">17</span>, <span class="token assign-left variable">car</span><span class="token operator">=</span>Car<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'红旗'</span>, <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">'黑色'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Spring与JDBC整合"><a href="#Spring与JDBC整合" class="headerlink" title="Spring与JDBC整合"></a>Spring与JDBC整合</h1><h2 id="只是连接"><a href="#只是连接" class="headerlink" title="只是连接"></a>只是连接</h2><p>依赖如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-beans<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        事务底层管理--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--        spring-jdbc spring-tx事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然我们使用spring了，就不需要new c3p0的对象，直接在spring中声明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    c3p0对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到还是一样的类，只不过声明方式不同，现在我们测试一下是否成功</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取连接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>套路还是声明配置文件，再直接获取对象。你可以在控制台看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">[</span> id<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明我们连接成功了</p><h2 id="实战一下"><a href="#实战一下" class="headerlink" title="实战一下"></a>实战一下</h2><p>首先要确定User类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>   <span class="token comment">//此处省略getter、setter、toString方法</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建Dao层包，创建dao层接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> loginDao <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在dao包中在创建实现包(impl),创建实现方法</p><p>这个时候就体现出spring的方便，正常情况下，我们连接数据库，需要每个方法都要new很多对象用到很多变量，比如jdbc的datasource对象、conn变量用来获取连接、prepareStatement用来防止sql注入。但是有了spring，我们可以&#x3D;&#x3D;直接使用spring的template模板&#x3D;&#x3D;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> loginDaoImpl <span class="token keyword">implements</span> loginDao <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span><span class="token comment">//使用spring注入的template模板</span><span class="token comment">//下面的方法将其引入</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//实现方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">"insert into users (name,password) values (?,?)"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成功返回1，失败返回0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>applicationContext.xml</code>配置文件中，进行注入，注入的时候注意不要注入到接口类里了，我们是实现类里要用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    c3p0对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    创建spring对JDBC的支持工具类 jdbcTemplate--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    把jdbcTemplate对象注入到loginDao中去--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.dao.impl.loginDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以写一个测试方法，进行插入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJDBC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loginDao loginDao <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"loginDao"</span><span class="token punctuation">,</span> loginDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Cloud"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> loginDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行成功后，控制台会打印出<code>1</code>,并且数据库中会多出一条记录</p><table><thead><tr><th align="center">id</th><th align="center">username</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Cloud</td><td align="center">123</td></tr></tbody></table><p>ok,你已经完成了Spring与JDBC的整合</p><p>我们还可以使用JDBCTemplate实现如下操作，后续再进行补全吧</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IOC注解方式开发"><a href="#IOC注解方式开发" class="headerlink" title="IOC注解方式开发"></a>IOC注解方式开发</h1><h2 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>首先要添加<code>context</code>约束，添加之后才可以使用context标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--组件扫描，告诉它去哪里找注解--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.bean<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以在你对应包中为类添加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token comment">//内容省略</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件声明默认的名称是你的类名，如果你想自定义一个名字，可以这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再给它的属性赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"Tifa"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有步骤已经成功，现在测试一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUseSpring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//读取spring核心配置文件，并创建出文件中配置的类的对象</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//直接向spring要对象，getBean(&lt;你要给这个对象起的名字>, &lt;对象的类型>);</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后你会在控制台看到输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">User<span class="token punctuation">&#123;</span>id<span class="token operator">=</span>null, <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'Tifa'</span>, <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候，如果我想要给Tifa添加一个对象的属性呢，比如我写了一个Car类，定义Tifa有一辆红色的法拉利，那么同样，先给这个Car类写上注解并赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"法拉利"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token comment">//此处省略getter、setter、toString方法&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在User类中添加属性，为这个属性添加<code>@Autowired</code>注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"Tifa"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这下再去执行测试方法，可以看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">User<span class="token punctuation">&#123;</span>id<span class="token operator">=</span>null, <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">'Tifa'</span>, <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">'123'</span>, <span class="token assign-left variable">car</span><span class="token operator">=</span>Car<span class="token punctuation">&#123;</span>name<span class="token operator">=</span><span class="token string">'法拉利'</span>, <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">'红色'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成</p><h2 id="DAO层注解"><a href="#DAO层注解" class="headerlink" title="DAO层注解"></a>DAO层注解</h2><p>spring为DAO层制作了单独的注解</p><p><code>@Repository</code></p><p>这个注解要添加在DAO层的实现类上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认会使用类名，所以我们改一个好用的名字，等会调用就方便一些</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"loginDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> loginDaoImpl <span class="token keyword">implements</span> loginDao <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span><span class="token comment">//用spring注入</span>    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment">/*不需要通过它来接收注入的值，spring会为我们注入    public void setJdbcTemplate(JdbcTemplate jdbcTemplate) &#123;        this.jdbcTemplate = jdbcTemplate;    &#125;*/</span>    <span class="token comment">//省略实现方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还记得我们之前在组件扫描器中定义它寻找注解的地方吗，那时写的是bean包，但现在我们的方法在DAO包下的impl包，修改一下，让他直接在工程包中找，就可以找得到。</p><p>另外，既然我们使用spring注解方式了，就不用在把logindao再注入了，所以删掉最后一项</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    c3p0对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--    创建spring对JDBC的支持工具类 jdbcTemplate--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--&amp;lt;!&amp;ndash;    把jdbcTemplate对象注入到loginDao中去&amp;ndash;&amp;gt;--></span><span class="token comment">&lt;!--    &lt;bean id="loginDao" class="com.hengxing.dao.impl.loginDaoImpl">--></span><span class="token comment">&lt;!--        &lt;property name="jdbcTemplate" ref="jdbcTemplate">&lt;/property>--></span><span class="token comment">&lt;!--    &lt;/bean>--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是用之前向数据库中插入信息的方法，修改一下插入的信息即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJDBC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loginDao loginDao <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"loginDao"</span><span class="token punctuation">,</span> loginDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"AWS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> loginDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功后控制台会输出<code>1</code>，数据库会多出一条数据</p><table><thead><tr><th align="center">id</th><th align="center">username</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">AWS</td><td align="center">123</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>使用前，为context标签添加约束</li><li>context标签生成组件扫描器，告诉它去哪里找注解</li><li>在类中添加注解，<code>@Component</code></li><li>为属性赋值<ul><li><code>@Value</code>普通属性</li><li><code>@Autowired</code> 对象属性</li></ul></li></ul><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>之前我们是使用Servlet和DAO层交换数据，这种方式比较繁琐，所以spring为我们提供了一个框架SpringMVC，专门替代Servlet。</p><h2 id="SpringMVC项目的组建"><a href="#SpringMVC项目的组建" class="headerlink" title="SpringMVC项目的组建"></a>SpringMVC项目的组建</h2><p>这是web项目要用到的，所以创建项目的时候一定要创建web项目</p><p><img src="https://s2.loli.net/2022/03/28/t3fx9TukzBDIedW.png" alt="image-20220328155641141"></p><p>groupId,artifactId,version的录入原则:</p><blockquote><p>groupId翻译为组Id，通常的写法为公司域名的倒写，表示本项目属于哪个公司。</p><p>artifactId翻译为手工艺品，表示项目的的名字或者模块的名字。</p><p>Version通常为X.X.X格式，表示项目的版本号。</p></blockquote><p><img src="https://s2.loli.net/2022/03/28/T5wcJiByG7lanZE.png" alt="image-20220328155934944"></p><p>导入依赖，添加这两个依赖，注意，如果你之前有spring其他的依赖，记得&#x3D;&#x3D;保持版本一致&#x3D;&#x3D;</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.3.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在web.xml文件加入springmvc的前端控制器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee          http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要特别关注其中servlet的写法，其中</p><ul><li>两个<code>servlet-name</code>的标签名字必须一致</li><li><code>url-pattern</code>标签中填<code>*.do</code>，这个配置的意思是说，所有<code>*.do</code>这种格式的请求，都会被我们下一项声明的Servlet处理</li><li><code>servlet-class</code>配置要填下面的类名</li></ul><p><img src="https://s2.loli.net/2022/03/28/H69cl2Ki58hT1DR.png" alt="image-20220328162814273"></p><p>右键–&gt;copy reference，把复制出的内容填上去</p><p>现在就配置完成了</p><h2 id="怎么使用-1"><a href="#怎么使用-1" class="headerlink" title="怎么使用"></a>怎么使用</h2><p>springMVC是代替servlet的，而servlet又属于控制器（控制页面与DAO层的交换），所以我们创建一个<code>controller</code>包来存放springmvc的类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is my first SpringMVC programe."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又多了两个新的注解，它们是做什么的？</p><ul><li><code>@Controller</code>其实和<code>@Component</code>是一样的，都是在告诉spring这是我的一个组件，你要替我创建它，但<code>@Controller</code>是专门为控制器准备的，别人一眼就能知道这是一个控制器，这有利于后期维护。</li><li><code>@RequestMapping</code>是告诉servlet你的请求路径</li></ul><p>现在你在jsp页面中可以通过你的路径访问方法，就像这样</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;form action&#x3D;&quot;&#x2F;hello&#x2F;world.do&quot;&gt;    &lt;input type&#x3D;&quot;submit&quot;&#x2F;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后一步，在WEB-INF文件夹右键<code>-&gt;new-&gt;XML Configuration File-&gt;Spring Config</code>新建一个servlet配置文件，文件名为<code>%servlet-name%-servlet.xml</code>，其中%servlet-name%是你刚刚配置的servlet名称，后面的内容不能更改。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.hengxing.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>老规矩，要先告诉spring去哪里找类，创建扫描器，又因为要用扫描器，所以声明context标签。</p><p><code>@Controller</code>解决了，<code>@RequestMapping</code>怎么办？所以还需要<code>mvc</code>标签，<code>&lt;mvc:annotation-driven/&gt;</code>，见名知义，是告诉spring当前是注解驱动模式，所以在遇到请求时，spring会去控制器中寻找<code>@RequestMapping</code>的路径。</p><p>恭喜，springMVC已经配置完成，请配置并启动tomcat服务器测试</p><p><a href="http://localhost:8080/login.jsp">http://localhost:8080/login.jsp</a></p><p>网页中你会看到一个提交按钮，点击它就会请求方法<code>/hello/world.do</code>,servlet接收到请求后，由于spring配置了所有<code>*.do</code>的请求都由servlet处理，所以servlet又会在控制器中寻找处理方法，我们在处理器中设置了注解驱动，则servlet又会根据注释去寻找路径所指的方法，打印出方法内容，控制台会打印</p><p><code>This is my first SpringMVC programe.</code></p><h2 id="springMVC从jsp接收数据"><a href="#springMVC从jsp接收数据" class="headerlink" title="springMVC从jsp接收数据"></a>springMVC从jsp接收数据</h2><p>在webapp中添加一个页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User Add Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/add.do<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/03/28/EYOH4hCekzvQTF7.png" alt="image-20220328191707378"></p><p>写controller用来控制信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userAdd</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行tomcat，可以看到控制台打印出了你输入的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Cloud<span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明这种方法可以接收到消息，但是写起来很麻烦，现在还只有姓名和密码，以后要是有一长串表单呢，为了解决这个问题，我们可以使用一个类来接收数据，比如我们现在写一个User类，里面包含要接收的信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>     <span class="token comment">//此处省略getter、setter、toString方法&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要对控制器进行小小的修改，用类来接收信息即可，它会自动帮我们把表单的内容拼接起来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userAdd</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以接收到信息</p><h2 id="SpringMVC-Spring-JDBC"><a href="#SpringMVC-Spring-JDBC" class="headerlink" title="SpringMVC+Spring+JDBC"></a>SpringMVC+Spring+JDBC</h2><p><strong>有个问题</strong></p><p>之前我们与JDBC交互的DAO层代码是在测试类中跑起来的，测试类中，我们用<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</code>读取了配置文件，获得对象，但现在，如果我们想在控制层使用DAO方法（也就是可以从页面获取信息后，直接向数据库交互，完成了正常的业务逻辑），要怎么用呢？</p><p>与配置servlet类似，在Project目录中-&gt;External libraries-&gt;org.springframework-&gt;web-&gt;context-&gt;ContextLoaderListener，右键-&gt;Copy Reference。</p><p>在web,xml中声明一个监听器，这个声明下面的<code>&lt;context-param&gt;</code>是指定配置文件的路径，类似于我们在测试类中写的<code>ClassPathXmlApplicationContext</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们就可以把DAO类作为一个属性注入到controller中去</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> loginDao loginDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userAdd</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        loginDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你看，这样我就可以直接在控制层中调用DAO层的方法了。这里我贴出jsp页面的代码，&#x3D;&#x3D;注意&#x3D;&#x3D;，我数据库中名字的字段是<code>name</code>，所以我修改了jsp页面输入框的name，由username改为name</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>User Add Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/add.do<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库中多了一条数据</p><table><thead><tr><th align="center">id</th><th align="center">name</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">16</td><td align="center">Aerith</td><td align="center">222</td></tr></tbody></table><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul><li>springMVC<ul><li>前端控制器替代Servlet与页面交互</li><li><code>@controller</code> 控制器</li><li><code>@RequestMapping</code> 声明请求路径</li><li>向controller中注入dao对象属性时要用<code>@Autowired</code></li></ul></li></ul><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h2><p>SpringBoot是一个快速开发框架，快速的将一些常用的第三方依赖整合（原理：通过Maven子父工程的方式），简化XML配置，全部采用注解形式，内置HTTP服务器（Jetty和Tomcat），最终以Java应用程序进行执行。</p><p>SpringBoot主要目标是：为所有Spring的开发者提供一个非常快速的、广泛接受的入门体验。</p><p><strong>好</strong></p><ul><li>快速构建项目，绝对没有代码生成，也无需 XML 配置</li><li>对主流开发框架的无配置集成 </li><li>项目可独立运行，无须外部依赖Servlet容器 </li><li>提供运行时的应用监控 </li><li>极大的提高了开发、部署效率</li><li>与云计算的天然集成</li></ul><p><strong>坏</strong></p><ul><li>从原来的XML配置方式转换到JAVA配置方式变化有点大，不太适应</li><li>至少要了解Spring，才能很容易上手</li></ul><h2 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h2><h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>首先，&#x3D;&#x3D;SpringBoot必须使用Maven项目&#x3D;&#x3D;</p><p>然后创建工程</p><p><img src="https://s2.loli.net/2022/03/28/982e1ioSjTwOnxG.png" alt="image-20220328231423463"></p><p><img src="https://s2.loli.net/2022/03/28/oVYbiGQfNcnem1a.png" alt="image-20220328231532542"></p><p><img src="https://s2.loli.net/2022/03/28/6yK8u1tqnSb2ERa.png" alt="image-20220328231821426"></p><h3 id="2-添加依赖"><a href="#2-添加依赖" class="headerlink" title="2. 添加依赖"></a>2. 添加依赖</h3><p>&#x3D;&#x3D;springboot项目必须继承自父项目spring-boot-starter-parent&#x3D;&#x3D;</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>该parent包含了大量默认的配置，大大简化了我们的开发。</strong></p><p>添加web启动器，让项目具有web项目响应的功能。例如：处理请求和响应、启动内置的服务器(tomcat)等。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：springboot提供了44种启动器。每种启动器都包含与之对应的功能，其实就是很多jar的集合。在项目中要使用某种或某些功能时，只需要在项目中添加对应的启动器即可。这些启动器中包含大量的自动配置，减少程序中手工配置的工作，从而提高开发效率。</p><h3 id="3-编写控制器"><a href="#3-编写控制器" class="headerlink" title="3. 编写控制器"></a>3. 编写控制器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"hello!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ResponseBody</code>声明了这是一个异步方法</p><h3 id="4-编写启动类"><a href="#4-编写启动类" class="headerlink" title="4. 编写启动类"></a>4. 编写启动类</h3><p>在<code>com.hengxing</code>下创建启动类</p><ul><li>类名随意，一般是<code>MyApplication</code></li><li>与controller类文件同级目录或上一级，我们一般放在上一级</li><li>添加启动类的注解<code> @SpringBootApplication</code></li><li>调用SpringApplication.run方法传入启动类的名称</li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接运行这个方法即可启动SpringBoot项目</p><p><img src="https://s2.loli.net/2022/03/29/JKr5XTiahq6vH3w.png" alt="image-20220329002154007"></p><p>大功告成</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Servlet学习</title>
      <link href="/2022/04/02/Servlet%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/02/Servlet%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Spring预知识-Servlet的学习"><a href="#Spring预知识-Servlet的学习" class="headerlink" title="Spring预知识-Servlet的学习"></a>Spring预知识-Servlet的学习</h1><h2 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h2><blockquote><p>今天的目标</p><ul><li><p><input disabled="" type="checkbox"> html传值Servlet</p></li><li><p><input disabled="" type="checkbox"> Servlet + Dao</p></li></ul></blockquote><hr><p>在此之前你可以看我的这篇文章<a href="https://blog.csdn.net/hengxingtoongxue/article/details/123765213?spm=1001.2014.3001.5502">Spring预知识[01]-Tomcat&amp;Servlet学习</a>来学习此课程的预备知识</p><h3 id="一、HTML传值Servlet"><a href="#一、HTML传值Servlet" class="headerlink" title="一、HTML传值Servlet"></a>一、HTML传值Servlet</h3><p>我们有如下需求：</p><ol><li>客户端使用HTML写表单</li><li>提交给Servlet，Servlet获取表单内容</li><li>服务器在控制台打印表单数据</li></ol><p>先写个界面出来：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录界面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>密 码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再向Servlet包中添加Servlet的服务</p><blockquote><p>在包文件夹上右键，点击new-&gt;create new servlet</p></blockquote><p>request负责请求，我们的表单就是客户端传来的请求</p><p>LoginServlet.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/LoginServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username = "</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件中<code>@WebServlet(&quot;/LoginServlet&quot;)</code>就指定了你的页面，这样如果你在浏览器中访问<code>http://localhost:8080/LoginServlet</code>它就会执行这个方法。</p><p>现在，如何让HTML页面的表单提交时执行这个方法？</p><p>很简单，将你的表单用它包装起来，它指定了表单提交时执行的方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/LoginServlet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    这里是你的表单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行服务器，随便在表单中填点什么，点击登录，你可以在服务器控制台看到</p><p><img src="https://s2.loli.net/2022/03/27/rUZOzWpYQuoHvLa.png" alt="image-20220327104427314"></p><h3 id="二、Servlet-DAO-实现一个登录界面"><a href="#二、Servlet-DAO-实现一个登录界面" class="headerlink" title="二、Servlet + DAO 实现一个登录界面"></a>二、Servlet + DAO 实现一个登录界面</h3><p>首先你要知道Dao是做什么的</p><blockquote><p>Data Access Object</p><p>数据访问对象：专门和数据库进行增删改查操作的</p><p>JDBC是DAO的实现技术</p></blockquote><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> MySQL数据库op<span class="token operator">=></span>operation<span class="token operator">:</span> <span class="token constant">DAO</span>（<span class="token constant">JDBC</span>）和数据库交互数据op2<span class="token operator">=></span>operation<span class="token operator">:</span> Servlet从<span class="token constant">HTML</span>页面获取数据e<span class="token operator">=></span>end<span class="token operator">:</span> <span class="token constant">HTML</span>页面st<span class="token operator">-</span><span class="token operator">></span>opop<span class="token operator">-</span><span class="token operator">></span>op2op2<span class="token operator">-</span><span class="token operator">></span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>了解原理后我们实操一下</p><p>在工程中创建dao包，再在包中创建接口（右键-&gt;new-&gt;Java class）,记得选择Interface</p><p><img src="https://s2.loli.net/2022/03/27/MXDVcjaFWEgl4eK.png" alt="image-20220327153110238"></p><p>写上如下内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findByUsernameAndPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你也发现了，这其中并没有如何实现，只是声明了这个方法，所以还需要进行实现，再创建一个<code>impl</code>包，写明实现方法，具体过程和上面一样，我这里只贴出代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">LoginDao</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findByUsernameAndPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> pstm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select id, name, password from user where name = ? and password = ?"</span><span class="token punctuation">;</span><span class="token comment">//从user表中查询</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ComboPooledDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//rs就是执行查询后返回的值</span>            rs <span class="token operator">=</span> pstm<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstm<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为要连接MySQL，并且需要用到连接池，所以需要引入驱动，请自行搜索<code>c3p0连接池</code>和<code>JDBC</code>下载,还有c3p0-config.xml文件（如果不会用可以直接查看c3p0连接池用法，很简单）</p><p><img src="https://s2.loli.net/2022/03/27/yLlUGYtEKSoHqMw.png" alt="image-20220327154911012"></p><p>执行项目，在登录页面登录你数据库中已存在的用户，我这里有一个用户</p><table><thead><tr><th align="center">username</th><th align="center">password</th></tr></thead><tbody><tr><td align="center">Tifa</td><td align="center">123456</td></tr></tbody></table><p>登录后你会在控制台看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">欢迎，Tifa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恭喜你，你已经完成了今天的学习</p><hr><h3 id="三、完成登录信息提示功能"><a href="#三、完成登录信息提示功能" class="headerlink" title="三、完成登录信息提示功能"></a>三、完成登录信息提示功能</h3><p>我们刚刚是在控制台打印了成功的信息，可是用户并不知道是否成功，如果我们想让客户端提示“登录成功”或者“登录失败”，要怎么做呢</p><p><em>需要引入JSP</em></p><p>html页面是静态的，它无法完成交互的任务。</p><h4 id="引入JSP"><a href="#引入JSP" class="headerlink" title="引入JSP"></a>引入JSP</h4><p>下面我们简单介绍一下JSP</p><blockquote><p>JSP本质上就是Servlet</p><p>jsp第一次访问时，会被服务器中的jsp引擎编译成一个Servlet，放在Tomcat的work目录下。</p></blockquote><img src="https://s2.loli.net/2022/03/27/bnOZjG7kqWmQfcr.png" alt="image-20220327165532552" style="zoom:80%;" /><p>Servlet和html的配合十分麻烦，我们仅仅实现一个登录就用了这么多步骤，所以，Sun公司开发出了jsp，&#x3D;&#x3D;JSP使用起来会容易的多&#x3D;&#x3D;</p><p>实操一下，在web文件夹下右键-&gt;new-&gt;JSP,你就能得到一个jsp页面，在body标签中写点内容，比如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>这是第一个jsp页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后直接运行Tomcat，你会在<a href="http://localhost:8080/firstJsp.jsp">http://localhost:8080/firstJsp.jsp</a>中看到下图内容，路径是你jsp页面的文件名</p><p><img src="https://s2.loli.net/2022/03/27/3DLqcFU8zTXhgY5.png" alt="image-20220327171036333"></p><h4 id="传递数据-实现提示功能"><a href="#传递数据-实现提示功能" class="headerlink" title="传递数据-实现提示功能"></a>传递数据-实现提示功能</h4><p>servlet与jsp直接通过什么方法传递数据？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//key值是唯一的，不可重复</span><span class="token class-name">Object</span> value <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过key取出值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们只需要修改LoginServlet.java中判断是否登录成功的业务逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在HTML中插入java代码，使用如下格式即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span> your java code <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们在JSP中插入如下代码，来向页面传输数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%    String message = (String)request.getAttribute("message");%>&lt;%=message%>%这里是你的表单%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>getAttribute</code>方法获得参数再打印出来</p><p>这个时候你已经完成了页面的内容，但是此时程序还在LoginServlet.java中，你需要将它的逻辑跳转回来，在LoginServlet.java中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"firstJsp.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在doPost方法的最后一步添加</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击运行，登录之后你会看到</p><p><img src="https://s2.loli.net/2022/03/27/dxysVBFuORCnQ6q.png" alt="image-20220327174147498"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>学会了Servlet如何传值，如何使用DAO与数据库进行交互，DAO相当于简化了我们查询的流程，所以现在你知道DAO层是在做什么了吧。</li><li>学会了怎么在Servlet和jsp中交互，现在你已经会写可以交互的页面了！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
